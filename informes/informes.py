
# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Informes
                                 A QGIS plugin
Saca un informe en pdf con el cruce de capas
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-03-29
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Javier Diez Rabanos
        email                : dierabfr@jcyl.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
#from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
#from PyQt5.QtGui import QIcon
#from PyQt5.QtWidgets import QAction

from qgis.PyQt.QtCore import QSettings, QTranslator, qVersion, QCoreApplication#,QFileInfo
from qgis.PyQt.QtGui import QIcon, QColor,QFont
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from PyQt5.QtWidgets import QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
#from .informes_dialog import InformesDialog
import os.path

#import para procesar
import qgis.core as qgisCore
from qgis.core import QgsProject, QgsVectorLayer,QgsField,QgsExpression,QgsExpressionContext,QgsExpressionContextScope,QgsVectorFileWriter, QgsMarkerSymbol,QgsRendererCategory,QgsCategorizedSymbolRenderer,QgsPointXY, QgsPoint,QgsFeature,QgsGeometry,QgsLineSymbol,QgsExpressionContextUtils,QgsPalLayerSettings,QgsTextFormat,QgsVectorLayerSimpleLabeling,QgsExpressionContextUtils,QgsCoordinateTransform,QgsCoordinateReferenceSystem,QgsWkbTypes,QgsApplication,QgsFillSymbol,QgsSingleSymbolRenderer,QgsLayoutExporter,QgsLayout,QgsLayoutSize,QgsUnitTypes, QgsTextBufferSettings,QgsRasterLayer,QgsSymbolLayerRegistry
from qgis.PyQt.QtCore import QVariant
from qgis.utils import iface
#from PyQt5.QtWidgets import QMessageBox
#from PyQt5.QtCore import QFileInfo
#from qgis.PyQt.QtCore import QFileInfo
import reportlab

import processing
import os
import glob
import re
import sys
#from qgis import *

import math
import time

from .informes_dialog import InformesDialog

class Informes:
    """QGIS Plugin Implementation."""
    def __init__(self, iface):
        """Constructor.
        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Informes_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        self.dlg = InformesDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Sigmena')
        
        #self.toolbar = self.iface.addToolBar(u'Sigmena')             #creo que no hace nada
        #self.toolbar.setObjectName(u'Sigmena')            #creo que no hace nada
        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        #self.dlg.pushButton_select_path.clicked.connect(self.select_laz_folder)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Informes', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        
    

        
        #cambio el icon path para mi equipo.
        usuario=QgsApplication.qgisSettingsDirPath()
        icon_path=os.path.join(usuario,r"python\plugins\informes\icon.png")

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)
            #self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/informes/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Informes'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        

    
    



    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removeToolBarIcon(action)
            self.iface.removePluginMenu(
                self.tr(u'&Sigmena'),
                action)

#funcion que hace el cruce de las capas y saca los datos de interes
    def cruce(self,capadetrabajo,elementofijo):
        print("entro en cruce")
        global carpetasalida
        global tablamontes
        global tablaconsorcios
        global tablavvpps
        carpetasalida= '/'.join(capadetrabajo.split("/")[:-1])+"/capas_intermedias"
        sufijo=str(elementofijo.split("/")[-1])
        print (sufijo)
        salida=carpetasalida+"/"+sufijo
        print(capadetrabajo,elementofijo)
        #habra que hacer que carge la capa de mups.
        print("salida",salida)
        processing.run("native:selectbylocation", {'INPUT':elementofijo,'PREDICATE':[0],'INTERSECT':capadetrabajo,'METHOD':0})
        processing.run("native:saveselectedfeatures", {'INPUT':elementofijo,'OUTPUT':salida})
        
        layer= QgsVectorLayer(salida, sufijo[-4], "ogr")
        #layer.setProviderEncoding(u'UTF-8')
        #layer.dataProvider().setEncoding(u'UTF-8')

        if sufijo=="Mup_etrs89.shp":
            print("entro en sufuijo mup")
            print(salida)
            interesantes=["ETIQUETA","NOMB_MONTE","TERMIN_MUN","PERTENENCI"]
            cabecera=["M.U.P.","NOMBRE","TERMINO MUNICIPAL","PERTENENCIA"]
            tablamontes=[]
            #listado de columnas que me interesan
            for feature in layer.getFeatures():
                tablamonte=[]
                #print(feature)
                for field in layer.fields():
                    #print(field)
                    for campo in interesantes:
                        if campo== field.name():
                            #print(feature[campo])
                            tablamonte.append(feature[campo])
                            #print(tablamonte)
                tablamontes.append(tablamonte)
            #print(tablamontes)
            tablamontes.sort(key=lambda x: x[2])            
            tablamontes.insert(0,cabecera)
            #elimino los duplicados
            lista_nueva = []
            for i in tablamontes:
                if i not in lista_nueva:
                    lista_nueva.append(i)
            tablamontes=lista_nueva
        
        if sufijo=="Consorcios_etrs89.shp":
            print("entro en sufuijo consorcio")
            print(salida)
            interesantes=["CONSORCIO","NOMBRE","PUEBLO","NOMBRE_INE"]
            cabecera=["CONSORCIO","NOMBRE","LOCALIDAD","TERMINO MUNICIPAL"]
            tablaconsorcios=[]
            #listado de columnas que me interesan
            for feature in layer.getFeatures():
                tablaconsorcio=[]
                #print(feature)
                for field in layer.fields():
                    #print(field)
                    for campo in interesantes:
                        if campo== field.name():
                            print(feature[campo])
                            print(type(feature[campo]))
                            if type(feature[campo])=='str':
                                print(unicode(feature[campo].toString(), "utf-8"))
                            
                            
                            tablaconsorcio.append(feature[campo])
                            #print(tablamonte)
                tablaconsorcios.append(tablaconsorcio)
            #print(tablamontes)
            tablaconsorcios.sort(key=lambda x: x[2])            
            tablaconsorcios.insert(0,cabecera)
            #elimino los duplicados
            lista_nueva = []
            for i in tablaconsorcios:
                if i not in lista_nueva:
                    lista_nueva.append(i)
            tablaconsorcios=lista_nueva

        if sufijo=="42_vvpp_etrs89.shp":
            print("entro en sufuijo vvpp")
            print(salida)
            interesantes=["NOMBRE","TERM_MUNIC"]
            cabecera=["VIAS PECUARIAS","TERMINO MUNICIPAL"]
            tablavvpps=[]
            #listado de columnas que me interesan
            for feature in layer.getFeatures():
                tablavvpp=[]
                #print(feature)
                for field in layer.fields():
                    #print(field)
                    for campo in interesantes:
                        if campo== field.name():
                            #print(feature[campo])
                            
                            
                            tablavvpp.append(feature[campo])
                            #print(tablamonte)
                tablavvpps.append(tablavvpp)
            #print(tablamontes)
            tablavvpps.sort(key=lambda x: x[1])            
            tablavvpps.insert(0,cabecera)
            #elimino los duplicados
            lista_nueva = []
            for i in tablavvpps:
                if i not in lista_nueva:
                    lista_nueva.append(i)
            tablavvpps=lista_nueva

    #configuro el mapa con las capas necesarias
    def hagomapa(self,ruta):
        #elimino capas del proeycto actual
        #capasinteresantes=[]
        capas =QgsProject.instance().mapLayers()
        for capa in capas:
            #print (capa)
            #if capa not in capasinteresantes:
            QgsProject.instance().removeMapLayers( [capa] )
        del(capas)

       
        #cargo las capas finales
        mup=QgsVectorLayer(os.path.join(carpetasalida,"Mup_etrs89.shp"),"M.U.P.","ogr")
        consorcio=QgsVectorLayer(os.path.join(carpetasalida,"Consorcios_etrs89.shp"),"Consorcios","ogr")
        vvpp=QgsVectorLayer(os.path.join(carpetasalida,"42_vvpp_etrs89.shp"),"VVPP","ogr")
        ruta=QgsVectorLayer(ruta,"RUTA","ogr")
        # cargo el raster
        path_to_tif = os.path.join(r"R:\SIGMENA\CARTO\RASTER\ESCANEOS\E200\42_prov_IGN_etrs89.TIF")
        rlayer = QgsRasterLayer(path_to_tif, "E200")
        rlayer.renderer().setOpacity(0.5)
        QgsProject.instance().addMapLayer(rlayer)#QgsProject.instance().addRasterLayer(rlayer)
 
        #aplico simbologia a estas capas, si existen
        try:
            symbol = QgsFillSymbol.createSimple({'color': '0,0,0,0', 'outline_color': 'red','width_border':'1'})#({'line_style': 'dash', 'color': layercolour })
            symbol.setOpacity(1)
            #etiqueto
            layer_settings  = QgsPalLayerSettings()
            text_format = QgsTextFormat()
            text_format.setFont(QFont("Arial", 12))
            text_format.setSize(12)
            text_format.setColor(QColor("Red"))
            #le meto un buffer a la etiqueta
            buffer_settings = QgsTextBufferSettings()
            buffer_settings.setEnabled(True)
            buffer_settings.setSize(1)
            buffer_settings.setColor(QColor("white"))

            text_format.setBuffer(buffer_settings)
            layer_settings.setFormat(text_format)
            layer_settings.fieldName = '''concat('MUP ',"ETIQUETA")'''            
            layer_settings.isExpression = True
            layer_settings.enabled = True
            layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
            mup.setLabelsEnabled(True)
            mup.setLabeling(layer_settings)
            mup.triggerRepaint()
            mup.renderer().setSymbol(symbol)
            QgsProject.instance().addMapLayer(mup)   
        except: 
            pass
        try:
            symbol = QgsFillSymbol.createSimple({'color': '0,0,0,0', 'outline_color': 'yellow','width_border':'1'})
            #etiqueto
            layer_settings  = QgsPalLayerSettings()
            text_format = QgsTextFormat()
            text_format.setFont(QFont("Arial", 12))
            text_format.setSize(12)
            text_format.setColor(QColor("Yellow"))
            #le meto un buffer a la etiqueta
            buffer_settings = QgsTextBufferSettings()
            buffer_settings.setEnabled(True)
            buffer_settings.setSize(1)
            buffer_settings.setColor(QColor("grey"))
            text_format.setBuffer(buffer_settings)
            layer_settings.setFormat(text_format)
            layer_settings.fieldName = '''concat('SO',"CONSORCIO")'''            
            layer_settings.isExpression = True
            layer_settings.enabled = True
            layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
            consorcio.setLabelsEnabled(True)
            consorcio.setLabeling(layer_settings)
            consorcio.triggerRepaint()
            consorcio.renderer().setSymbol(symbol)
            QgsProject.instance().addMapLayer(consorcio)
        except: 
            pass

        try:
            props = { 'width' : '.6', 'color' : '0,255,0','penstyle': 'dash','customdash': '3;2', 'use_custom_dash': '1' } #{'width': '0.26', 'color': '255,0,0', 'offset': '-1.0', 'penstyle': 'solid', 'use_custom_dash': '0', 'joinstyle': 'bevel', 'capstyle': 'square'})
            association_symbol = QgsApplication.symbolLayerRegistry().symbolLayerMetadata("SimpleLine").createSymbolLayer(props)#{        'arrow_width': '0.4',        'head_length': '2.0', 'head_thickness' : '0.75', 'color': 'red', 'line_color': 'red', 'is_curved': '0', 'arrow_start_width': '.2 '})#("SimpleLine")(props)
            vvpp.renderer().symbol().deleteSymbolLayer(0) 
            vvpp.renderer().symbol().appendSymbolLayer(association_symbol)            
            #etiqueto
            layer_settings  = QgsPalLayerSettings()
            text_format = QgsTextFormat()
            text_format.setFont(QFont("Arial", 8))
            text_format.setSize(8)
            text_format.setColor(QColor("Black"))
            #le meto un buffer a la etiqueta
           
            layer_settings.setFormat(text_format)
            layer_settings.fieldName = '''concat("NOMBRE",' ')'''            
            layer_settings.isExpression = True
            layer_settings.enabled = True
            layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
            vvpp.setLabelsEnabled(True)
            vvpp.setLabeling(layer_settings)
            
            vvpp.triggerRepaint()
            vvpp.renderer().symbol()
            QgsProject.instance().addMapLayer(vvpp)   
        except: 
            pass
        
        symbol=QgsLineSymbol.createSimple({'color': 'black', 'line_width': '1.3'})
        ruta.renderer().setSymbol(symbol)
        extent = ruta.extent()
        iface.mapCanvas().setExtent(extent)
        QgsProject.instance().addMapLayer(ruta)
        
#funcion que crea el informe en pdf con los datos que salen de la funcion anterior y el tipo de informe que saldra del dialogo
    def creaelpdf(self,tipo,datosmontes,datosconsorcios,datosvvpps,imagen):
        from reportlab.platypus import SimpleDocTemplate,Paragraph,Table,TableStyle,Image
        from reportlab.lib.styles import getSampleStyleSheet
        from reportlab.lib import colors
        from reportlab.lib.pagesizes import A3,portrait,landscape
        from reportlab.lib.units import mm
        from reportlab.pdfgen import canvas
        from reportlab.pdfbase import pdfmetrics
        from reportlab.pdfbase.ttfonts import TTFont
        global carpetasalida
        global tablamontes
        global tablaconsorcios
        global tablavvpps

        

        c = canvas.Canvas(carpetasalida+"/salida.pdf", pagesize=landscape(A3))  # alternatively use bottomup=False
        width, height = A3
        #meto la imagen
        img_data1=Image(imagen,height-10, width-10)#250*mm,250*mm)#los numeross son opcionales para determinar el tamaño
        #img_data1.wrapOn(c, 200*mm,200*mm)
        img_data1.drawOn(c,5*mm,5 * mm)


        
        #pdfmetrics.registerFont(TTFont('Verdana','Verdana.ttf'))
        #c.setFont('Verdana',8)
        #defino el estilo de la tabla
        tstyle=TableStyle([("GRID",(0,0),(-1,-1),.1,colors.black),
                           ("GRID",(0,0),(-1,0),.8,colors.black),
                           ('FONTSIZE', (0, 0), (-1, -1), 8),
                           ('BACKGROUND', (0,0), (-1,-1), colors.white),
                            #('FONTNAME', (0,0), (-1,0), 'Verdana'),#'Courier-Bold'),
                            ("ALIGN",(0,0),(-1,-1),"CENTER"),
                            ("VALIGN",(0,0),(-1,-1),"MIDDLE")])
        #hago la tabla de montes
        data = tablamontes
        t=Table(data)
        t.setStyle(tstyle)
        t.wrapOn(c, width, height)
        t.drawOn(c, 10*mm, 5*mm)

        #tabla de consorcios
        data = tablaconsorcios
        print (data)
        t2=Table(data)
        t2.setStyle(tstyle)
        t2.wrapOn(c, width, height)
        t2.drawOn(c, 10*mm, 250*mm)

        #tabla de vvpp
        data = tablavvpps
        print (data)
        t3=Table(data)
        t3.setStyle(tstyle)
        t3.wrapOn(c, width, height)
        t3.drawOn(c, 250*mm, 5*mm)        
        
        

        

        #aqui mete un texto
        styles = getSampleStyleSheet()    
        #ptext = "This is an example."
        #p = Paragraph(ptext, style=styles["Normal"])
        #p.wrapOn(c, 50*mm, 50*mm)  # size of 'textbox' for linebreaks etc.
        #p.drawOn(c, 0*mm, 0*mm)    # position of text / where to draw

        

        c.save()
        

    def plantillaapng(self,plantilla, rutapng):
        projectInstance = QgsProject.instance()
        layoutmanager = projectInstance.layoutManager()
        layout = layoutmanager.layoutByName("A3_H") #Layout name
        mapItem = layout.referenceMap()
        #print(mapItem)
        #mapItem.setExtent(iface.mapCanvas().extent())
        #mapItem.attemptResize(QgsLayoutSize(410, 260, QgsUnitTypes.LayoutMillimeters))
        mapItem.zoomToExtent(iface.mapCanvas().extent())
        #layout = layoutmanager.layoutByName(plantilla) #Layout name
        #mapItem = QgsLayout.referenceMap()
        #mapItem.setExtent(iface.mapCanvas().extent())
        legendExporter=QgsLayoutExporter(layout)
        imageSettings=legendExporter.ImageExportSettings()
        imageSettings.cropToContents=True
        imageSettings.dpi=300
        imageSettings.pages=[0]
        exporter = QgsLayoutExporter(layout)
        exporter.exportToImage(rutapng,imageSettings )


    

    


    def run(self):
        print ("paso por el run")
        
        #tendra que ser una capa de lineas
        #
        """if vl.wkbType() == QgsWkbTypes.Polygon or vl.wkbType() == QgsWkbTypes.MultiPolygon:
            vl.startEditing()

            fields = vl.fields()
            idx = fields.indexFromName('informes')
            
            if idx == -1:
                myField = QgsField( 'informes', QVariant.Double )
                vl.dataProvider().addAttributes([myField])
                vl.updateFields()
            

            for f in vl.getFeatures():
                f.setAttribute(f.fieldNameIndex('informes'), f.geometry().area()/10000 )
                #f[idx] = '"$area"*1000'
                vl.updateFeature( f )

            vl.commitChanges()
        #coloco el puntero arriba del todo
        #QgsProject.instance().layerTreeRegistryBridge().setLayerInsertionPoint( QgsProject.instance().layerTreeRoot(), 0 )
            
            #defino simbologia
            sym1 = QgsFillSymbol.createSimple({'style': 'vertical','color': '0,0,0,0', 'outline_color': 'red'})
            renderer=QgsSingleSymbolRenderer(sym1)
            #defino formato etiquetas
            layer_settings  = QgsPalLayerSettings()
            text_format = QgsTextFormat()
            text_format.setFont(QFont("Arial", 12))
            text_format.setSize(12)
            text_format.setColor(QColor("Red"))
            layer_settings.setFormat(text_format)

            # defino etiquetas
            layer_settings.fieldName = '''concat(format_number("hectareas",2),' ha.')'''            
            layer_settings.isExpression = True
            layer_settings.enabled = True
            layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
            vl.setLabelsEnabled(True)
            vl.setLabeling(layer_settings)
            vl.triggerRepaint()
            vl.setRenderer(renderer)
            #QgsProject.instance().addMapLayer(v1)
            #QgsProject.instance().removeMapLayer(layer)
            #canvas.freeze(False)
            vl.updateExtents()
            vl.commitChanges()
            vl.updateExtents()
            #canvas.setExtent(lyr9.extent())

   """
     
        
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            
       # show the dialog
        self.dlg.show()
        
        #self.dlg.pushButton_select_path.clicked.connect(self.select_laz_folder)

        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            print("he presionado en ok")
            tipo=1#lo tiene que sacar del radio button, lo bueno seria hacer una lista global con estos datos
            vl = iface.activeLayer()
            #tendra que ser una capa de lineas
            ruta=r'R:/SIGMENA/prueba/2020/03/12/numancia4x4/Ruta1.shp'
            mup=r'O:/sigmena/carto/PROPIEDA/MONTES/PERTENEN/Mup_etrs89.shp'
            vvpp=r"O:/sigmena/carto/VVPP/REDVVPP/42_vvpp_etrs89.shp"
            carpetasalida= '/'.join(ruta.split("/")[:-1])+"/capas_intermedias"
            imagen=carpetasalida+"/imagen.png"

            #vvpp
            consorcio=r"O:/sigmena/carto/PROPIEDA/MONTES/CONTRATO/Consorcios_etrs89.shp"
            #capasdecorte=[mup]
            #for capa in capasdecorte:
            self.cruce(ruta,mup)
            self.cruce(ruta,consorcio)
            self.cruce(ruta,vvpp)
            self.hagomapa(ruta)
            self.plantillaapng("A3_H",imagen)
            global tablaconsorcios
            global tablamontes
            global tablavvpps
            self.creaelpdf("1",tablamontes,tablaconsorcios,tablavvpps,imagen)
            
            
            
            
            
            
