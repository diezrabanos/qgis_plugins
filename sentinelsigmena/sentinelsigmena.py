# -*- coding: cp1252 -*-
"""
/***************************************************************************
 Sentinelsigmena
                                 A QGIS plugin
 Carga una capa con los recintos o las parcelas del sigpac que se indique, bien selecionado el codigo, bien introduciendo una coordenada.
 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-03-29
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Javier Diez Rabanos
        email                : dierabfr@jcyl.es
 ***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
#from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
#from PyQt5.QtGui import QIcon
#from PyQt5.QtWidgets import QAction
from PyQt5 import QtWidgets 
from qgis.PyQt.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QVariant#,QFileInfo
from qgis.PyQt.QtGui import QIcon, QColor,QFont
from qgis.PyQt.QtWidgets import QAction, QFileDialog,QMessageBox,QInputDialog
from PyQt5.QtWidgets import QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .sentinelsigmena_dialog import SentinelsigmenaDialog
from .config_dialog import ConfigDialog
import os.path

#import para procesar
import qgis.core as qgisCore
from qgis.core import QgsProject, QgsVectorLayer,QgsField,QgsExpression,QgsExpressionContext,QgsExpressionContextScope,QgsVectorFileWriter, QgsMarkerSymbol,QgsRendererCategory,QgsCategorizedSymbolRenderer,QgsPointXY, QgsPoint,QgsFeature,QgsGeometry,QgsLineSymbol,QgsFillSymbol,QgsSingleSymbolRenderer,QgsPalLayerSettings,QgsTextFormat ,QgsVectorLayerSimpleLabeling,QgsExpressionContextUtils, QgsApplication, QgsTextBufferSettings
from qgis.utils import iface

from qgis.gui import QgsMapToolEmitPoint

#from qgis.gui import QgsMessageBar
import os
import processing
import os
import glob
import re
import sys

import ast
import math
import time
import random

from PyQt5.QtCore import Qt
from qgis.gui import QgsMapTool

from qgis.PyQt.QtCore import pyqtSignal, Qt
from qgis.gui import QgsMapToolEmitPoint, QgsRubberBand
from qgis.core import QgsWkbTypes, QgsPointXY, QgsApplication

import webbrowser

import json

import zipfile

from os import listdir


#parametros
rutawget='c:/work/aplicaciones/wget'
rutasalida='d:/pruebas/sentinel/'
usuarioscihub='usuario'
contrasenascihub='contrraseña'
usuariojcyl='usuario'
contrasenajcyl='contraseña'
proxy='proxy:puerto'
#fechainicial='2021-12-01'
#fechafinal='2022-01-15'
geometria='POLYGON((-2.34%2042.9,-2.34%2042.1,-2.14%2042.1,-2.14%2042.9,-2.34%2042.9))'




class CoordinateCaptureMapTool(QgsMapToolEmitPoint):
    
    mouseClickedsenal = pyqtSignal(QgsPointXY)

    def __init__(self, canvas):
        print("cambio el cusor y empiezo a escuchar")
        super(CoordinateCaptureMapTool, self).__init__(canvas)
        self.mapCanvas = canvas
        self.setCursor(QgsApplication.getThemeCursor(QgsApplication.Cursor.CrossHair))
        
    def canvasPressEvent(self, e):
        if e.button() == Qt.LeftButton:
            originalPoint = QgsPointXY(self.mapCanvas.getCoordinateTransform().toMapCoordinates(e.x(), e.y()))
            self.mouseClickedsenal.emit(originalPoint)
            print("emitido desde el canvaspressevent")
            
        
    """def deactivate(self):
        #self.rubberBand.reset(QgsWkbTypes.LineGeometry)
        super(CoordinateCaptureMapTool, self).deactivate()"""

            



class SendPointToolCoordinates(QgsMapTool): #old
    """ devuelve la coordenada en la que se ha hecho click en el mapa.
    """
    
    def __init__(self, canvas, layer):
        """ Constructor.
        """
        QgsMapTool.__init__(self, canvas)
        self.canvas = canvas
        self.layer = layer
        self.setCursor(Qt.CrossCursor)

        
        


    """def canvasReleaseEvent(self, event):
        import os

        usuario=QgsApplication.qgisSettingsDirPath()
        fileclick=os.path.join(usuario,r"python\plugins\sigpac\clik.txt")
        archivo = open(fileclick, "w")
        point = self.toLayerCoordinates(self.layer, event.pos())
        x=point.x()
        y=point.y()
        archivo.write(str(x)+"\n")
        archivo.write(str(y))
        print(x,y)
        archivo.close()
        
        self.canvas.unsetMapTool(self)

        #nuevo desde aqui
        #a partir de aqui lo copio pego como si hubiera escrito la coordenada en el combobox.
        #creo una capa temporal con las coordenadas
        # create layer
        vl2 = QgsVectorLayer("Point?crs=epsg:25830", "Punto", "memory")
        pr2 = vl2.dataProvider()
        
        vl2.startEditing()
        # add fields
        pr2.addAttributes([
                        QgsField("x",  QVariant.Double),
                        QgsField("y", QVariant.Double)])
        vl2.updateFields() 
        # tell the vector layer to fetch changes from the provider
        
        #$add a feature
        fet = QgsFeature()
        fet.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(float(x),float(y))))
        fet.setAttributes([ float(x),float( y)])
        pr2.addFeatures([fet])
        
        
       
        #cambio la simbologia
        symbol = QgsMarkerSymbol.createSimple({'name': 'circle', 'color': 'blue','size': '3',})
        vl2.renderer().setSymbol(symbol)

        # update layer's extent when new features have been added
        # because change of extent in provider is not propagated to the layer
        vl2.updateExtents()
        vl2.commitChanges()
        vl2.updateExtents()
        #canvas = self.iface.mapCanvas()
        self.canvas.setExtent(vl2.extent())


        #QgsProject.instance().addMapLayer(vl)
        QgsProject.instance().addMapLayer(vl2)"""









class Config:
    def __init__(self, iface):
        self.dlg2 = ConfigDialog()

class Sentinelsigmena:
    """QGIS Plugin Implementation."""
    #la variable almacen contendra en forma de lista los datos necesario de provincia,usodecomarca, comarca, comarcas y municipios

    def __init__(self, iface):
        
        
        
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Sentinelsigmena_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        self.dlg = SentinelsigmenaDialog()
        self.dlg2 = ConfigDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Sigmena')
        
        #self.toolbar = self.iface.addToolBar(u'Sigmena')             #creo que no hace nada
        #self.toolbar.setObjectName(u'Sigmena')            #creo que no hace nada
        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        global usarcomarca
        #ojo esto luego lo debera buscar del gui
        if self.dlg.mycheckbox2.isChecked():
            usarcomarca=True
        else:
            usarcomarca=False
        #hago lo mismo con el usar recintos o parcelas
        recintosselecionados=bool()
        
        self.first_start = None
        self.dlg.pushButton_select_path.clicked.connect(self.select_file)



        #self.dlg.pushButton_click.clicked.connect(self.pincharenbotonclick)

        #abre la nueva ventana de configuracion


        self.dlg.pushButton_clikenmapa.clicked.connect(self.startCapturing) 

        self.mapTool = CoordinateCaptureMapTool(self.iface.mapCanvas())
        self.mapTool.mouseClickedsenal.connect(self.mouseClicked)

        self.dlg.pushButton_buscar.clicked.connect(self.botonbuscarimagenes)
        self.dlg.pushButton_descargar.clicked.connect(self.botondescargarimagenes)
        self.dlg.pushButton_previsualizar.clicked.connect(self.botonprevisualizarimagenes)
        


        

        
        

        

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
       
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Sentinelsigmena', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        


        
        #cambio el icon path para mi equipo.

        usuario=QgsApplication.qgisSettingsDirPath()
        icon_path=os.path.join(usuario,r"python\plugins\sentinelsigmena\icon.png")
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/sentinelsigmena/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Sigpac'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

        #cojo los parametros necesarios del archivo de configuracion
        global rutaarchivomunicipiossigpac
        global rutacarpetarecintos
        global usarcomarca
        global miprovincia
        global micomarca
        global rutacache
        rutaarchivoconfiguracion=os.path.join(QgsApplication.qgisSettingsDirPath(),r"python\plugins\sentinelsigmena\configuracion.txt")
        rutacache=os.path.join(QgsApplication.qgisSettingsDirPath(),r"python\plugins\sentinelsigmena\cache.txt")
        if os.path.isfile(rutaarchivoconfiguracion) ==True:
            fileconfig = open(rutaarchivoconfiguracion, "r")
            fileconfigleido=fileconfig.readlines()
            try:
                rutaarchivomunicipiossigpac= (fileconfigleido[0].replace('\n',''))
                rutacarpetarecintos= (fileconfigleido[1].replace('\n',''))
                fileconfig.close()
            except:
                rutaarchivomunicipiossigpac=""
                rutacarpetarecintos=""
        if os.path.isfile(rutaarchivoconfiguracion) ==False:
            fileconfig = open(rutaarchivoconfiguracion, "w")
            fileconfig.close()
            rutaarchivomunicipiossigpac=""
            rutacarpetarecintos=""


    def help_pressed(self):
        help_file = 'file:O:/sigmena/utilidad/PROGRAMA/QGIS/Complementos/Manual/Manual_Sigpac_SIGMENA.htm'
        webbrowser.open_new(help_file)
        
    
    def select_file(self): 
        """seleciono la carpeta con los datos de entrada"""
     
        
        #self.dlg.carpetalaz.clear()
        carpeta = QFileDialog.getSaveFileName(self.dlg , "Nuevo archivo shp",None ,'SHP(*.shp)')
   
        self.dlg.ruta_archivo.setText(carpeta[0])
  
        archivo=carpeta[0]
 
    def select_file1(self):

        """seleciono la capa con los datos de entrada terminos municipales del sigpac"""
        global rutaarchivomunicipiossigpac
        rutaarchivoconfiguracion=os.path.join(QgsApplication.qgisSettingsDirPath(),r"python\plugins\sentinelsigmena\configuracion.txt")
        rutaarchivomunicipiossigpac = QFileDialog.getOpenFileName(self.dlg2 , "Capa provincial con los terminos municipales SIGPAC",None ,'SHP(*.shp)')
        self.dlg2.ruta1.setText(rutaarchivomunicipiossigpac[0])
        archivo=rutaarchivomunicipiossigpac[0]
        #inserto en linea 0 el contenido
        if len(rutaarchivomunicipiossigpac[0])>0:
            contenido=open(rutaarchivoconfiguracion).read().splitlines()
            contenido.insert(0,rutaarchivomunicipiossigpac[0])
            fileconfig = open(rutaarchivoconfiguracion, "w")

        
            fileconfig.writelines("\n".join(contenido))
            fileconfig.close()
            iface.messageBar().pushMessage("CERRAR Y ABRIR QGIS PARA QUE SE APLIQUEN LOS CAMBIOS", qgisCore.Qgis.Warning,5)

    
        
    def select_file2(self):

        """seleciono la carpeta con los datos de entrada de recintos"""
        global rutacarpetarecintos
        rutaarchivoconfiguracion=os.path.join(QgsApplication.qgisSettingsDirPath(),r"python\plugins\sentinelsigmena\configuracion.txt")
        rutacarpetarecintos = QFileDialog.getExistingDirectory(self.dlg2 , "Carpeta con los shps con los recintos sigpac")
        self.dlg2.ruta2.setText(rutacarpetarecintos)
        #inserto en linea 1 el contenido
        if len(rutacarpetarecintos)>0:
            contenido=open(rutaarchivoconfiguracion).read().splitlines()
            contenido.insert(1,rutacarpetarecintos)
            fileconfig = open(rutaarchivoconfiguracion, "w")

            fileconfig.writelines("\n".join(contenido))
            fileconfig.close()
            iface.messageBar().pushMessage("CERRAR Y ABRIR QGIS PARA QUE SE APLIQUEN LOS CAMBIOS", qgisCore.Qgis.Warning,5)
   
    def hacerclickenmapa_pressed(self):
        print ("ahora deberia cambiar el cursor por uno que recoja la coordenada cuando cliquee")
        layer, canvas = iface.activeLayer(), iface.mapCanvas()

        #send_point_tool_coordinates = SendPointToolCoordinates(canvas,layer)
        self.dockwidget.captureButton.clicked.connect(self.startCapturing)
        #cuando haga click en el mapa, evento, se guardara la coordenada
        #canvas.setMapTool(send_point_tool_coordinates)#.resultado())
         

        
        self.dlg.close()
        #leo la x y la y que acabo de guardar
        usuario=QgsApplication.qgisSettingsDirPath()
        fileclick=os.path.join(usuario,r"python\plugins\sentinelsigmena\clik.txt")
        archivo = open(fileclick, "r")
        #print(archivo.readline(0))
        x=float(archivo.readline()[:-1])#float(archivo.readline(0))
        print("x",x)
        y=float(archivo.readline())#float(archivo.readlines(1))
        print("y",y)
        """for linea in archivo.readlines():
            print linea"""

        
    def startCapturing(self):
        self.iface.mapCanvas().setMapTool(self.mapTool)
        self.dlg.close()
        
    def mouseClicked(self, point: QgsPointXY):
        #recibe el evento emitido por la senal
        
        self.update(point)
        #self.mapTool.deactivate()

   
        

    



    #funciones copernicus


    def buscarimagenes(self,fechainicial,fechafinal,geometria):
        comando=rutawget+' --no-check-certificate --user='+usuarioscihub+' --password='+contrasenascihub+' --output-document='+rutasalida+'query_results_json.txt "https://apihub.copernicus.eu/apihub/search?q=(platformname:Sentinel-2)%20AND%20cloudcoverpercentage:[0%20TO%20100]%20AND%20beginPosition:['+fechainicial+'T00:00:00.000Z%20TO%20'+fechafinal+'T23:59:59.999Z]%20AND%20footprint:%22Intersects('+geometria+')%22&rows=25&start=0&format=json" -e use_proxy=yes -e https_proxy="https://'+usuariojcyl+':'+contrasenajcyl+'@'+proxy+'"'
        os.system(comando)
        
    def leerjson(self,archivo):
        resultadojson=[]#lista con todoas las imagenes y para cada una de ellas [titulo,icono,enlace]
        with open(archivo) as file:
            data = json.load(file)
            for entrada in data['feed']['entry']:
                titulo=entrada['title']
                enlace=entrada['link'][0]['href']#.keys())#[u'ondemand', u'title', u'int', u'double', u'summary', u'link', u'str', u'date', u'id']
                icono=entrada['link'][2]['href']
                #sumario=entrada['summary']
                resultadojson.append([titulo,icono,enlace])
        #print(resultadojson)
        return resultadojson

    def muestraresultadobusqueda(self,jsonleido):
        #defino el ancho
        self.dlg.mitableWidget.setColumnWidth(0,400)
        #defino el largo
        self.dlg.mitableWidget.setRowCount(len(jsonleido))
        #relleno
        for i in range(len(jsonleido)):
            self.dlg.mitableWidget.setItem(i, 0,QtWidgets.QTableWidgetItem(jsonleido[i][0]))
            
            
        #uidseleccionadas=[]
        #return uidseleccionadas

    #enlace="https://apihub.copernicus.eu/apihub/odata/v1/Products('fc87e18a-158b-4df2-bcc2-3a574da50459')/$value"


    def descargarimagenes(self,enlace,nombre):
        comando=rutawget+' --content-disposition --continue --user='+usuarioscihub+' --password='+contrasenascihub+' -O '+rutasalida+nombre+' '+enlace+' -e use_proxy=yes -e https_proxy="https://'+usuariojcyl+':'+contrasenajcyl+'@'+proxy+'"'
        print (comando)
        os.system(comando)

    def descomprime(self,nombre):
        with zipfile.ZipFile(rutasalida+nombre, 'r') as zip_ref:
            zip_ref.extractall(rutasalida)
    def cargaraster(self,nombre,bandas):
        nombresubcarpeta=listdir(rutasalida+nombre+'.SAFE/GRANULE/')[0]
        for banda in bandas:
            rasterLyr=iface.addRasterLayer(rutasalida+nombre+'.SAFE/GRANULE/'+nombresubcarpeta+'/IMG_DATA/R10/'+nombre[40:47]+nombre[11:26]+banda+'_10m.jp2',"nombre")
        
        

    def botondescargarimagenes(self):
        jsonleido=self.leerjson(rutasalida+'query_results_json.txt')
        indices=self.dlg.mitableWidget.selectionModel().selectedRows()
        for indexRow in sorted(indices):
            row = indexRow.row()
            nombre=jsonleido[row][0]+'.ZIP'
            enlace=jsonleido[row][2]
            self.descargarimagenes(enlace,nombre)
            self.descomprime(nombre)
            
    def botonprevisualizarimagenes(self):
        jsonleido=self.leerjson(rutasalida+'query_results_json.txt')
        indices=self.dlg.mitableWidget.selectionModel().selectedRows()
        for indexRow in sorted(indices):
            row = indexRow.row()
            nombrepreview='preview'+jsonleido[row][0]+'.jpg'
            enlacepreview=jsonleido[row][1]
            self.descargarimagenes(enlacepreview,nombrepreview)
            webbrowser.open_new(rutasalida+nombrepreview) 
            #new_extent=rasterLyr.extent()
            #iface.mapCanvas().zoomToFeatureExtent(new_extent)
        
        

    #print(leerjson(rutasalida+'query_results_json.txt'))

    #para descargar TODOS los resultados de la busqueda
    def busquedaydescarga(fechainicial,fechafinal,geometria):
        buscarimagenes(fechainicial,fechafinal,geometria)
        resultadojson=leerjson(rutasalida+'query_results_json.txt')
        for imagen in resultadojson:
            if "L2A_" in imagen[0]:
                print(imagen[0])
            #descargarimagenes(imagen[2])







    def botonbuscarimagenes(self):
        fechainicial=self.dlg.fechaini.text()
        fechafinal=self.dlg.fechafin.text()
        print(fechainicial, fechafinal)
        self.buscarimagenes(fechainicial,fechafinal,geometria)
        jsonleido=self.leerjson(rutasalida+'query_results_json.txt')
        #jsonleido=[['S2B_MSIL2A_20211229T110349_N0301_R094_T30TWN_20211229T130006', "https://apihub.copernicus.eu/apihub/odata/v1/Products('10e18b8b-fcff-4701-853d-fadcb7976943')/Products('Quicklook')/$value", "https://apihub.copernicus.eu/apihub/odata/v1/Products('10e18b8b-fcff-4701-853d-fadcb7976943')/$value"], ['S2B_MSIL2A_20211229T110349_N0301_R094_T30TWM_20211229T130006', "https://apihub.copernicus.eu/apihub/odata/v1/Products('19c6abde-d9d4-48b9-9dd1-bf35ee920da1')/Products('Quicklook')/$value", "https://apihub.copernicus.eu/apihub/odata/v1/Products('19c6abde-d9d4-48b9-9dd1-bf35ee920da1')/$value"], ['S2B_MSIL1C_20211229T110349_N0301_R094_T30TWM_20211229T115836', "https://apihub.copernicus.eu/apihub/odata/v1/Products('0e7175ba-2be2-49cf-b4c0-24bde6c7a211')/Products('Quicklook')/$value", "https://apihub.copernicus.eu/apihub/odata/v1/Products('0e7175ba-2be2-49cf-b4c0-24bde6c7a211')/$value"], ['S2B_MSIL1C_20211229T110349_N0301_R094_T30TWN_20211229T115836', "https://apihub.copernicus.eu/apihub/odata/v1/Products('1915c53a-a222-458e-83f9-8f8947e0b329')/Products('Quicklook')/$value", "https://apihub.copernicus.eu/apihub/odata/v1/Products('1915c53a-a222-458e-83f9-8f8947e0b329')/$value"], ['S2A_MSIL2A_20211224T110451_N0301_R094_T30TWN_20211224T135954', "https://apihub.copernicus.eu/apihub/odata/v1/Products('d41d12e3-0240-4a21-ad39-166aa8b42b2a')/Products('Quicklook')/$value", "https://apihub.copernicus.eu/apihub/odata/v1/Products('d41d12e3-0240-4a21-ad39-166aa8b42b2a')/$value"]]
        
        self.muestraresultadobusqueda(jsonleido)

        





        

       
        
     

        #aqui estoy en el punto de partida como si hubiese metido municipio, poligono y parcela 

        #aqui estoy en el punto de partida como si hubiese metido municipio, poligono y parcela   ################################################
        
    def hacerclickenmapa_pressed_1(self):#old
        print ("ahora deberia cambiar el cursor por uno que recoja la coordenada cuando cliquee")
        layer, canvas = iface.activeLayer(), iface.mapCanvas()

        send_point_tool_coordinates = SendPointToolCoordinates(canvas,layer)
        #cuando haga click en el mapa, evento, se guardara la coordenada
        canvas.setMapTool(send_point_tool_coordinates)#.resultado())
        
        self.dlg.close()
        #leo la x y la y que acabo de guardar
        usuario=QgsApplication.qgisSettingsDirPath()
        fileclick=os.path.join(usuario,r"python\plugins\Sentinelsigmena\clik.txt")
        archivo = open(fileclick, "r")
        #print(archivo.readline(0))
        x=float(archivo.readline()[:-1])#float(archivo.readline(0))
        print("x",x)
        y=float(archivo.readline())#float(archivo.readlines(1))
        print("y",y)
        
        
                
          
                
          

            
    def display_point( self,pointTool ):
        print("esta es la funcion que saca las coordenadas")
        #print ('({:.4f}, {:.4f})'.format(pointTool[0], pointTool[1]))
        #canvas.setMapTool(preMapTool)       


        
    def hacerclick(self):
        print("acabo de pinchar en el bton de hacer click en las coordenadas")
        

        
        # a reference to our map canvas 
        #canvas = self.iface.mapCanvas()
        
        # this QGIS tool emits as QgsPoint after each click on the map canvas
        pointTool = QgsMapToolEmitPoint(canvas)
        pointTool.canvasClicked.connect( self.display_point )
        canvas.setMapTool( pointTool )
        print("canvas2 ",canvas)
        print("ok")




    
    
       

   
    def configurar(self):
        contras = QInputDialog.getText(None, 'CONTRASEÑA', 'Introduce la contraseña')
        if contras[0]=='SIGMENITA':
            self.dlg2.show()
        else:
            iface.messageBar().pushMessage("PARA CONFIGURAR INRODUCIR CONTRASEÑA", qgisCore.Qgis.Warning,5)
        


        


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        print("desinstalo")
        for action in self.actions:
            self.iface.removeToolBarIcon(action)
            self.iface.removePluginMenu(
                self.tr(u'&Sigmena'),
                action)


    def funcionrecintos(self):
        global recintosselecionados
        if self.dlg.radioButtonRecintos.isChecked()==True:
            recintosselecionados=True
            print ("Quiero sacar recintos")
            
    def funcionparcelas(self):
        global recintosselecionados
        if self.dlg.radioButtonParcelas.isChecked()==True:
            recintosselecionados=False
            print ("Quiero sacar parcelas")
            
    


    def run(self):
       
        
       
                
     

        canvas = self.iface.mapCanvas()
        print ("canvas1 ",canvas)

        
        #para evitar problemas con la codificacion de los shapes con los municipios y las tildes  ##OJO######
        QSettings().setValue("/qgis/ignoreShapeEncoding", False)

        
            
            

        # show the dialog
        self.dlg.show()
        
        #self.dlg.pushButton_select_path.clicked.connect(self.select_laz_folder)

        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            
            
            fechainicial=self.dlg.POL.text()##displayText()
            fechafinal=self.dlg.PAR.text()##displayText()
            
