# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LayoutLoader
                                 A QGIS plugin
 Load and modify layout templates
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-11-18
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Klas Karlsson
        email                : klaskarlsson@hotmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QFileInfo, Qt,QRectF
from PyQt5.QtGui import QIcon,QColor,QFont
from PyQt5.QtWidgets import QAction
# The following two imports are probably a bit overkill...
from PyQt5 import QtGui, QtCore, QtWidgets
from PyQt5.QtWidgets import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog and for copying the templates to local profile folder
from .impresion_sigmena_dialog import ImpresionSigmenaDialog
import os.path
from qgis.core import QgsApplication, QgsProject,QgsPrintLayout,QgsUnitTypes,QgsLayoutSize,QgsLayoutItemMap,QgsLayoutItemLabel,QgsLayoutExporter,QgsLayoutItemScaleBar,QgsVector,QgsVectorLayer,QgsRasterLayer,QgsLayoutItemMapGrid,QgsLayoutItemLegend,QgsLayoutPoint,QgsLegendStyle,QgsMapLayer
from distutils.dir_util import copy_tree
from random import randrange as rand
import webbrowser
import tempfile
import time
from osgeo import ogr
from qgis.utils import iface


class ImpresionSigmena:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ZoomSigmena_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = ImpresionSigmenaDialog()
        # Set Layer Name line edit disabled at the start
        #self.dlg.txtLayoutName.setEnabled(False)
        
        # Run the function to load templates into the dialog listWidget (probably not needed, it's called later)
        # self.loadTemplates()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Sigmena')
        # TODO: We are going to let the user set this up in a future iteration
        #self.toolbar = self.iface.addToolBar(u'Sigmena')
        #self.toolbar.setObjectName(u'Impresion Sigmena')
        
        # Connect signals from the dialog to functions in this file
        #self.dlg.listWidget.itemClicked.connect(self.suggestLayoutName)
        
        
        # Context menu when right click in layout list
        #self.dlg.listWidget.setContextMenuPolicy(Qt.CustomContextMenu)
        #self.dlg.listWidget.customContextMenuRequested.connect(self.listMenu)

        self.dlg.radioButtonHorizontal.toggled.connect(self.horizontal)
        self.dlg.radioButtonVertical.toggled.connect(self.vertical)

        #self.dlg.checkBox5.toggled.connect(self.pinchoenzona5)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ImpresionSigmena', message)    

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        
    

        
        #cambio el icon path para mi equipo.
        usuario=QgsApplication.qgisSettingsDirPath()
        icon_path=os.path.join(usuario,r"python\plugins\impresion_sigmena\icon.png")
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)
            #self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)
        return action
    
    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/impresionsigmena/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'ImpresionSigmena'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Sigmena'),
                action)
            self.iface.removeToolBarIcon(action)
    #configuro el sentido del papel, lo que puede llevar a un grupo de plantillas   
    def horizontal(self):
        global sentido
        if self.dlg.radioButtonHorizontal.isChecked()==True:
            sentido="h"
            print(sentido)
    def vertical(self):
        global sentido
        if self.dlg.radioButtonVertical.isChecked()==True:
            sentido="v"
            print(sentido)

    """         
    # Load print layout templates from profile template folder to listWidget in plugin dialogue
    def loadTemplates(self):
    	  self.dlg.listWidget.clear()
    	  profile_dir = QgsApplication.qgisSettingsDirPath()
    	  templates_dir = os.path.join(profile_dir,'composer_templates')
    	  
    	  # Does the composer_templates folder exist? Otherwise create it.
    	  if os.path.isdir(templates_dir) == False:
    	      os.mkdir(templates_dir)
    	  
    	  # Search the templates folder and add files to templates list and sort it
    	  templates = [f.name for f in os.scandir(templates_dir) if f.is_file() ]
    	  templates.sort()
    	  
    	  # Get the project file name and if it exist the project title. Use for Title suggestion
    	  project_file_name = QFileInfo(QgsProject.instance().fileName()).baseName()
    	  project_title = QgsProject.instance().title()
    	  if project_title == '':
    	  	  project_title = project_file_name
    	  self.dlg.txtMapTitle.setText(project_title)
    	  
    	  # Add all the templates from the list to the listWidget (only add files with *.qpt extension)
    	  for template in templates:
    	  	  filename, extension = os.path.splitext(template) 
    	  	  if extension == '.qpt':
    	  	  	  self.dlg.listWidget.addItem(filename)
    	  	  
    # List of templates context menu. This is how templates can be deleted
    def listMenu(self, position):
    	  self.dlg.txtLayoutName.setEnabled(False)
    	  indexes = self.dlg.listWidget.selectedIndexes()
    	  if indexes:
    	     menu = QMenu()
    	     menu.addAction(self.tr('Delete Template File'))
    	     # menu.addAction(self.tr('Future context menu option'))
         
    	     menu_choice = menu.exec_(self.dlg.listWidget.viewport().mapToGlobal(position))

    	     try:
    	     	  if menu_choice.text() == self.tr('Delete Template File'):
    	  	       template_name = self.dlg.listWidget.selectedItems()[0].text()
    	  	       template_path = os.path.join(QgsApplication.qgisSettingsDirPath(),'composer_templates',template_name + '.qpt')
    	  	       if os.path.exists(template_path):
    	  	  	       os.remove(template_path)
    	  	  	       self.loadTemplates()
    	  	  	       self.dlg.txtLayoutName.setText('{} - Deleted'.format(template_name))
    	  	  	  
    	  	  	  # if menu_choice.text() == 'Future context menu option':
    	  	  	  	  # do something
    	  	  	  	  
    	     except:
    	     	  pass
    	  
  	  
    
    	  
    	  
    # Use selected item from listWidget and any Map Title text to suggest new layout name (triggers on listWidget itemClicked signal)
    def suggestLayoutName(self):
    	  self.dlg.txtLayoutName.setEnabled(True)
    	  layout_name_string = self.dlg.listWidget.currentItem().text()
    	  if self.dlg.txtMapTitle != '':
    	  	  layout_name_string += ' ' + self.dlg.txtMapTitle.text()
    	  self.dlg.txtLayoutName.setText(layout_name_string)
    	     


    

    # Python function that do the main work of setting up the print layout
    # The code in the function can work stand alone if you use the commented variables and edit their values
    def layoutLoader(self, template_source, layout_name, title_text):
        
        from qgis.core import (QgsProject,
                       QgsPrintLayout,
                       QgsReadWriteContext)
        from qgis.utils import iface
        from PyQt5.QtXml import QDomDocument

        #template_source = '/home/user/Document/Template.qpt'
        #layout_name = 'NewLayout'
        #title_text = 'New Title'
        
        # Create objects lm = layout manager, l = print layout
        lm = QgsProject.instance().layoutManager()
        l = QgsPrintLayout(QgsProject.instance())
        l.initializeDefaults()
        
        # Load template file and load it into the layout (l)
        template_file = open(template_source, 'r+', encoding='utf-8')
        template_content = template_file.read()
        template_file.close()
        document = QDomDocument()
        document.setContent(template_content)
        context = QgsReadWriteContext()
        l.loadFromTemplate(document, context)
        
        # Give the layout a name (must be unique)
        l.setName(layout_name)
        
        # Get current canvas extent and apply that to all maps (items) in layout
        # Replace any text "{{title}}" in any layout label with the dialog Title text
        canvas = iface.mapCanvas()
        for item in l.items():
            if item.type()==65639: # Map
                item.zoomToExtent(canvas.extent())
            if item.type()==65641: # Label
                item.setText(item.text().replace('{{title}}',title_text))
        
        # Add layout to layout manager
        l.refresh()
        lm.addLayout(l)
        
        # Open and show the layout in designer
        try:
           iface.openLayoutDesigner(l)
        except:
           oopsBox = QMessageBox()
           oopsBox.setIcon(QMessageBox.Warning)
           oopsBox.setText(self.tr('Ooops. Something went wrong. Trying to open the generated layout ({}) returned errors.'.format(l.name())))
           oopsBox.setWindowTitle(self.tr('Layout Loader'))
           oopsBox.exec_()
           
    # Does a layout already exist
    def layout_exists(self, layout_name):
    	  lm = QgsProject.instance().layoutManager()
    	  layouts = []
    	  for l in lm.layouts():
    	  	  layouts.append(l.name())
    	  if layout_name in layouts:
    	     return sum(layout_name in s for s in layouts)
    	  else:
    	     return 0"""


    def run(self):
        """Run method that performs all the real work"""
        # This loads the dialog with templates (again) TODO check when it's best to do this
        #self.loadTemplates()
        escalas=["5000","10000","15000","20000","25000","30000","40000",'50000']
        self.dlg.escalasComboBox.clear() 
        for element in escalas:
            self.dlg.escalasComboBox.addItem( element)
        self.dlg.escalasComboBox.setCurrentIndex(2)
        
        
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        #lista de capas imprescindibles
        mup=r'O:/sigmena/carto/PROPIEDA/MONTES/PERTENEN/Mup_etrs89.shp'
        consorcios=r"O:/sigmena/carto/PROPIEDA/MONTES/CONTRATO/Consorcios_etrs89.shp"
        cortafuegos=r'O:/sigmena/carto/INCENDIO/CORTAFUE/CORTAFUEGOS_etrs89.shp'
        pistas=r'O:/sigmena/carto/VIAS/FORESTAL/Pistas_etrs89.shp'
        puntosdeagua=r'O:/sigmena/carto/INCENDIO/INFRAEST/42_Puntos_agua_etrs89.shp'
        rios=r'O:/sigmena/carto/M_FISICO/HIDROGRA/42_HIDROL_E10_etrs89.shp'
        cascosurbanos=r'O:/sigmena/carto/DIV_ADMI/GENERAL/42_cascos_ine_etrs89_.shp'
        carreteras=r'O:/sigmena/carto/VIAS/GENERAL/42_tn_carr_cyl_red_vias.shp'
        vegetacion=r'O:/sigmena/carto/VEGETACI/MFE/MFE25/42_mfe_CastillayLeon.shp'
        ortofoto=r'R:/SIGMENA/CARTO/RASTER/ORTOFOTO/pnoa/ETRS89/2017/oi_cyl_2017_so_35_25830.ecw'
        e25=r'R:/SIGMENA/CARTO/RASTER/ESCANEOS/E25/IGN/Georreferenciado_ETRS89/MTN25SOETRS89_E25_provincia_completa/MTN25SORIA25830.ecw'
        e50=r'R:/SIGMENA/CARTO/RASTER/ESCANEOS/E50/IGN/Georreferenciado_ETRS89/MNT50soria25830.ecw'

        #geopackage
        ruta_geopackage=r'V:/SIGMENA/Incendios/Incendios.gpkg'
        asentamientos2='Asentamientos_2020_Vulner_IUF'
        cascos2='Cascos_INE_e50_etrs89'
        
        
        
        
        
        listaortofoto=[mup,cortafuegos,pistas,carreteras,puntosdeagua,rios,cascosurbanos,ortofoto]
        listaortofoto_geopackage=[asentamientos2,cascos2]
        listae25=[mup,cortafuegos,pistas,puntosdeagua,e25]
        listavegetacion=[mup,cortafuegos,pistas,carreteras,puntosdeagua,rios,cascosurbanos,vegetacion]

        
        # See if OK was pressed TODO: probably need something to happen when pressing "cancel" too.
        if result:

            print("le he dado a ok")
            indescala=self.dlg.escalasComboBox.currentIndex()
            escala=int(escalas[int(indescala)])
            print(escala)
            
            # get the users input
            #recogo la zona a sacar
            
            #titel = "titulo"#self.dlg.titelFld.text()
            #subTitel = self.dlg.subTitelFld.text()

            
            
            project = QgsProject.instance()
            l = QgsPrintLayout(project)
            l.initializeDefaults()
            l.setUnits(QgsUnitTypes.LayoutMillimeters)
            page = l.pageCollection().pages()[0]


            
        
            # paperSize = 'A3'
            ladolargo = 420
            ladocorto = 297
            #por defecto horizontal
            if self.dlg.radioButtonHorizontal.isChecked():
                width = ladolargo
                height = ladocorto
            if self.dlg.radioButtonVertical.isChecked():
                width = ladocorto
                height = ladolargo
           
            paperSize = [width, height]
            page.setPageSize(QgsLayoutSize(paperSize[0],paperSize[1]))
            
            # add gadgets
            # but first get margins and paper size right
            lm = 10         # left margin
            tm = 10         # upper margin
            bm = 40         # lower margin

            #no se para que hace esto que sigue
            refSize = paperSize[0]
            if paperSize[1] < refSize:
                refSize = paperSize[1]

            # add map
            x, y = lm, tm
            w, h = paperSize[0] -  2 * lm, paperSize[1] - bm
            print("ya he definido el tamaño de papel")
            print(paperSize[0] , paperSize[1])
            theMap = QgsLayoutItemMap(l)
            theMap.updateBoundingRect()
            theMap.setRect(QRectF(x, y, w, h)) 
            theMap.setPos(x,y)
            theMap.setFrameEnabled(True)
            #podria crear una funcion para cambiar la extension
            extendoriginal=self.iface.mapCanvas().extent()

            #meto los elementos que tengo que modificar despues, como la fecha, 
            #add date
            d = time.localtime()
            dString = "%d-%d-%d (%d:%d)" % (d[2],  d[1],  d[0],d[3],d[4])
            dateLabel = QgsLayoutItemLabel(l)
            dateLabel.setText(dString)
            dateLabel.adjustSizeToText()
            dateStringWidth = dateLabel.sizeForText().width()
            dateLabel.setPos(paperSize[0] - lm - dateStringWidth -5, (paperSize[1] - bm) + tm + 5)
            print(paperSize[0] - lm - dateStringWidth -5, (paperSize[1] - bm) + tm + 5)
            l.addItem(dateLabel)
             # add scalebar

            """scaleBar = QgsLayoutItemScaleBar(l)
            scaleBar.setLinkedMap(theMap)
            scaleBar.applyDefaultSettings()
            scaleBar.applyDefaultSize()
            # scaleBar.setStyle('Line Ticks Down') 
            scaleBar.setNumberOfSegmentsLeft(0)
            scaleBar.setNumberOfSegments (3)
            scaleBar.update()
            scaleBar.setPos(lm + 10, tm + (paperSize[1] - bm) + tm + 5 )
            l.addItem(scaleBar)"""
            escaleLabel= QgsLayoutItemLabel(l)
            escaleLabel.setText("Escala 1:" + str(escala))
            escaleLabel.adjustSizeToText()
            escaleStringWidth = escaleLabel.sizeForText().width()
            escaleLabel.setPos(paperSize[0] - lm - dateStringWidth -5, (paperSize[1] - bm) + tm + 10)#(paperSize[0] - lm - escaleStringWidth -5, (paperSize[1] - bm) + tm + 5)
            print((paperSize[0] - lm - escaleStringWidth -5, (paperSize[1] - bm) + tm + 10))
            l.addItem(escaleLabel)
            print(lm + 10, tm + (paperSize[1] - bm) + tm + 5 )


            #ojo_geopackage inicio      
            def add_gpkg_layer(gpkg, layer):
                layers = [l.GetName() for l in ogr.Open(gpkg)]
                if layer in layers:
                    iface.addVectorLayer(gpkg + "|layername=" + layer, layer, 'ogr')
                else: 
                    print('Error: there is no layer named "{}" in {}!'.format(layer, gpkg))

                    
            def add_layers_from_gpkg(gpkg, layers):
                for layer in layers:
                    add_gpkg_layer(gpkg, layer)
            #ojo_geopackage fin
                                            


            def moverextend(xx,yy):
                global newextend
                #print(extendoriginal)
                newextend=extendoriginal+QgsVector(xx,yy)
                #print(newextend)
                return newextend
            
            #podria crear una funcion desde aqui para meter las capas que interesa que se impriman.
            
            
            def configuraplanoproyecto():
                global newextend
                # project.mapLayers().values():
                """#BORRO LAS CAPAS QUE HAY EN EL PROYECTO
                capas =QgsProject.instance().mapLayers()
                for capa in capas:
                    QgsProject.instance().layerTreeRoot().findLayer(capa).setItemVisibilityChecked(False)"""
                theMap.setLayers(project.mapThemeCollection().masterVisibleLayers())   # remember ANNOTATION!
                theMap.setExtent(newextend)
                theMap.attemptSetSceneRect(QRectF(x, y, w, h))
                l.addItem(theMap)
                #pongo la escala
                print(escala)
                theMap.setScale(escala)
                print("he incluido el mapa")
                #METO LA LEYENDA
                print("EMPIEZO A METER LA LEYENDA")
                legend = QgsLayoutItemLegend(l)
                #legend.setTitle("Leyenda")
                
                legend.setLinkedMap(theMap) # pass a QgsLayoutItemMap object
                #incluye todos los visibles
                legend.setLegendFilterByMapEnabled(True)
                legend.setColumnCount(7)
                legend.setBackgroundColor(QColor("white"))
                # Set split to true to finish legend horizontal distribution
                legend.setSplitLayer(False)
                #todas las visibles de otra forma
                lyrs_to_add=[]
                tree = QgsProject.instance().layerTreeRoot()
                for node in tree.findLayers():
                    if node.layer().type() == QgsMapLayer.VectorLayer:
                        lyrs_to_add.append(node.layer())
                
                legend.setAutoUpdateModel(False)
                group = legend.model().rootGroup()
                group.clear()
                for la in lyrs_to_add:
                    subgroup = group.addGroup(la.name())
                    group.addLayer(la)
                        
                l.addItem(legend)
                
                legend.setStyleFont(QgsLegendStyle.Title, QFont("Arial", 7, QFont.StyleNormal))
                legend.setStyleFont(QgsLegendStyle.Subgroup, QFont("Arial", 7, QFont.StyleNormal))
                legend.setStyleFont(QgsLegendStyle.SymbolLabel, QFont("Arial", 7, QFont.StyleNormal))

                #legend.rstyle(QgsComposerLegendStyle.Symbol).setMargin(QgsComposerLegendStyle.Top, 0)


                legend.setSymbolHeight(2)
                
                legend.setBoxSpace(0)
                legend.adjustBoxSize()
                
                legend.attemptMove(QgsLayoutPoint(3, paperSize[1]/10-2.6, QgsUnitTypes.LayoutCentimeters))
                #legend.attemptResize(QgsLayoutSize(2.8, 2.2, QgsUnitTypes.LayoutCentimeters))
                legend.refresh()
                
                l.addLayoutItem(legend)
                print("ACABO DE METER LA LEYENDA")
            # add title
            #titleFont = QFont(self.textFont, int(font_scale * 14))
            #titleFont.setBold(True)

            #titelLabel = QgsLayoutItemLabel(l)
            #titelLabel.setText(titel)
            #titelLabel.setPos(lm,10)
            #titelLabel.setFont(titleFont)    
            #titelLabel.adjustSizeToText()
            #l.addItem(titelLabel)
            #print("he inlcuido el titulo")

            def configuraplanoorto():
                global newextend
                # project.mapLayers().values():
                #BORRO LAS CAPAS QUE HAY EN EL PROYECTO
                capas =QgsProject.instance().mapLayers()
                for capa in capas:
                    QgsProject.instance().layerTreeRoot().findLayer(capa).setItemVisibilityChecked(False)
                #cargo capas al proyecto
                
                rutaestilos=r'O:/sigmena/leyendas/qgis'
                rlorto = QgsRasterLayer(ortofoto, "Orto")
                rlorto.renderer().setOpacity(1.0)
                #rlayer.loadNamedStyle(os.path.join(rutaestilos,'pendiente_10_15.qml'))
                QgsProject.instance().addMapLayer(rlorto)
                vlmup=QgsVectorLayer(mup ,"M.U.P.","ogr")
                vlmup.loadNamedStyle(os.path.join(rutaestilos,'MUP.qml'))
                QgsProject.instance().addMapLayer(vlmup)
                vlconsorcio=QgsVectorLayer(consorcios,"Consorcios","ogr")
                vlconsorcio.loadNamedStyle(os.path.join(rutaestilos,'consorcios.qml'))
                QgsProject.instance().addMapLayer(vlconsorcio)
                vlcarreteras=QgsVectorLayer(carreteras,"Carreteras","ogr")
                vlcarreteras.loadNamedStyle(os.path.join(rutaestilos,'carreteras.qml'))
                QgsProject.instance().addMapLayer(vlcarreteras)
                vlcortafuegos=QgsVectorLayer(cortafuegos,"Cortafuegos","ogr")
                vlcortafuegos.loadNamedStyle(os.path.join(rutaestilos,'cortafuegos.qml'))
                QgsProject.instance().addMapLayer(vlcortafuegos)
                vlpistas=QgsVectorLayer(pistas,"Pistas","ogr")
                vlpistas.loadNamedStyle(os.path.join(rutaestilos,'pistas.qml'))
                QgsProject.instance().addMapLayer(vlpistas)
                vlpuntosdeagua=QgsVectorLayer(puntosdeagua,"Puntos de agua","ogr")
                vlpuntosdeagua.loadNamedStyle(os.path.join(rutaestilos,'ptos_agua.qml'))
                QgsProject.instance().addMapLayer(vlpuntosdeagua)
                vlrios=QgsVectorLayer(rios,"Rios","ogr")
                vlrios.loadNamedStyle(os.path.join(rutaestilos,'riose10.qml'))
                QgsProject.instance().addMapLayer(vlrios)
                vlcascosurbanos=QgsVectorLayer(cascosurbanos,"Cascos urbanos","ogr")
                vlcascosurbanos.loadNamedStyle(os.path.join(rutaestilos,'cascosurbanos.qml'))
                QgsProject.instance().addMapLayer(vlcascosurbanos)
                #ojo_geopackage inicio
                add_layers_from_gpkg(ruta_geopackage,listaortofoto_geopackage )
                #ojo_geopackage fin
                
                
        
                
                
                theMap.setLayers(project.mapThemeCollection().masterVisibleLayers())   # remember ANNOTATION!
                theMap.setExtent(newextend)
                theMap.attemptSetSceneRect(QRectF(x, y, w, h))
                l.addItem(theMap)
                #pongo la escala
                print(escala)
                theMap.setScale(escala)
                print("he incluido el mapa")

                #METO LA LEYENDA
                print("EMPIEZO A METER LA LEYENDA")
                legend = QgsLayoutItemLegend(l)
                #legend.setTitle("Leyenda")
                
                legend.setLinkedMap(theMap) # pass a QgsLayoutItemMap object
                #incluye todos los visibles
                legend.setLegendFilterByMapEnabled(True)
                legend.setColumnCount(7)
                legend.setBackgroundColor(QColor("white"))
                # Set split to true to finish legend horizontal distribution
                legend.setSplitLayer(False)
                #todas las visibles de otra forma
                lyrs_to_add=[]
                tree = QgsProject.instance().layerTreeRoot()
                for node in tree.findLayers():
                    if node.layer().type() == QgsMapLayer.VectorLayer:
                        lyrs_to_add.append(node.layer())
                lyrs_to_add2 = ["M.U.P.","Consorcios","Cortafuegos","Pistas","Puntos de agua","Rios","Cascos urbanos","Carreteras",asentamientos2]#ojo geopackage asentamientos2
                legend.setAutoUpdateModel(False)
                group = legend.model().rootGroup()
                group.clear()
                for la in lyrs_to_add:
                    if la.name() in lyrs_to_add2:
                        subgroup = group.addGroup(la.name())
                        group.addLayer(la)
                        
                l.addItem(legend)
                
                legend.setStyleFont(QgsLegendStyle.Title, QFont("Arial", 7, QFont.StyleNormal))
                legend.setStyleFont(QgsLegendStyle.Subgroup, QFont("Arial", 7, QFont.StyleNormal))
                legend.setStyleFont(QgsLegendStyle.SymbolLabel, QFont("Arial", 7, QFont.StyleNormal))

                #legend.rstyle(QgsComposerLegendStyle.Symbol).setMargin(QgsComposerLegendStyle.Top, 0)


                legend.setSymbolHeight(2)
                
                legend.setBoxSpace(0)
                legend.adjustBoxSize()
                
                legend.attemptMove(QgsLayoutPoint(3, paperSize[1]/10-2.6, QgsUnitTypes.LayoutCentimeters))
                #legend.attemptResize(QgsLayoutSize(2.8, 2.2, QgsUnitTypes.LayoutCentimeters))
                legend.refresh()
                
                l.addLayoutItem(legend)
                print("ACABO DE METER LA LEYENDA")

            def configuraplanoe25():
                global newextend
                # project.mapLayers().values():
                #BORRO LAS CAPAS QUE HAY EN EL PROYECTO
                capas =QgsProject.instance().mapLayers()
                for capa in capas:
                    QgsProject.instance().layerTreeRoot().findLayer(capa).setItemVisibilityChecked(False)
                #cargo capas al proyecto
                
                rutaestilos=r'O:/sigmena/leyendas/qgis'
                if escala<31000:
                    rle25 = QgsRasterLayer(e25, "E25")
                    rle25.renderer().setOpacity(1.0)
                else:
                    rle25 = QgsRasterLayer(e50, "E50")
                    rle25.renderer().setOpacity(1.0)
                #rlayer.loadNamedStyle(os.path.join(rutaestilos,'pendiente_10_15.qml'))
                QgsProject.instance().addMapLayer(rle25)
                vlmup=QgsVectorLayer(mup ,"M.U.P.","ogr")
                vlmup.loadNamedStyle(os.path.join(rutaestilos,'MUP.qml'))
                QgsProject.instance().addMapLayer(vlmup)
                vlconsorcio=QgsVectorLayer(consorcios,"Consorcios","ogr")
                vlconsorcio.loadNamedStyle(os.path.join(rutaestilos,'consorcios.qml'))
                QgsProject.instance().addMapLayer(vlconsorcio)
                vlcortafuegos=QgsVectorLayer(cortafuegos,"Cortafuegos","ogr")
                vlcortafuegos.loadNamedStyle(os.path.join(rutaestilos,'cortafuegos.qml'))
                QgsProject.instance().addMapLayer(vlcortafuegos)
                vlpistas=QgsVectorLayer(pistas,"Pistas","ogr")
                vlpistas.loadNamedStyle(os.path.join(rutaestilos,'pistas.qml'))
                QgsProject.instance().addMapLayer(vlpistas)
                vlpuntosdeagua=QgsVectorLayer(puntosdeagua,"Puntos de agua","ogr")
                vlpuntosdeagua.loadNamedStyle(os.path.join(rutaestilos,'ptos_agua.qml'))
                QgsProject.instance().addMapLayer(vlpuntosdeagua)
                
        
                
                
                theMap.setLayers(project.mapThemeCollection().masterVisibleLayers())   # remember ANNOTATION!
                theMap.setExtent(newextend)
                theMap.attemptSetSceneRect(QRectF(x, y, w, h))
                l.addItem(theMap)
                #pongo la escala
                print(escala)
                theMap.setScale(escala)
                print("he incluido el mapa")

                #METO LA LEYENDA
                legend = QgsLayoutItemLegend(l)
                #legend.setTitle("Leyenda")
                
                legend.setLinkedMap(theMap) # pass a QgsLayoutItemMap object
                #incluye todos los visibles
                legend.setLegendFilterByMapEnabled(True)
                legend.setColumnCount(7)
                legend.setBackgroundColor(QColor("white"))
                # Set split to true to finish legend horizontal distribution
                legend.setSplitLayer(False)
                #todas las visibles de otra forma
                lyrs_to_add=[]
                tree = QgsProject.instance().layerTreeRoot()
                for node in tree.findLayers():
                    if node.layer().type() == QgsMapLayer.VectorLayer:
                        lyrs_to_add.append(node.layer())
                lyrs_to_add2 = ["M.U.P.","Consorcios","Cortafuegos","Pistas","Puntos de agua","Rios","Cascos urbanos","Carreteras"]
                legend.setAutoUpdateModel(False)
                group = legend.model().rootGroup()
                group.clear()
                for la in lyrs_to_add:
                    if la.name() in lyrs_to_add2:
                        subgroup = group.addGroup(la.name())
                        group.addLayer(la)
                        
                l.addItem(legend)
                
                legend.setStyleFont(QgsLegendStyle.Title, QFont("Arial", 7, QFont.StyleNormal))
                legend.setStyleFont(QgsLegendStyle.Subgroup, QFont("Arial", 7, QFont.StyleNormal))
                legend.setStyleFont(QgsLegendStyle.SymbolLabel, QFont("Arial", 7, QFont.StyleNormal))

                #legend.rstyle(QgsComposerLegendStyle.Symbol).setMargin(QgsComposerLegendStyle.Top, 0)


                legend.setSymbolHeight(2)
                
                legend.setBoxSpace(0)
                legend.adjustBoxSize()
                
                legend.attemptMove(QgsLayoutPoint(3, paperSize[1]/10-2.6, QgsUnitTypes.LayoutCentimeters))
                #legend.attemptResize(QgsLayoutSize(2.8, 2.2, QgsUnitTypes.LayoutCentimeters))
                legend.refresh()
                
                l.addLayoutItem(legend)

            def configuraplanoortoe25():
                global newextend
                # project.mapLayers().values():
                #BORRO LAS CAPAS QUE HAY EN EL PROYECTO
                capas =QgsProject.instance().mapLayers()
                for capa in capas:
                    QgsProject.instance().layerTreeRoot().findLayer(capa).setItemVisibilityChecked(False)
                #cargo capas al proyecto
                
                rutaestilos=r'O:/sigmena/leyendas/qgis'
                if escala<31000:
                    rle25 = QgsRasterLayer(e25, "E25")
                    rle25.renderer().setOpacity(1.0)
                else:
                    rle25 = QgsRasterLayer(e50, "E50")
                    rle25.renderer().setOpacity(1.0)
                QgsProject.instance().addMapLayer(rle25)
                rlorto = QgsRasterLayer(ortofoto, "Orto")
                rlorto.renderer().setOpacity(0.65)
                QgsProject.instance().addMapLayer(rlorto)
                vlmup=QgsVectorLayer(mup ,"M.U.P.","ogr")
                vlmup.loadNamedStyle(os.path.join(rutaestilos,'MUP.qml'))
                QgsProject.instance().addMapLayer(vlmup)
                vlconsorcio=QgsVectorLayer(consorcios,"Consorcios","ogr")
                vlconsorcio.loadNamedStyle(os.path.join(rutaestilos,'consorcios.qml'))
                QgsProject.instance().addMapLayer(vlconsorcio)
                vlcortafuegos=QgsVectorLayer(cortafuegos,"Cortafuegos","ogr")
                vlcortafuegos.loadNamedStyle(os.path.join(rutaestilos,'cortafuegos.qml'))
                QgsProject.instance().addMapLayer(vlcortafuegos)
                vlpistas=QgsVectorLayer(pistas,"Pistas","ogr")
                vlpistas.loadNamedStyle(os.path.join(rutaestilos,'pistas.qml'))
                QgsProject.instance().addMapLayer(vlpistas)
                vlpuntosdeagua=QgsVectorLayer(puntosdeagua,"Puntos de agua","ogr")
                vlpuntosdeagua.loadNamedStyle(os.path.join(rutaestilos,'ptos_agua.qml'))
                QgsProject.instance().addMapLayer(vlpuntosdeagua)
                
        
                
                
                theMap.setLayers(project.mapThemeCollection().masterVisibleLayers())   # remember ANNOTATION!
                theMap.setExtent(newextend)
                theMap.attemptSetSceneRect(QRectF(x, y, w, h))
                l.addItem(theMap)
                #pongo la escala
                print(escala)
                theMap.setScale(escala)
                print("he incluido el mapa")

                #METO LA LEYENDA
                legend = QgsLayoutItemLegend(l)
                #legend.setTitle("Leyenda")
                print("empiezo con la leyenda")
                legend.setLinkedMap(theMap) # pass a QgsLayoutItemMap object
                #incluye todos los visibles
                legend.setLegendFilterByMapEnabled(True)
                legend.setColumnCount(7)
                legend.setBackgroundColor(QColor("white"))
                print("sigo con la leyenda")
                # Set split to true to finish legend horizontal distribution
                legend.setSplitLayer(False)
                #todas las visibles de otra forma
                lyrs_to_add=[]
                tree = QgsProject.instance().layerTreeRoot()
                for node in tree.findLayers():
                    if node.layer().type() == QgsMapLayer.VectorLayer:
                        lyrs_to_add.append(node.layer())
                lyrs_to_add2 = ["M.U.P.","Consorcios","Cortafuegos","Pistas","Puntos de agua","Rios","Cascos urbanos","Carreteras"]
                legend.setAutoUpdateModel(False)
                group = legend.model().rootGroup()
                group.clear()
                for la in lyrs_to_add:
                    if la.name() in lyrs_to_add2:
                        subgroup = group.addGroup(la.name())
                        group.addLayer(la)
                        
                l.addItem(legend)
                
                legend.setStyleFont(QgsLegendStyle.Title, QFont("Arial", 7, QFont.StyleNormal))
                legend.setStyleFont(QgsLegendStyle.Subgroup, QFont("Arial", 7, QFont.StyleNormal))
                legend.setStyleFont(QgsLegendStyle.SymbolLabel, QFont("Arial", 7, QFont.StyleNormal))

                #legend.rstyle(QgsComposerLegendStyle.Symbol).setMargin(QgsComposerLegendStyle.Top, 0)


                legend.setSymbolHeight(2)
                
                legend.setBoxSpace(0)
                legend.adjustBoxSize()
                print("acabo con la leyenda")
                legend.attemptMove(QgsLayoutPoint(3, paperSize[1]/10-2.6, QgsUnitTypes.LayoutCentimeters))
                #legend.attemptResize(QgsLayoutSize(2.8, 2.2, QgsUnitTypes.LayoutCentimeters))
                legend.refresh()
                
                l.addLayoutItem(legend)
            def configuraplanovetacion():
                global newextend
                # project.mapLayers().values():
                #BORRO LAS CAPAS QUE HAY EN EL PROYECTO
                capas =QgsProject.instance().mapLayers()
                for capa in capas:
                    QgsProject.instance().layerTreeRoot().findLayer(capa).setItemVisibilityChecked(False)
                #cargo capas al proyecto
                
                rutaestilos=r'O:/sigmena/leyendas/qgis'
                #rlorto = QgsRasterLayer(ortofoto, "Orto")
                #rlorto.renderer().setOpacity(1.0)
                #rlayer.loadNamedStyle(os.path.join(rutaestilos,'pendiente_10_15.qml'))
                #QgsProject.instance().addMapLayer(rlorto)
                vlvegetacion=QgsVectorLayer(vegetacion ,"MFE","ogr")
                vlvegetacion.loadNamedStyle(os.path.join(rutaestilos,'42_mfe_CastillayLeon.qml'))
                QgsProject.instance().addMapLayer(vlvegetacion)
                vlmup=QgsVectorLayer(mup ,"M.U.P.","ogr")
                vlmup.loadNamedStyle(os.path.join(rutaestilos,'MUP.qml'))
                QgsProject.instance().addMapLayer(vlmup)
                vlconsorcio=QgsVectorLayer(consorcios,"Consorcios","ogr")
                vlconsorcio.loadNamedStyle(os.path.join(rutaestilos,'consorcios.qml'))
                QgsProject.instance().addMapLayer(vlconsorcio)
                vlcarreteras=QgsVectorLayer(carreteras,"Carreteras","ogr")
                vlcarreteras.loadNamedStyle(os.path.join(rutaestilos,'carreteras.qml'))
                QgsProject.instance().addMapLayer(vlcarreteras)
                vlcortafuegos=QgsVectorLayer(cortafuegos,"Cortafuegos","ogr")
                vlcortafuegos.loadNamedStyle(os.path.join(rutaestilos,'cortafuegos.qml'))
                QgsProject.instance().addMapLayer(vlcortafuegos)
                vlpistas=QgsVectorLayer(pistas,"Pistas","ogr")
                vlpistas.loadNamedStyle(os.path.join(rutaestilos,'pistas.qml'))
                QgsProject.instance().addMapLayer(vlpistas)
                vlpuntosdeagua=QgsVectorLayer(puntosdeagua,"Puntos de agua","ogr")
                vlpuntosdeagua.loadNamedStyle(os.path.join(rutaestilos,'ptos_agua.qml'))
                QgsProject.instance().addMapLayer(vlpuntosdeagua)
                vlrios=QgsVectorLayer(rios,"Rios","ogr")
                vlrios.loadNamedStyle(os.path.join(rutaestilos,'riose10.qml'))
                QgsProject.instance().addMapLayer(vlrios)
                vlcascosurbanos=QgsVectorLayer(cascosurbanos,"Cascos urbanos","ogr")
                vlcascosurbanos.loadNamedStyle(os.path.join(rutaestilos,'cascosurbanos.qml'))
                QgsProject.instance().addMapLayer(vlcascosurbanos)
                
        
                
                
                theMap.setLayers(project.mapThemeCollection().masterVisibleLayers())   # remember ANNOTATION!
                theMap.setExtent(newextend)
                theMap.attemptSetSceneRect(QRectF(x, y, w, h))
                l.addItem(theMap)
                #pongo la escala
                print(escala)
                theMap.setScale(escala)
                print("he incluido el mapa")

                #METO LA LEYENDA
                legend = QgsLayoutItemLegend(l)
                #legend.setTitle("Leyenda")
                
                legend.setLinkedMap(theMap) # pass a QgsLayoutItemMap object
                #incluye todos los visibles
                legend.setLegendFilterByMapEnabled(True)
                legend.setColumnCount(7)
                legend.setBackgroundColor(QColor("white"))
                # Set split to true to finish legend horizontal distribution
                legend.setSplitLayer(False)
                #todas las visibles de otra forma
                lyrs_to_add=[]
                tree = QgsProject.instance().layerTreeRoot()
                for node in tree.findLayers():
                    if node.layer().type() == QgsMapLayer.VectorLayer:
                        lyrs_to_add.append(node.layer())
                lyrs_to_add2 = ['MFE',"M.U.P.","Consorcios","Cortafuegos","Pistas","Puntos de agua","Rios","Cascos urbanos","Carreteras"]
                legend.setAutoUpdateModel(False)
                group = legend.model().rootGroup()
                group.clear()
                for la in lyrs_to_add:
                    if la.name() in lyrs_to_add2:
                        subgroup = group.addGroup(la.name())
                        group.addLayer(la)
                        
                l.addItem(legend)
                
                legend.setStyleFont(QgsLegendStyle.Title, QFont("Arial", 7, QFont.StyleNormal))
                legend.setStyleFont(QgsLegendStyle.Subgroup, QFont("Arial", 7, QFont.StyleNormal))
                legend.setStyleFont(QgsLegendStyle.SymbolLabel, QFont("Arial", 7, QFont.StyleNormal))

                #legend.rstyle(QgsComposerLegendStyle.Symbol).setMargin(QgsComposerLegendStyle.Top, 0)


                legend.setSymbolHeight(2)
                
                legend.setBoxSpace(0)
                legend.adjustBoxSize()
                
                legend.attemptMove(QgsLayoutPoint(3, paperSize[1]/10-2.6, QgsUnitTypes.LayoutCentimeters))
                #legend.attemptResize(QgsLayoutSize(2.8, 2.2, QgsUnitTypes.LayoutCentimeters))
                legend.refresh()
                
                l.addLayoutItem(legend)
            """

            # add logo
            
            if self.logoImagePath:
                try:
                    logo = QgsLayoutItemPicture(l)
                    logo.setPicturePath(self.logoImagePath)
                    logo.attemptSetSceneRect(QRectF((paperSize[0] - paperSize[0] / 3), 0, refSize / 3, refSize / 3 * 756 / 2040 )) 
                    # logo.setFrameEnabled(True)
                    l.addItem(logo)
                except:
                    # failed to add the logo, show message and continue
                    self.iface.messageBar().pushMessage(
                        "Warning", self.tr(u"Failed adding logo ") + \
                        self.logoImagePath, 
                        Qgis.Warning)
            """
            
            def configuralodefuerayexporta(texto):
                """#add date
                for i in l.items():  
                    if isinstance(i, QgsLayoutItemLabel) and i.id() == "dateLabel":
                        print (i.id())
                        
                        i.setText(dString)
                        
"""

                #aqui habria que refrescar la barra de escala
                #scaleBar.update()
                #seria bueno anadir un grid
                grid_interval=escala/10
                theMap.grid().setEnabled(True)
                theMap.grid().setStyle(1)
                theMap.grid().setIntervalX(grid_interval)  
                theMap.grid().setIntervalY(grid_interval)  
                theMap.grid().setAnnotationEnabled(True) 
                #theMap.grid().setGridLineColor(Color(0,0,0)black)  
                theMap.grid().setGridLineWidth(0.5)
                theMap.grid().setAnnotationPrecision(0)  
                theMap.grid().setAnnotationFrameDistance(1)  
                #theMap.grid().setAnnotationFontColor(QColor(0, 0, 0)) 
                theMap.grid().setAnnotationDisplay(QgsLayoutItemMapGrid.HideAll, QgsLayoutItemMapGrid.Right)
                theMap.grid().setAnnotationDisplay(QgsLayoutItemMapGrid.HideAll, QgsLayoutItemMapGrid.Top)
                theMap.grid().setAnnotationPosition(QgsLayoutItemMapGrid.OutsideMapFrame, QgsLayoutItemMapGrid.Bottom)
                theMap.grid().setAnnotationDirection(QgsLayoutItemMapGrid.Horizontal, QgsLayoutItemMapGrid.Bottom)
                theMap.grid().setAnnotationPosition(QgsLayoutItemMapGrid.OutsideMapFrame, QgsLayoutItemMapGrid.Left)
                theMap.grid().setAnnotationDirection(QgsLayoutItemMapGrid.Vertical, QgsLayoutItemMapGrid.Left)
               
                #pongo que mapa es
                hojaLabel= QgsLayoutItemLabel(l)
                hojaLabel.setText(texto)
                #hojaLabel.setFrameEnabled(True)
                hojaLabel.setBackgroundColor(QColor("white"))
                hojaLabel.setBackgroundEnabled(True)

                
                
                hojaLabel.adjustSizeToText()
                hojaStringWidth = escaleLabel.sizeForText().width()
                hojaLabel.setPos(5, 5)#(paperSize[0] - lm - escaleStringWidth -5, (paperSize[1] - bm) + tm + 5)
                l.addItem(hojaLabel)
                
                # export pdf
                exporter =  QgsLayoutExporter(l)
                pdf_settings = exporter.PdfExportSettings()
                #ruta="c:/work/borrarpdfincendios.pdf"
                filePath = tempfile.mkdtemp()
                ruta=filePath+"ortofoto.pdf"
                exporter.exportToPdf(ruta, pdf_settings)
                webbrowser.open_new('file:'+ruta)
                
                
            moverx=w/1000*escala/1.2#solape
            movery=h/1000*escala/1.2#solape
            #proyecto
            
            if self.dlg.checkBox1.isChecked():
                moverextend(-moverx,movery)
                if self.dlg.checkBoxProyecto.isChecked():
                    configuraplanoproyecto()
                    configuralodefuerayexporta("NW")
                
            if self.dlg.checkBox2.isChecked():
                moverextend(0,movery)
                if self.dlg.checkBoxProyecto.isChecked():
                    configuraplanoproyecto()
                    configuralodefuerayexporta("  N  ")
              
            if self.dlg.checkBox3.isChecked():
                moverextend(moverx,movery)
                if self.dlg.checkBoxProyecto.isChecked():
                    configuraplanoproyecto()
                    configuralodefuerayexporta("NE")
                
            if self.dlg.checkBox4.isChecked():
                moverextend(-moverx,0)
                if self.dlg.checkBoxProyecto.isChecked():
                    configuraplanoproyecto()
                    configuralodefuerayexporta("  W  ")
        
            if self.dlg.checkBox5.isChecked():
                moverextend(0,0)
                if self.dlg.checkBoxProyecto.isChecked():
                    configuraplanoproyecto()
                    configuralodefuerayexporta("      ")

            if self.dlg.checkBox6.isChecked():
                moverextend(moverx,0)
                if self.dlg.checkBoxProyecto.isChecked():
                    configuraplanoproyecto()
                    configuralodefuerayexporta("  E  ")
                
            if self.dlg.checkBox7.isChecked():
                moverextend(-moverx,-movery)
                if self.dlg.checkBoxProyecto.isChecked():
                    configuraplanoproyecto()
                    configuralodefuerayexporta("SW")

            if self.dlg.checkBox8.isChecked():
                moverextend(0,-movery)
                if self.dlg.checkBoxProyecto.isChecked():
                    configuraplanoproyecto()
                    configuralodefuerayexporta("  S  ")
                

            if self.dlg.checkBox9.isChecked():
                moverextend(moverx,-movery)
                if self.dlg.checkBoxProyecto.isChecked():
                    configuraplanoproyecto()
                    configuralodefuerayexporta("SE")

            #orto
            if self.dlg.checkBox1.isChecked():
                moverextend(-moverx,movery)
                if self.dlg.checkBoxOrtofoto.isChecked():
                    configuraplanoorto()
                    configuralodefuerayexporta("NW")
            if self.dlg.checkBox2.isChecked():
                moverextend(0,movery)

                if self.dlg.checkBoxOrtofoto.isChecked():
                    configuraplanoorto()
                    configuralodefuerayexporta("  N  ")
            if self.dlg.checkBox3.isChecked():
                moverextend(moverx,movery)

                if self.dlg.checkBoxOrtofoto.isChecked():
                    configuraplanoorto()
                    configuralodefuerayexporta("NE")
            if self.dlg.checkBox4.isChecked():
                moverextend(-moverx,0)

                if self.dlg.checkBoxOrtofoto.isChecked():
                    configuraplanoorto()
                    configuralodefuerayexporta("  W  ")
            if self.dlg.checkBox5.isChecked():
                moverextend(0,0)

                if self.dlg.checkBoxOrtofoto.isChecked():
                    configuraplanoorto()
                    configuralodefuerayexporta("      ")
            if self.dlg.checkBox6.isChecked():
                moverextend(moverx,0)

                if self.dlg.checkBoxOrtofoto.isChecked():
                    configuraplanoorto()
                    configuralodefuerayexporta("  E  ")
            if self.dlg.checkBox7.isChecked():
                moverextend(-moverx,-movery)

                if self.dlg.checkBoxOrtofoto.isChecked():
                    configuraplanoorto()
                    configuralodefuerayexporta("SW")
            if self.dlg.checkBox8.isChecked():
                moverextend(0,-movery)

                if self.dlg.checkBoxOrtofoto.isChecked():
                    configuraplanoorto()
                    configuralodefuerayexporta("  S  ")
            if self.dlg.checkBox9.isChecked():
                moverextend(moverx,-movery)

                if self.dlg.checkBoxOrtofoto.isChecked():
                    configuraplanoorto()
                    configuralodefuerayexporta("SE")

            #e25
            if self.dlg.checkBox1.isChecked():
                moverextend(-moverx,movery)
                if self.dlg.checkBox_IGN.isChecked():
                    configuraplanoe25()
                    configuralodefuerayexporta("NW")
            if self.dlg.checkBox2.isChecked():
                moverextend(0,movery)

                if self.dlg.checkBox_IGN.isChecked():
                    configuraplanoe25()
                    configuralodefuerayexporta("  N  ")
            if self.dlg.checkBox3.isChecked():
                moverextend(moverx,movery)

                if self.dlg.checkBox_IGN.isChecked():
                    configuraplanoe25()
                    configuralodefuerayexporta("NE")
            if self.dlg.checkBox4.isChecked():
                moverextend(-moverx,0)

                if self.dlg.checkBox_IGN.isChecked():
                    configuraplanoe25()
                    configuralodefuerayexporta("  W  ")
            if self.dlg.checkBox5.isChecked():
                moverextend(0,0)

                if self.dlg.checkBox_IGN.isChecked():
                    configuraplanoe25()
                    configuralodefuerayexporta("       ")
            if self.dlg.checkBox6.isChecked():
                moverextend(moverx,0)

                if self.dlg.checkBox_IGN.isChecked():
                    configuraplanoe25()
                    configuralodefuerayexporta("  E  ")
            if self.dlg.checkBox7.isChecked():
                moverextend(-moverx,-movery)

                if self.dlg.checkBox_IGN.isChecked():
                    configuraplanoe25()
                    configuralodefuerayexporta("SW")
            if self.dlg.checkBox8.isChecked():
                moverextend(0,-movery)

                if self.dlg.checkBox_IGN.isChecked():
                    configuraplanoe25()
                    configuralodefuerayexporta("  S  ")
            if self.dlg.checkBox9.isChecked():
                moverextend(moverx,-movery)

                if self.dlg.checkBox_IGN.isChecked():
                    configuraplanoe25()
                    configuralodefuerayexporta("SE")            
            
            #orto y e25
            if self.dlg.checkBox1.isChecked():
                moverextend(-moverx,movery)
                if self.dlg.checkBoxOrtoign.isChecked():
                    configuraplanoortoe25()
                    configuralodefuerayexporta("NW")
            if self.dlg.checkBox2.isChecked():
                moverextend(0,movery)

                if self.dlg.checkBoxOrtoign.isChecked():
                    configuraplanoortoe25()
                    configuralodefuerayexporta("  N  ")
            if self.dlg.checkBox3.isChecked():
                moverextend(moverx,movery)

                if self.dlg.checkBoxOrtoign.isChecked():
                    configuraplanoortoe25()
                    configuralodefuerayexporta("NE")
            if self.dlg.checkBox4.isChecked():
                moverextend(-moverx,0)

                if self.dlg.checkBoxOrtoign.isChecked():
                    configuraplanoortoe25()
                    configuralodefuerayexporta("  W  ")
            if self.dlg.checkBox5.isChecked():
                moverextend(0,0)

                if self.dlg.checkBoxOrtoign.isChecked():
                    configuraplanoortoe25()
                    configuralodefuerayexporta("       ")
            if self.dlg.checkBox6.isChecked():
                moverextend(moverx,0)

                if self.dlg.checkBoxOrtoign.isChecked():
                    configuraplanoortoe25()
                    configuralodefuerayexporta("  E  ")
            if self.dlg.checkBox7.isChecked():
                moverextend(-moverx,-movery)

                if self.dlg.checkBoxOrtoign.isChecked():
                    configuraplanoortoe25()
                    configuralodefuerayexporta("SW")
            if self.dlg.checkBox8.isChecked():
                moverextend(0,-movery)

                if self.dlg.checkBoxOrtoign.isChecked():
                    configuraplanoortoe25()
                    configuralodefuerayexporta("  S  ")
            if self.dlg.checkBox9.isChecked():
                moverextend(moverx,-movery)

                if self.dlg.checkBoxOrtoign.isChecked():
                    configuraplanoortoe25()
                    configuralodefuerayexporta("SE")            
                            
            #vegetacion
            if self.dlg.checkBox1.isChecked():
                moverextend(-moverx,movery)
                if self.dlg.checkBoxMFE.isChecked():
                    configuraplanovetacion()
                    configuralodefuerayexporta("NW")
            if self.dlg.checkBox2.isChecked():
                moverextend(0,movery)

                if self.dlg.checkBoxMFE.isChecked():
                    configuraplanovetacion()
                    configuralodefuerayexporta("  N  ")
            if self.dlg.checkBox3.isChecked():
                moverextend(moverx,movery)

                if self.dlg.checkBoxMFE.isChecked():
                    configuraplanovetacion()
                    configuralodefuerayexporta("NE")
            if self.dlg.checkBox4.isChecked():
                moverextend(-moverx,0)

                if self.dlg.checkBoxMFE.isChecked():
                    configuraplanovetacion()
                    configuralodefuerayexporta("  W  ")
            if self.dlg.checkBox5.isChecked():
                moverextend(0,0)

                if self.dlg.checkBoxMFE.isChecked():
                    configuraplanovetacion()
                    configuralodefuerayexporta("       ")
            if self.dlg.checkBox6.isChecked():
                moverextend(moverx,0)

                if self.dlg.checkBoxMFE.isChecked():
                    configuraplanovetacion()
                    configuralodefuerayexporta("  E  ")
            if self.dlg.checkBox7.isChecked():
                moverextend(-moverx,-movery)

                if self.dlg.checkBoxMFE.isChecked():
                    configuraplanovetacion()
                    configuralodefuerayexporta("SW")
            if self.dlg.checkBox8.isChecked():
                moverextend(0,-movery)

                if self.dlg.checkBoxMFE.isChecked():
                    configuraplanovetacion()
                    configuralodefuerayexporta("  S  ")
            if self.dlg.checkBox9.isChecked():
                moverextend(moverx,-movery)

                if self.dlg.checkBoxMFE.isChecked():
                    configuraplanovetacion()
                    configuralodefuerayexporta("SE")            
                                 
                



   
