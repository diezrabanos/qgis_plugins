# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Sigpac
                                 A QGIS plugin
 esto es lo que hace Sigpac
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-03-29
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Javier Diez Rabanos
        email                : dierabfr@jcyl.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
#from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
#from PyQt5.QtGui import QIcon
#from PyQt5.QtWidgets import QAction

from qgis.PyQt.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QVariant,QFileInfo
from qgis.PyQt.QtGui import QIcon, QColor,QFont
from qgis.PyQt.QtWidgets import QAction, QFileDialog,QMessageBox
from PyQt5.QtWidgets import QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .sigpac_dialog import SigpacDialog
import os.path

#import para procesar
import qgis.core as qgisCore
from qgis.core import QgsProject, QgsVectorLayer,QgsField,QgsExpression,QgsExpressionContext,QgsExpressionContextScope,QgsVectorFileWriter, QgsMarkerSymbol,QgsRendererCategory,QgsCategorizedSymbolRenderer,QgsPointXY, QgsPoint,QgsFeature,QgsGeometry,QgsLineSymbol,QgsFillSymbol,QgsSingleSymbolRenderer,QgsPalLayerSettings,QgsTextFormat ,QgsVectorLayerSimpleLabeling
from qgis.utils import iface

from qgis.gui import QgsMessageBar

import processing
import os
import glob
import re
import sys
#from qgis import *

import math
import time
import random



class Sigpac:
    """QGIS Plugin Implementation."""
    def __init__(self, iface):
       
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Sigpac_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        self.dlg = SigpacDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Sigmena')
        
        self.toolbar = self.iface.addToolBar(u'Sigmena')             #creo que no hace nada
        self.toolbar.setObjectName(u'Sigmena')            #creo que no hace nada
        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.dlg.pushButton_select_path.clicked.connect(self.select_file) #OJO CON ESTO

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
       
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Sigpac', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        


        
        #cambio el icon path para mi equipo.
        icon_path=r"C:\Users\dierabfr\AppData\Roaming\QGIS\QGIS3\profiles\default\python\plugins\sigpac\icon.png"
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/sigpac/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Sigpac'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        
    def select_file(self):  #OJO CON ESTO TAMBIEN
        """seleciono la carpeta con los datos de entrada"""
        print("ok1")
        
        #self.dlg.carpetalaz.clear()
        carpeta = QFileDialog.getSaveFileName(self.dlg , "Nuevo archivo shp",None ,'SHP(*.shp)')
        print("ok2")
        self.dlg.ruta_archivo.setText(carpeta[0])
        print("ok3")
        archivo=carpeta[0]
        print("ok4")
        print(archivo)
    
    
        


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Sigmena'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar        #PUEDO PROBAR A BORRAR COSAS
        del self.menu
        del self.dlg




    

    


    def run(self):
        print ("paso por el run")


        canvas = self.iface.mapCanvas()
        #para evitar problemas con la codificacion de los shapes con los municipios y las tildes
        QSettings().setValue("/qgis/ignoreShapeEncoding", False)
        

            


        #selecciono la capa de las torretas
        
        layerlista = QgsVectorLayer(r'O:\sigmena\carto\SIGPAC\42_sigpac_municipios_etrs89.shp', 'Municipios Sigpac', 'ogr')
        time.sleep(1)
        #layer = iface.activeLayer()
        ## ojo comprobar que layer existe

        #genero una lista con las torres y ls coordenadas
        misdatos=[]
        feats = [ feat for feat in layerlista.getFeatures() ]
        for feature in feats:
            if feature.geometry().type() != 2: #0 es ptos, 1 lineas y 2 poligonos QGis.Point:
                iface.messageBar().pushMessage("Warning:", u"Debe selecionar una capa de poligonos", QgsMessageBar.WARNING, 10)
            lista=[]

            idTM =layerlista.dataProvider().fieldNameIndex('D_NOMBRE')
            idpro = layerlista.dataProvider().fieldNameIndex('C_PROVINCI')
            idmun=  layerlista.dataProvider().fieldNameIndex('C_MUNICIPI')
            
            lista=[feature.attributes()[idTM],feature.attributes()[idpro], feature.attributes()[idmun]]
            misdatos.append(lista)
        #print (misdatos)
 
        #trato de rellenar el desplegable con las torretas
        #self.dlg.cb1.clear()
       
        #ordeno por el primer elemento
        misdatos.sort(key=lambda x: x[0])
        #anado un elemneto enblanco en el desplegable
        #self.dlg.cbPRO.addItem( "")
        self.dlg.cbMUN.addItem("" )
        #self.dlg.cbPOL.addItem( "")
        #self.dlg.cbPAR.addItem( "") 
        for element in misdatos:
            #self.dlg.cbPRO.addItem( element[0])
            self.dlg.cbMUN.addItem( element[0])
            #self.dlg.cbPOL.addItem( element[0])
            #self.dlg.cbPAR.addItem( element[0]) 
        #count vertices if there is layer in project in order to show it when dialog is loaded
        #layer = self.dlg.cb1.itemData(self.cb1.currentIndex())"""

        
    




        
        

        




        
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            
            

        # show the dialog
        self.dlg.show()
        
        #self.dlg.pushButton_select_path.clicked.connect(self.select_laz_folder)

        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            archivo=self.dlg.ruta_archivo.text()
            print (archivo)
            
            archivo3=os.environ['TMP']+r"/"+str(random.random())+".shp"
            print (archivo3)
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            #print ("lo imprime si le doy a aceptar en el dialogo")
            
            #la carpeta la he cogido al pulsar el boton de la carpeta

             #meto aqui variables que luego deberan estar en la cajita   OJO
            torret1=self.dlg.cbMUN.currentIndex()
            """torret2=self.dlg.cbMUN.currentIndex()
            torret3=self.dlg.cbPOL.currentIndex()
            torret4=self.dlg.cbPAR.currentIndex()
            pro= self.dlg.PRO.text()##displayText()"""
            mun=self.dlg.MUN.text()##displayText()
            pol=self.dlg.POL.text()##displayText()
            par=self.dlg.PAR.text()##displayText()
            x=self.dlg.XX.text()##displayText()
            y=self.dlg.YY.text()##displayText()
            print("municipio para currar")
            print(mun)
            #si no hay nada en la casilla de municipio, coge la informacion del desplegable
            if mun == "":
                mun=str(misdatos[int(torret1)-1][2])
            print(mun) 
            print (x)
            print (y)


           
            rutaarchivomunicipiossigpac=r"O:\sigmena\carto\SIGPAC\42_sigpac_municipios_etrs89.shp"
            rutacarpetarecintos=r"O:\sigmena\carto\SIGPAC\Sigpac_2019\Recintos"
            QgsProject.instance().layerTreeRegistryBridge().setLayerInsertionPoint( QgsProject.instance().layerTreeRoot(), 0 )
            

            canvas.freeze(True)
            
            
            if x is not "" and y is not "" and par=="":
                #creo una capa temporal con las coordenadas
                # create layer
                vl2 = QgsVectorLayer("Point", "Punto", "memory")
                pr2 = vl2.dataProvider()
                #print ("ok creada la capa resultado final")
                vl2.startEditing()
                # add fields
                pr2.addAttributes([
                                QgsField("x",  QVariant.Int),
                                QgsField("y", QVariant.Double)])
                vl2.updateFields() 
                # tell the vector layer to fetch changes from the provider
                #print ("ok creados los campos")
                #$add a feature
                fet = QgsFeature()
                fet.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(int(x),int(y))))
                fet.setAttributes([ int(x),int( y)])
                pr2.addFeatures([fet])
                print("COoRDENADA")
                
                #print ("ok, creda la capa con el resultado final")
                #cambio la simbologia
                symbol = QgsMarkerSymbol.createSimple({'name': 'circle', 'color': 'red','size': '3',})
                vl2.renderer().setSymbol(symbol)

                # update layer's extent when new features have been added
                # because change of extent in provider is not propagated to the layer
                vl2.updateExtents()
                vl2.commitChanges()
                vl2.updateExtents()
                canvas = self.iface.mapCanvas()
                canvas.setExtent(vl2.extent())


                #QgsProject.instance().addMapLayer(vl)
                QgsProject.instance().addMapLayer(vl2)
                layerbase = QgsVectorLayer(rutaarchivomunicipiossigpac, mun, 'ogr')

                processing.run("native:selectbylocation", {'INPUT':layerbase,'PREDICATE':[0],'INTERSECT':vl2,'METHOD':0})
                sellectionado = layerbase.selectedFeatureIds()
                #QgsProject.instance().addMapLayers([layerbase])
                mun = str(layerbase.getFeature(sellectionado[0])["C_MUNICIPI"])
                #cuando se el municipio lo cargo y seleciono el punto de nuevo
                caparecintos=os.path.join(rutacarpetarecintos,"RECFE19_"+str(mun)+".shp")
                layer = QgsVectorLayer(caparecintos, str(mun), 'ogr')
                #seleciono de nuevo por la localizacion sobre esta capa del municipio
                processing.run("native:selectbylocation", {'INPUT':layer,'PREDICATE':[0],'INTERSECT':vl2,'METHOD':0})
                sellectionado2 = layer.selectedFeatureIds()

                #print seleciono por los datos metidos


                
                pol = str(layer.getFeature(sellectionado2[0])["C_POLIGONO"])
                par = str(layer.getFeature(sellectionado2[0])["C_PARCELA"])
                print(pol, par)

                #aqui estoy en el punto de partida como si hubiese metido municipio, poligono y parcela
                
                

            #if par is not "":
                
            print("carga el municipio en memoria")
            #print(mun)

            caparecintos=os.path.join(rutacarpetarecintos,"RECFE19_"+mun+".shp")
            layer = QgsVectorLayer(caparecintos, mun, 'ogr')
            #QgsProject.instance().addMapLayers([layer])

            #print seleciono por los datos metidos
            layer.selectByExpression("\"C_POLIGONO\" = '{}' ".format(pol)+" AND \"C_PARCELA\" = '{}'".format(par),QgsVectorLayer.SetSelection)
            #creo la nueva capa con la seleccion
            output_path=archivo3
            #ojo esto es lo que acabo de cambiar
            #QgsVectorFileWriter.writeAsVectorFormat(layer, output_path, "CP120", layer.crs(), "ESRI Shapefile", onlySelected=True)
            #lyr9=QgsVectorLayer(output_path,"Sigpac_"+str(mun)+"_"+str(pol)+"_"+str(par),"ogr")
            lyr9=processing.run('native:saveselectedfeatures', { "INPUT": layer, "OUTPUT": "memory:"+"Sigpac_"+str(mun)+"_"+str(pol)+"_"+str(par) })['OUTPUT']

            


            sym1 = QgsFillSymbol.createSimple({'style': 'vertical','color': '0,0,0,0', 'outline_color': 'red'})
            renderer=QgsSingleSymbolRenderer(sym1)
            #etiqueto
            layer_settings  = QgsPalLayerSettings()
            text_format = QgsTextFormat()
            text_format.setFont(QFont("Arial", 12))
            text_format.setSize(12)
            text_format.setColor(QColor("Red"))
            layer_settings.setFormat(text_format)


            #cuenta elementos
            elementos=len(list(lyr9.getFeatures()))
            if elementos==0:
                iface.messageBar().pushMessage("SIGPAC","En el municipio "+str(mun)+" poligono " +str(pol)+" no existe la parcela "+str(par), qgisCore.Qgis.Info,5)
                print ("no existe esa parcela en ese municipio")
                #QgsProject.instance().removeMapLayer(layer)
                #canvas.freeze(False)  
            if elementos==1 and archivo == "":
                print ("la parcela existe y tiene un solo recinto")
                layer_settings.fieldName = '''concat('Pol ',"C_POLIGONO",' Par ',"C_PARCELA")'''            
                layer_settings.isExpression = True
                layer_settings.enabled = True
                layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                lyr9.setLabelsEnabled(True)
                lyr9.setLabeling(layer_settings)
                lyr9.triggerRepaint()
                lyr9.setRenderer(renderer)
                QgsProject.instance().addMapLayer(lyr9)
                #QgsProject.instance().removeMapLayer(layer)
                #canvas.freeze(False)
                lyr9.updateExtents()
                lyr9.commitChanges()
                lyr9.updateExtents()
                canvas.setExtent(lyr9.extent())
            if elementos>1 and self.dlg.mycheckBox.isChecked() and archivo == "" :
                print ("voy a hacer un disolve")
                layer_settings.fieldName = '''concat('Pol ',"C_POLIGONO",' Par ',"C_PARCELA")'''
                #hacer un dissolve y llamar a la capa de salida igual
                #archivo2=os.environ['TMP']+r"/"+str(random.random())+".shp"
                #print(archivo2)
                #processing.run("native:dissolve",{ 'FIELD' : [], 'INPUT' : archivo3, 'OUTPUT' : archivo2 })
                lyr9=processing.run("native:dissolve",{ 'FIELD' : [], 'INPUT' : lyr9, 'OUTPUT' : "memory:"+"Sigpac_"+str(mun)+"_"+str(pol)+"_"+str(par) })['OUTPUT']
                print("ok")
                print(lyr9)
                layer_settings.isExpression = True
                layer_settings.enabled = True
                layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                #lyr9=QgsVectorLayer(archivo2,"Sigpac_"+str(mun)+"_"+str(pol)+"_"+str(par),"ogr")
                lyr9.setLabelsEnabled(True)
                lyr9.setLabeling(layer_settings)
                lyr9.triggerRepaint()
                lyr9.setRenderer(renderer)
                QgsProject.instance().addMapLayer(lyr9)
                #QgsProject.instance().removeMapLayer(layer)
                #canvas.freeze(False)
                lyr9.updateExtents()
                lyr9.commitChanges()
                lyr9.updateExtents()
                canvas.setExtent(lyr9.extent())

                        
                        
            if elementos>1 and self.dlg.mycheckBox.isChecked()==False and archivo == "":
                print("varios elementos no hago disolve, entonces los etiqueto incluyendo el recinto")
                layer_settings.fieldName = '''concat('Pol ',"C_POLIGONO",' Par ',"C_PARCELA",' Rec ',"C_RECINTO")'''
                layer_settings.isExpression = True
                layer_settings.enabled = True
                layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                lyr9.setLabelsEnabled(True)
                lyr9.setLabeling(layer_settings)
                lyr9.triggerRepaint()
                lyr9.setRenderer(renderer)
                QgsProject.instance().addMapLayer(lyr9)
                #QgsProject.instance().removeMapLayer(layer)
                #canvas.freeze(False)
                lyr9.updateExtents()
                lyr9.commitChanges()
                lyr9.updateExtents()
                canvas.setExtent(lyr9.extent())

            if elementos>1 and self.dlg.mycheckBox.isChecked()==False and archivo is not "":
                print(" varios elementos no hago disolve, entonces los etiqueto incluyendo el recinto")
                layer_settings.fieldName = '''concat('Pol ',"C_POLIGONO",' Par ',"C_PARCELA",' Rec ',"C_RECINTO")'''
                layer_settings.isExpression = True
                layer_settings.enabled = True
                layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                #lyr9.setLabelsEnabled(True)
                #lyr9.setLabeling(layer_settings)
                #lyr9.triggerRepaint()
                #lyr9.setRenderer(renderer)
                #QgsProject.instance().addMapLayer(lyr9)
                #QgsProject.instance().removeMapLayer(layer)
                #canvas.freeze(False)
                print ("crear la capa nueva")
                QgsVectorFileWriter.writeAsVectorFormat(lyr9, archivo, "CP120", lyr9.crs(), "ESRI Shapefile", onlySelected=False)
                #QgsProject.instance().removeMapLayer(lyr9)
                lyr8=QgsVectorLayer(archivo,"Sigpac_"+str(mun)+"_"+str(pol)+"_"+str(par),"ogr")
                #etiqueto
                """layer_settings  = QgsPalLayerSettings()
                text_format = QgsTextFormat()
                text_format.setFont(QFont("Arial", 12))
                text_format.setSize(12)
                text_format.setColor(QColor("Red"))
                layer_settings.setFormat(text_format)
                layer_settings.fieldName = '''concat('Pol ',"C_POLIGONO",' Par ',"C_PARCELA")'''
                layer_settings.isExpression = True"""
                #layer_settings.enabled = True
                #layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                lyr8.setLabelsEnabled(True)
                lyr8.setLabeling(layer_settings)
                lyr8.triggerRepaint()
                lyr8.setRenderer(renderer)
                QgsProject.instance().addMapLayer(lyr8)
                #QgsProject.instance().removeMapLayer(lyr9.id())
                #canvas.freeze(False)
                lyr8.updateExtents()
                lyr8.commitChanges()
                lyr8.updateExtents()
                canvas.setExtent(lyr8.extent())

            if elementos>1 and self.dlg.mycheckBox.isChecked() and archivo is not "":
                print ("voy a hacer un disolve")
                layer_settings.fieldName = '''concat('Pol ',"C_POLIGONO",' Par ',"C_PARCELA")'''
                #hacer un dissolve y llamar a la capa de salida igual
                #archivo2=os.environ['TMP']+r"/"+str(random.random())+".shp"
                #print(archivo2)
                lyr9=processing.run("native:dissolve",{ 'FIELD' : [], 'INPUT' : lyr9, 'OUTPUT' : "memory:"+"Sigpac_"+str(mun)+"_"+str(pol)+"_"+str(par)  })['OUTPUT']
                layer_settings.isExpression = True
                layer_settings.enabled = True
                layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                #lyr9=QgsVectorLayer(archivo2,"Sigpac_"+str(mun)+"_"+str(pol)+"_"+str(par),"ogr")
                #lyr9.setLabelsEnabled(True)
                #lyr9.setLabeling(layer_settings)
                #lyr9.triggerRepaint()
                #lyr9.setRenderer(renderer)
                print ("crear la capa nueva")
                QgsVectorFileWriter.writeAsVectorFormat(lyr9, archivo, "CP120", lyr9.crs(), "ESRI Shapefile", onlySelected=False)
                #QgsProject.instance().removeMapLayer(lyr9)
                lyr8=QgsVectorLayer(archivo,"Sigpac_"+str(mun)+"_"+str(pol)+"_"+str(par),"ogr")
                #etiqueto
                """layer_settings  = QgsPalLayerSettings()
                text_format = QgsTextFormat()
                text_format.setFont(QFont("Arial", 12))
                text_format.setSize(12)
                text_format.setColor(QColor("Red"))
                layer_settings.setFormat(text_format)
                layer_settings.fieldName = '''concat('Pol ',"C_POLIGONO",' Par ',"C_PARCELA")'''
                layer_settings.isExpression = True"""
                #layer_settings.enabled = True
                #layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                lyr8.setLabelsEnabled(True)
                lyr8.setLabeling(layer_settings)
                lyr8.triggerRepaint()
                lyr8.setRenderer(renderer)
                QgsProject.instance().addMapLayer(lyr8)
                #QgsProject.instance().removeMapLayer(lyr9.id())
                #canvas.freeze(False)
                lyr8.updateExtents()
                lyr8.commitChanges()
                lyr8.updateExtents()
                canvas.setExtent(lyr8.extent())
            if elementos==1 and archivo is not "":
                print ("la parcela existe y tiene un solo recinto")
                layer_settings.fieldName = '''concat('Pol ',"C_POLIGONO",' Par ',"C_PARCELA")'''            
                layer_settings.isExpression = True
                layer_settings.enabled = True
                layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                #lyr9.setLabelsEnabled(True)
                #lyr9.setLabeling(layer_settings)
                #lyr9.triggerRepaint()
                #lyr9.setRenderer(renderer)
                print ("crear la capa nueva")
                QgsVectorFileWriter.writeAsVectorFormat(lyr9, archivo, "CP120", lyr9.crs(), "ESRI Shapefile", onlySelected=False)
                #QgsProject.instance().removeMapLayer(lyr9)
                lyr8=QgsVectorLayer(archivo,"Sigpac_"+str(mun)+"_"+str(pol)+"_"+str(par),"ogr")
                #etiqueto
                """layer_settings  = QgsPalLayerSettings()
                text_format = QgsTextFormat()
                text_format.setFont(QFont("Arial", 12))
                text_format.setSize(12)
                text_format.setColor(QColor("Red"))
                layer_settings.setFormat(text_format)
                layer_settings.fieldName = '''concat('Pol ',"C_POLIGONO",' Par ',"C_PARCELA")'''
                layer_settings.isExpression = True"""
                #layer_settings.enabled = True
                #layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                lyr8.setLabelsEnabled(True)
                lyr8.setLabeling(layer_settings)
                lyr8.triggerRepaint()
                lyr8.setRenderer(renderer)
                QgsProject.instance().addMapLayer(lyr8)
                #QgsProject.instance().removeMapLayer(lyr9.id())
                #canvas.freeze(False)
                lyr8.updateExtents()
                lyr8.commitChanges()
                lyr8.updateExtents()
                canvas.setExtent(lyr8.extent())
                           


  
            canvas.freeze(False)
            """try:
                QgsVectorFileWriter.deleteShapeFile(archivo3)
            except:
                pass
            try:
                QgsVectorFileWriter.deleteShapeFile(archivo3)
            except:
                pass"""

            
            pass
