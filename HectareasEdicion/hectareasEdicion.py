# -*- coding: utf-8 -*-
"""
/***************************************************************************
zoomSigmena
                                 A QGIS plugin
Permite hacer zoom a una coordenada dada
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-03-29
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Javier Diez Rabanos
        email                : dierabfr@jcyl.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""


from qgis.PyQt.QtCore import QSettings, QTranslator, qVersion, QCoreApplication#,QFileInfo
from qgis.PyQt.QtGui import QIcon, QColor,QFont
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from PyQt5.QtWidgets import QMessageBox

# Initialize Qt resources from file resources.py
#from .resources import *
# Import the code for the dialog

import os.path

#import para procesar
import qgis.core as qgisCore

from qgis.core import QgsProject, QgsVectorLayer,QgsField,QgsExpression,QgsExpressionContext,QgsExpressionContextScope,QgsVectorFileWriter, QgsMarkerSymbol,QgsRendererCategory,QgsCategorizedSymbolRenderer,QgsPointXY, QgsPoint,QgsFeature,QgsGeometry,QgsLineSymbol,QgsExpressionContextUtils,QgsPalLayerSettings,QgsTextFormat,QgsVectorLayerSimpleLabeling,QgsExpressionContextUtils,QgsCoordinateTransform,QgsCoordinateReferenceSystem,QgsWkbTypes,QgsApplication,QgsFillSymbol,QgsSingleSymbolRenderer
from qgis.PyQt.QtCore import QVariant
from qgis.utils import iface


import processing
import os
import glob
import re
import sys







class HectareasEdicion:
    """QGIS Plugin Implementation."""
    def __init__(self, iface):
        """Constructor.
        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'HectareasEdicion_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)
        
       

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Sigmena')
        
        
        self.first_start = None

        
        

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('HectareasEdicion', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        
    

        
        #cambio el icon path para mi equipo.
        usuario=QgsApplication.qgisSettingsDirPath()
        icon_path=os.path.join(usuario,r"python\plugins\hectareasEdicion\icon.png")
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)
            

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/hectareasEdicion/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'HectareasEdicion'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        

    




    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(                self.tr(u'&Sigmena'),                action)
            self.iface.removeToolBarIcon(action)
    



    def run(self):
        #print ("paso por el run")
        vl = iface.activeLayer()
        if vl.wkbType() == QgsWkbTypes.Polygon or vl.wkbType() == QgsWkbTypes.MultiPolygon:
            vl.startEditing()

            fields = vl.fields()
            idx = fields.indexFromName('hectareas')
            
            if idx == -1:
                myField = QgsField( 'hectareas', QVariant.Double )
                vl.dataProvider().addAttributes([myField])
                vl.updateFields()
            

            for f in vl.getFeatures():
                f.setAttribute(f.fieldNameIndex('hectareas'), f.geometry().area()/10000 )
                #f[idx] = '"$area"*1000'
                vl.updateFeature( f )

            vl.commitChanges()
        #coloco el puntero arriba del todo
        #QgsProject.instance().layerTreeRegistryBridge().setLayerInsertionPoint( QgsProject.instance().layerTreeRoot(), 0 )
            
            #defino simbologia
            sym1 = QgsFillSymbol.createSimple({'style': 'vertical','color': '0,0,0,0', 'outline_color': 'red'})
            renderer=QgsSingleSymbolRenderer(sym1)
            #defino formato etiquetas
            layer_settings  = QgsPalLayerSettings()
            text_format = QgsTextFormat()
            text_format.setFont(QFont("Arial", 12))
            text_format.setSize(12)
            text_format.setColor(QColor("Red"))
            layer_settings.setFormat(text_format)

            # defino etiquetas
            layer_settings.fieldName = '''concat(format_number("hectareas",2),' ha.')'''            
            layer_settings.isExpression = True
            layer_settings.enabled = True
            layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
            vl.setLabelsEnabled(True)
            vl.setLabeling(layer_settings)
            vl.triggerRepaint()
            vl.setRenderer(renderer)
            #QgsProject.instance().addMapLayer(v1)
            #QgsProject.instance().removeMapLayer(layer)
            #canvas.freeze(False)
            vl.updateExtents()
            vl.commitChanges()
            vl.updateExtents()
            #canvas.setExtent(lyr9.extent())
            vl.startEditing()

   
     

        def feedback2():
            #print("cambio")
            #if vl.wkbType() == QgsWkbTypes.Polygon or vl.wkbType() == QgsWkbTypes.MultiPolygon:
            try:
                #print("1")
                #vl.startEditing()

                fields = vl.fields()
                idx = fields.indexFromName('hectareas')
                #print("2")
                if idx == -1:
                    myField = QgsField( 'hectareas', QVariant.Double )
                    vl.dataProvider().addAttributes([myField])
                    vl.updateFields()
                    #print("3")
                

                for f in vl.getFeatures():
                    f.setAttribute(f.fieldNameIndex('hectareas'), f.geometry().area()/10000 )
                    #f[idx] = '"$area"*1000'
                    vl.updateFeature( f )
                    #print("4")

                #vl.commitChanges()
                #coloco el puntero arriba del todo
                #QgsProject.instance().layerTreeRegistryBridge().setLayerInsertionPoint( QgsProject.instance().layerTreeRoot(), 0 )
                
                #defino simbologia
                sym1 = QgsFillSymbol.createSimple({'style': 'vertical','color': '0,0,0,0', 'outline_color': 'red'})
                renderer=QgsSingleSymbolRenderer(sym1)
                #defino formato etiquetas
                layer_settings  = QgsPalLayerSettings()
                text_format = QgsTextFormat()
                text_format.setFont(QFont("Arial", 12))
                text_format.setSize(12)
                text_format.setColor(QColor("Red"))
                layer_settings.setFormat(text_format)
                #print("5")

                # defino etiquetas
                layer_settings.fieldName = '''concat(format_number("hectareas",2),' ha.')'''            
                layer_settings.isExpression = True
                layer_settings.enabled = True
                layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                vl.setLabelsEnabled(True)
                vl.setLabeling(layer_settings)
                vl.triggerRepaint()
                vl.setRenderer(renderer)
                #print("6")
                #QgsProject.instance().addMapLayer(v1)
                #QgsProject.instance().removeMapLayer(layer)
                #canvas.freeze(False)
                #vl.updateExtents()
                #vl.commitChanges()
                #vl.updateExtents()
                #canvas.setExtent(lyr9.extent())
                #vl.startEditing()
            except:
                pass

        
        vl = iface.activeLayer()
        if vl.wkbType() == QgsWkbTypes.Polygon or vl.wkbType() == QgsWkbTypes.MultiPolygon:
            #print(vl.wkbType())
            vl.geometryChanged.connect(feedback2)
        
