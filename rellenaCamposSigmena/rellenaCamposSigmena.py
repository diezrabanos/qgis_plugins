# -*- coding: utf-8 -*-
"""
/***************************************************************************
rellenaCamposSigmena
                                 A QGIS plugin
Permite hacer zoom a una coordenada dada
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-03-29
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Javier Diez Rabanos
        email                : dierabfr@jcyl.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""


from qgis.PyQt.QtCore import QSettings, QTranslator, qVersion, QCoreApplication#,QFileInfo
from qgis.PyQt.QtGui import QIcon, QColor,QFont
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from PyQt5.QtWidgets import QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .rellenaCamposSigmena_dialog import RellenaCamposSigmenaDialog
import os.path

#import para procesar
import qgis.core as qgisCore
from qgis.core import QgsProject, QgsVectorLayer,QgsField,QgsExpression,QgsExpressionContext,QgsExpressionContextScope,QgsVectorFileWriter, QgsMarkerSymbol,QgsRendererCategory,QgsCategorizedSymbolRenderer,QgsPointXY, QgsPoint,QgsFeature,QgsGeometry,QgsLineSymbol,QgsExpressionContextUtils,QgsPalLayerSettings,QgsTextFormat,QgsVectorLayerSimpleLabeling,QgsExpressionContextUtils,QgsCoordinateTransform,QgsCoordinateReferenceSystem,QgsApplication
from qgis.PyQt.QtCore import QVariant
from qgis.utils import iface


import processing
import os
import glob
import re
import sys


import math
import time

import pyproj
import webbrowser




class RellenaCamposSigmena:
    """QGIS Plugin Implementation."""
    def __init__(self, iface):
        global almacen
        """Constructor.
        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'RellenaCamposSigmena_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)
        
        self.dlg = RellenaCamposSigmenaDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Sigmena')
        
        
        self.first_start = None
        #self.dlg.help_button.clicked.connect(self.help_pressed)
        #self.dlg.pushButton_limpiar.clicked.connect(self.limpiar_pressed)
        #self.dlg.checkBox_utm.toggled.connect(self.pinchado_utm)
        #self.dlg.checkBox_geo.toggled.connect(self.pinchado_geo)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('RellenaCamposSigmena', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        
    

        
        #cambio el icon path para mi equipo.
        usuario=QgsApplication.qgisSettingsDirPath()
        icon_path=os.path.join(usuario,r"python\plugins\rellenaCamposSigmena\icon.png")
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)
            #self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/rellenaCamposSigmena/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'RellenaCamposSigmena'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        

    
    def help_pressed(self):
        help_file = 'file:' + os.path.dirname(__file__) + '/Ayuda_RellenaCamposSigmena.pdf'
        webbrowser.open_new(help_file)
        
    def limpiar_pressed(self):
        self.dlg.XX.clear()
        self.dlg.YY.clear()

    
    def pinchado_columna(self):
        global almacen      
        #self.dlg.cbMUN.clear()
        #self.dlg.cbMUN.setCurrentIndex(0)
        print ("escribo la clumna en el almacen")
        column = self.dlg.cb1.currentIndex()
        print("colum")
        print(column)
        if column==0:
            columna=""
        else:
            vlayer=iface.activeLayer()
            misdatos=[]
            misdatos = [f.name() for f in vlayer.fields()]
            columna=misdatos[int(column)-1] 
        almacen[0]=columna

    def cuentaselecionados(self,vlayer):
        elementosseleccionados = len(vlayer.selectedFeatures())
        self.dlg.textselecionados.setText(str(elementosseleccionados))
        


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removeToolBarIcon(action)
            self.iface.removePluginMenu(
                self.tr(u'&Sigmena'),
                action)


    


    

    


    def run(self):
       
        global almacen
        #leo la cache
        rutacache=os.path.join(QgsApplication.qgisSettingsDirPath(),r"python\plugins\rellenaCamposSigmena\cache.txt")
        print(rutacache)
        if os.path.isfile(rutacache) ==True:
            print("encuentra el archivo")
            filecache = open(rutacache, "r")
            filecacheleido=filecache.readlines()
            print(filecacheleido)
            try:
                
                print("bien hasta aqui")
                almacen= filecacheleido[0].replace("[","").replace("]","").replace(" ","").split(',')
                print(almacen)
                columna=str(almacen[0])
                texto=str(almacen[1])
                print(columna)
                print(texto)
                
                
                #print(cache_escala)
                print (almacen)
                #miscomarcas=(filecacheleido[3].replace('\n','')).strip('][').split(',') #convierto una str en una list
                #mismunicipios=ast.literal_eval((filecacheleido[4].replace('\n','')).replace(" [[","[[").replace("]] ","]]"))#.split(',')) #convierto una str en una list
                filecache.close()
                
            except:
                print("esta no encuentra el file cache")
            self.dlg.cb1.activated.connect(self.pinchado_columna)
            self.dlg.mitext.setText(str(texto))
            #self.dlg.lineEdit_escala.setText(str(cache_escala))
            #self.dlg.checkBox_utm.setChecked(cache_utm)
            #self.dlg.checkBox_geo.setChecked(cache_geo)
        #coloco el puntero arriba del todo
        QgsProject.instance().layerTreeRegistryBridge().setLayerInsertionPoint( QgsProject.instance().layerTreeRoot(), 0 )
        vlayer=iface.activeLayer()
        if vlayer is None:
            iface.messageBar().pushMessage("ATENCION", "Selecciona la capa en la que quieres modificar la tabla", duration=10)
        else:
            vlayer.startEditing()
   
        #genero una lista con los sistemas de referencia
        misdatos=[]
        misdatos = [f.name() for f in vlayer.fields()]
        
        #trato de rellenar el desplegable con las columnas
        #anado un elemneto en blanco en el desplegable
        self.dlg.cb1.clear()
        self.dlg.cb1.addItem( "")
        for element in misdatos:
            self.dlg.cb1.addItem( element)
            #para poner el que habia en el almacen seleciconado
            if almacen[0] in misdatos:
                indice=misdatos.index(almacen[0])
                print("indice de columna dentro del run",indice)
                #pone la provincia en el combo que tienes en el txt.
                self.dlg.cb1.setCurrentIndex(indice+1)
            else:
                 self.dlg.cb1.setCurrentIndex(0)
        #vlayer.selectionChanged.connect(self.cuentaselecionados(vlayer))
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False

        
        # show the dialog
        self.dlg.show()
        
        

        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            
            
            column = self.dlg.cb1.currentIndex()
            print("colum")
            print(column)
            if column==0:
                iface.messageBar().pushMessage("ATENCION", "Tienes que seleccionar alguna columna.", duration=10)
            else:
                texto= self.dlg.mitext.text()
                columna=misdatos[int(column)-1]                
                print(columna)
                rutacache=os.path.join(QgsApplication.qgisSettingsDirPath(),r"python\plugins\rellenaCamposSigmena\cache.txt")
                #lo escribo en el txt, mavhacando lo que ya tenia
                f=open(rutacache,"w")
                escribir="["+str(columna)+","+str(texto)+"]"
                f.write(escribir)
                f.close()

                #parece que lo mejor sera la seleccion de una capa y dentro de ella de los elementos en ella seleccionados solo. Para ello habria que crear una capa temporal con solo los seleccioandos      
                #if vl2.wkbType()== 1 or vl2.wkbType()==1001:
                selection = vlayer.selectedFeatures()
                print(selection)
                elementosseleccionados=len(selection)
                print(elementosseleccionados)
                if elementosseleccionados ==0:
                    iface.messageBar().pushMessage("ATENCION", "Tienes que seleccionar algun elemento para editar.", duration=10)
                if elementosseleccionados >0:
                    print("seguimos")
                    for f in selection:
                        id=f.id()
                        #area=f.geometry().area()/10000
                        fieldindex = vlayer.dataProvider().fieldNameIndex(columna)
                        attr_value={fieldindex:texto}#fieldindex, antes era 2
                        vlayer.dataProvider().changeAttributeValues({id:attr_value})
                    vlayer.commitChanges()
            

                

                
               
                
