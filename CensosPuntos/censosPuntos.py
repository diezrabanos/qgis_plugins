# -*- coding: utf-8 -*-
"""
/***************************************************************************
censosPuntos
                                 A QGIS plugin
Permite comprobar la distancia de los puntos de censo
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-03-29
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Javier Diez Rabanos
        email                : dierabfr@jcyl.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""


from qgis.PyQt.QtCore import QSettings, QTranslator, qVersion, QCoreApplication#,QFileInfo
from qgis.PyQt.QtGui import QIcon, QColor,QFont,QStandardItemModel,QStandardItem
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from PyQt5.QtWidgets import QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .censosPuntos_dialog import CensosPuntosDialog
import os.path

#import para procesar
import qgis.core as qgisCore
from qgis.core import QgsProject, QgsVectorLayer,QgsField,QgsExpression,QgsExpressionContext,QgsExpressionContextScope,QgsVectorFileWriter, QgsMarkerSymbol,QgsRendererCategory,QgsCategorizedSymbolRenderer,QgsPointXY, QgsPoint,QgsFeature,QgsGeometry,QgsLineSymbol,QgsExpressionContextUtils,QgsPalLayerSettings,QgsTextFormat,QgsVectorLayerSimpleLabeling,QgsExpressionContextUtils,QgsCoordinateTransform,QgsCoordinateReferenceSystem,QgsApplication,QgsWkbTypes,QgsRuleBasedLabeling
from qgis.PyQt.QtCore import QVariant
from qgis.utils import iface


import processing
import os
import glob
import re
import sys


import math
import time

import pyproj
import webbrowser




class CensosPuntos:
    """QGIS Plugin Implementation."""
    def __init__(self, iface):
        """Constructor.
        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'CensosPuntos_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)
        
        self.dlg = CensosPuntosDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Sigmena')
        
        
        self.first_start = None
        #self.dlg.help_button.clicked.connect(self.help_pressed)
        self.dlg.mycomboBox.activated.connect(self.comboboxselecionado)
       

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('CensosPuntos', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        
    

        
        #cambio el icon path para mi equipo.
        usuario=QgsApplication.qgisSettingsDirPath()
        icon_path=os.path.join(usuario,r"python\plugins\censosPuntos\icon.png")
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)
            #self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/censosPuntos/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'CensosPuntos'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        

    
   



    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removeToolBarIcon(action)
            self.iface.removePluginMenu(
                self.tr(u'&Sigmena'),
                action)


    
    def comboboxselecionado(self):  
        #saco de  aqui variables que estan en las cajitas
        global index_campo_seleccionado
        index_campo_seleccionado=self.dlg.mycomboBox.currentIndex()

        #para rellenar el texto de los puntos que tenemos
        layer = iface.activeLayer()
        features = layer.getFeatures()
        #idx2 = layer.fields().indexFromName("name")
        idx2=index_campo_seleccionado
        todoslosnombres=[]
        todaslascuadriculas=[]
        for feature in features:
            print("feature")
            attrs = feature.attributes()
            # attrs is a list. It contains all the attribute values of this feature
            nombre=attrs[idx2]
            cuadric=nombre[:4]
            todoslosnombres.append(nombre)
            todaslascuadriculas.append(cuadric)

        frecuencia = []
        for w in todaslascuadriculas:
            frecuencia.append(todaslascuadriculas.count(w))


        print("Lista\n" + str(todaslascuadriculas) + "\n")
        print("Frecuencias\n" + str(frecuencia) + "\n")
        pares=list(zip(todaslascuadriculas, frecuencia))
        final=[]
        for elemento in pares:
            if elemento not in final:
                final.append(elemento)
        print(final)
        model = QStandardItemModel()
        self.dlg.mylistview.setModel(model)
        for i in final:
            item = QStandardItem(str(i))
            model.appendRow(item)
        
    
    

    


    def run(self):
       
       
        #coloco el puntero arriba del todo
        #QgsProject.instance().layerTreeRegistryBridge().setLayerInsertionPoint( QgsProject.instance().layerTreeRoot(), 0 )
        #genero una lista con los campos de la capa selecionada
        layer = iface.activeLayer()
        if layer is None:
            iface.messageBar().pushMessage("ATENCION", "Selecciona una capa de puntos", duration=10)
        if layer.wkbType()== 1 or layer.wkbType()==1001:
            prov = layer.dataProvider()
            field_names = [field.name() for field in prov.fields()]
            self.dlg.mycomboBox.clear() 
            for element in field_names:
                self.dlg.mycomboBox.addItem( element)
                
            """Run method that performs all the real work"""

            # Create the dialog with elements (after translation) and keep reference
            # Only create GUI ONCE in callback, so that it will only load when the plugin is started
            if self.first_start == True:
                self.first_start = False

           

            # show the dialog
            self.dlg.show()
            # Run the dialog event loop
            result = self.dlg.exec_()
            # See if OK was pressed
        
        
        

        
            if result:
                global index_campo_seleccionado
                distanciaminima=int(self.dlg.lineEdit_distancia.text())
                # "layer" is a QgsVectorLayer instance
                layer = iface.activeLayer()
                idx = layer.fields().indexFromName("distanc")
                if idx ==-1:
                    print("ya existe")
                    res = layer.dataProvider().addAttributes([QgsField("distanc", QVariant.String)])
                #layer.addAttribute(QgsField("valido", QVariant.String))
                layer.updateFields()
                features = layer.getFeatures()

                for feature in features:
                    # retrieve every feature with its geometry and attributes
                    #print("Feature ID: ", feature.id())
                    # fetch geometry
                    # show some information about the feature geometry
                    geom = feature.geometry()
                    geomSingleType = QgsWkbTypes.isSingleType(geom.wkbType())
                    if geom.type() == QgsWkbTypes.PointGeometry:
                        punto = geom.asPoint()
                        x=punto.x()
                        y=punto.y()
                        #print("analizo los puntos",x,y)
                        features2 = layer.getFeatures()
                        for feature2 in features2:
                            geom2 = feature2.geometry()
                            punto2=geom2.asPoint()
                            x3=punto2.x()
                            y3=punto2.y()
                            d=((x3-x)**2+(y3-y)**2)**0.5
                            if d<distanciaminima:
                                if feature2.id()==feature.id():
                                    pass
                                else:
                                    layer.startEditing()
                                    feature.setAttribute("distanc", 'no')
                                    print (feature2.id())
                                    layer.updateFeature(feature)
                                    #Call commit to save the changes
                                    layer.commitChanges()



                categorias=[]
                sym=QgsMarkerSymbol.createSimple({'name': 'circle', 'color': 'red','size': '3'})
                categoria=QgsRendererCategory("no",sym,"No cumple")
                categorias.append(categoria)
                sym=QgsMarkerSymbol.createSimple({'name': 'circle', 'color': 'blue','size': '2'})
                categoria=QgsRendererCategory("",sym,"Cumple")
                categorias.append(categoria)
                renderer=QgsCategorizedSymbolRenderer("distanc",categorias)
                layer.setRenderer(renderer)
                            # update layer's extent when new features have been added
                            # because change of extent in provider is not propagated to the layer

                #Configure label settings
                settings = QgsPalLayerSettings()
                settings.fieldName = field_names[index_campo_seleccionado]#'name'
                textFormat = QgsTextFormat()
                textFormat.setSize(10)
                settings.setFormat(textFormat)
                #create and append a new rule
                root = QgsRuleBasedLabeling.Rule(QgsPalLayerSettings())
                rule = QgsRuleBasedLabeling.Rule(settings)
                #rule.setDescription(fieldName)
                rule.setFilterExpression(''' "distanc" = 'no' ''')
                root.appendChild(rule)
                #Apply label configuration
                rules = QgsRuleBasedLabeling(root)
                layer.setLabeling(rules)
                layer.setLabelsEnabled(True)
                layer.triggerRepaint()



        else:
            iface.messageBar().pushMessage("ATENCION", "Selecciona una capa de puntos", duration=10)
        

