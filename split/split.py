# -*- coding: utf-8 -*-
"""
/***************************************************************************
split
                                 A QGIS plugin
Permite hacer zoom a una coordenada dada
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-03-29
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Javier Diez Rabanos
        email                : dierabfr@jcyl.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""


from qgis.PyQt.QtCore import QSettings, QTranslator, qVersion, QCoreApplication#,QFileInfo
from qgis.PyQt.QtGui import QIcon, QColor,QFont
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from PyQt5.QtWidgets import QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .split_dialog import SplitDialog
import os.path

#import para procesar
import qgis.core as qgisCore
from qgis.core import QgsProject, QgsVectorLayer,QgsField,QgsExpression,QgsExpressionContext,QgsExpressionContextScope,QgsVectorFileWriter, QgsMarkerSymbol,QgsRendererCategory,QgsCategorizedSymbolRenderer,QgsPointXY, QgsPoint,QgsFeature,QgsGeometry,QgsLineSymbol,QgsExpressionContextUtils,QgsPalLayerSettings,QgsTextFormat,QgsVectorLayerSimpleLabeling,QgsExpressionContextUtils,QgsCoordinateTransform,QgsCoordinateReferenceSystem,QgsApplication
from qgis.PyQt.QtCore import QVariant
from qgis.utils import iface


import processing
import os
import glob
import re
import sys


import math
import time

import pyproj
import webbrowser






class Split:
    """QGIS Plugin Implementation."""
    def __init__(self, iface):
        """Constructor.
        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Split_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)
        
        self.dlg = SplitDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Sigmena')
        
        
        self.first_start = None
        self.dlg.pushButton_ruta.clicked.connect(self.select_folder)

        #defino las variables de la clase
        self.ruta=""
        self.indicescolumnas=[]
        self.numerofilas=0
        self.carpeta=""
        

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Split', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        
    

        
        #cambio el icon path para mi equipo.
        usuario=QgsApplication.qgisSettingsDirPath()
        icon_path=os.path.join(usuario,r"python\plugins\split\icon.png")
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)
            #self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/split/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Split'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        
    
    

    def select_folder(self):
        """seleciono la carpeta con los datos de entrada"""

        #self.dlg.carpetalaz.clear()
        self.carpeta = QFileDialog.getExistingDirectory(self.dlg , "Selecciona carpeta")
        self.dlg.lineEdit_ruta.setText(self.carpeta)
        return self.carpeta
        print(self.carpeta)
        
    
        

        




    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Sigmena'),
                action)
            self.iface.removeToolBarIcon(action)


    


    

    


    def run(self):
        print("empezamos")
        layer = iface.activeLayer()
        #iface.showAttributeTable(layer)
        print (layer)
        
        fila1=[]
        for field in layer.fields():
            fila1.append(field.name())
            print(field.name())
        print(fila1)

        #relleno los combos
        self.dlg.comboBox_campos.clear()
        
        for element in fila1:
            self.dlg.comboBox_campos.addItem(element)
            
        #coloco el puntero arriba del todo
        QgsProject.instance().layerTreeRegistryBridge().setLayerInsertionPoint( QgsProject.instance().layerTreeRoot(), 0 )

        
       
        # show the dialog
        self.dlg.show()
        
        

        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        
        
        if result:
            prefijo=self.dlg.lineEdit_prefijo.text()
            index=self.dlg.comboBox_campos.currentIndex()
            print(index)
            micampo=fila1[index]

            
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            print("ok")
            valores=[]
            for feature in layer.getFeatures():
                if feature[index] not in valores:
                    valores.append(feature[index])
            print(valores)

            
            #voy selecionando
            for valor in valores:
                layer.selectByExpression("\"{}\"".format(micampo)+" = '{}' ".format(valor),QgsVectorLayer.SetSelection)

            

               
           
                
                print("\"{}\"".format(micampo)+" = '{}' ".format(valor))
                #selection = layer.selectedFeatures()
                
                output_path=self.carpeta+"/"+str(prefijo)+str(valor)+".shp"
                #creo la nueva capa con la seleccion
                QgsVectorFileWriter.writeAsVectorFormat(layer, output_path, "utf8", layer.crs(), "ESRI Shapefile", onlySelected=True) #para guardar los seleccionados como shape
                layer2=QgsVectorLayer(output_path,str(prefijo)+str(valor),"ogr") #para crear un shape si despues queremos guardarlo en el
                QgsProject.instance().addMapLayer(layer2)
            







