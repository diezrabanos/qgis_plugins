# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SilvilidarDialog
                                 A QGIS plugin
 esto es lo que hace silvilidar
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-01-29
        git sha              : $Format:%H$
        copyright            : (C) 2019 by javier diez
        email                : dierabfr@jcyl.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5 import uic
from PyQt5 import QtWidgets

# Cargar desde config.txt si existe
hm_ruta=r"\\repoarchivohm.jcyl.red\MADGMNSVPI_SCAYLEVueloLIDAR$\dasoLidar\PNOA2_2017-2021\metricasLidar\version_202505\1_AlturaDominanteLidar\Alt95_m_PNOA2.tif"
hbc_ruta=r"\\repoarchivohm.jcyl.red\MADGMNSVPI_SCAYLEVueloLIDAR$\dasoLidar\PNOA2_2017-2021\metricasLidar\version_202505\3_EstructuraDeCopas\Alt20_tlr_sobre2m_filtradoAlt95_4m_baseDeCopa_cm_PNOA2.tif"
fcc_ruta=r"\\repoarchivohm.jcyl.red\MADGMNSVPI_SCAYLEVueloLIDAR$\dasoLidar\PNOA2_2017-2021\metricasLidar\version_202505\8_OtrasMetricas\Cob200cm_prt_PNOA2.tif"
fccmatorral_ruta=r"\\repoarchivohm.jcyl.red\MADGMNSVPI_SCAYLEVueloLIDAR$\dasoLidar\PNOA2_2017-2021\metricasLidar\version_202505\6_CoberturaEstratosAbsolutos\CobEstr_0050_0150_tlr_PNOA2.tif"
if os.path.exists(os.path.join(os.path.dirname(__file__),"silvilidar_paths.txt")):
    with open(os.path.join(os.path.dirname(__file__),"silvilidar_paths.txt"), "r", encoding="utf-8") as f:
        for linea in f:
            if "=" in linea:
                clave, valor = linea.strip().split("=", 1)
                clave = clave.strip()
                valor = valor.strip().strip('"')
                # Asignar valores
                if clave == "hm_ruta":
                    hm_ruta = valor
                elif clave == "hbc_ruta":
                    hbc_ruta = valor
                elif clave == "fcc_ruta":
                    fcc_ruta = valor
                elif clave == "fccmatorral_ruta":
                    fccmatorral_ruta = valor

else:
    print(" no encuentro el archivo paths ")

def dentro_de_jcyl():
    """Comprueba si se esta dentro de la junta de castilla y leon, si se tiene acceso a un archivo"""
    if os.path.isfile(hm_ruta):
        return True
        #return False
    else:
        return False
        #return True

dentro = dentro_de_jcyl()
if dentro:
    # This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
    FORM_CLASS, _ = uic.loadUiType(os.path.join(
        os.path.dirname(__file__), 'silvilidar_dialog_base.ui'))
else:
    # This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
    FORM_CLASS, _ = uic.loadUiType(os.path.join(
        os.path.dirname(__file__), 'silvilidar_dialog_base2.ui'))


class SilvilidarDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(SilvilidarDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
