# -*- coding: utf-8 -*-
"""
/***************************************************************************
 gpsDescargaCarga
                                 A QGIS plugin
 Descarga o carga los navegadores GPS Garmin de la serie ETREX o XL12
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-03-29
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Javier Diez Rabanos
        email                : dierabfr@jcyl.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
#from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
#from PyQt5.QtGui import QIcon
#from PyQt5.QtWidgets import QAction

from qgis.PyQt.QtCore import QSettings, QTranslator, qVersion, QCoreApplication#,QFileInfo
from qgis.PyQt.QtGui import QIcon, QColor,QFont
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from PyQt5.QtWidgets import QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .gpsDescargaCarga_dialog import GpsDescargaCargaDialog
import os.path

#import para procesar
import qgis.core as qgisCore
from qgis.core import QgsProject, QgsVectorLayer,QgsField,QgsExpression,QgsExpressionContext,QgsExpressionContextScope,QgsVectorFileWriter, QgsMarkerSymbol,QgsRendererCategory,QgsCategorizedSymbolRenderer,QgsPointXY, QgsPoint,QgsFeature,QgsGeometry,QgsLineSymbol,QgsExpressionContextUtils,QgsPalLayerSettings,QgsTextFormat,QgsVectorLayerSimpleLabeling,QgsExpressionContextUtils,QgsCoordinateTransform,QgsCoordinateReferenceSystem, QgsApplication
from qgis.PyQt.QtCore import QVariant
from qgis.utils import iface
#from PyQt5.QtWidgets import QMessageBox
#from PyQt5.QtCore import QFileInfo
#from qgis.PyQt.QtCore import QFileInfo

import processing
import os
import glob
import re
import sys
#from qgis import *

import math
import time



class GpsDescargaCarga:
    """QGIS Plugin Implementation."""
    def __init__(self, iface):
        """Constructor.
        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ZoomSigmena_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        self.dlg = GpsDescargaCargaDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Sigmena')
        
        #self.toolbar = self.iface.addToolBar(u'Sigmena')             #creo que no hace nada
        #self.toolbar.setObjectName(u'Sigmena')            #creo que no hace nada
        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        #self.dlg.pushButton_select_path.clicked.connect(self.select_laz_folder)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GpsDescargaCarga', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        
    

        
        #cambio el icon path para mi equipo.
        usuario=QgsApplication.qgisSettingsDirPath()
        icon_path=os.path.join(usuario,r"python\plugins\gpsDescargaCarga\icon.png")
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)
            #self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/gpsDescargaCarga/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'gpsDescargaCarga'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        

    
    



    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Sigmena'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        #del self.toolbar        #PUEDO PROBAR A BORRAR COSAS
        #del self.menu
        #del self.dlg




    

    


    def run(self):
        print ("paso por el run")
       
        #coloco el puntero arriba del todo
        QgsProject.instance().layerTreeRegistryBridge().setLayerInsertionPoint( QgsProject.instance().layerTreeRoot(), 0 )
   
        
     
        
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            #self.dlg = SilvilidarDialog()
            #la siguiente linea inicia el boton de cargar carpetas, peta al cerrar el qgis, deberia poner algun close o algo
            #self.dlg.pushButton_select_path.clicked.connect(self.select_laz_folder)
            #print("inicio el boton en el gui")
            #self.dlg.pushButton_select_path.setEnabled(True)
            #print ("pone le boton como habiltado")
            

        # show the dialog
        self.dlg.show()
        
        #self.dlg.pushButton_select_path.clicked.connect(self.select_laz_folder)

        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:

            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            #print ("lo imprime si le doy a aceptar en el dialogo")
            
            #la carpeta la he cogido al pulsar el boton de la carpeta

             #saco de  aqui variables que estan en las cajitas
            #src_seleccionado=self.dlg.comboBox_src.currentIndex()
             
            # Get the coordinates and scale factor from the dialog
            nombre=self.dlg.nombrearchivo_entrada.text().replace(' ','_')##displayText()
           
            
            
            
            


            
            #todas las posibles opciones
            #names =["waypoint", "track", "route"]
            names=[]
            if self.dlg.checkBox_1.isChecked():
                names.append("waypoint")
            if self.dlg.checkBox_2.isChecked():    
                names.append("track")
            if self.dlg.checkBox_3.isChecked():
                names.append("route")
            dest_crs = QgsCoordinateReferenceSystem(25830)

            #aqui habra que comprobar que names tiene algo y si no mostrar un texto al usuario
            if len(names)>0:
                print (nombre)
            
                path = r'C:/sigmena/gps/'+nombre+'.gpx'
                usuario=QgsExpressionContextUtils.globalScope().variable('user_account_name')
                comando=os.path.join(r"C:\Users",usuario,r"AppData/Roaming/QGIS/QGIS3/profiles/default/python/plugins/gpsDescargaCarga/cmdbabel/descargagps.bat")
                #comando= "C:/Users/descargagps.bat"

                os.system(comando+" "+ path)


                
                
                for name in names:
                    #iface.addVectorLayer(ruta+"?type="+name, name, "gpx")
                    vectorLyr =QgsVectorLayer(path+"?type="+name, name, "gpx")
                    QgsVectorFileWriter.writeAsVectorFormat(vectorLyr,str(path[:-4])+"_"+name,"utf-8",dest_crs,"ESRI Shapefile")
                    iface.addVectorLayer(str(path[:-4])+"_"+name+".shp", str(nombre)+"_"+name, "ogr")
#empieza la carga
            if self.dlg.checkBox_4.isChecked():
                print("subir archivo")
                #lo mejor sera subir el archivo selecionado y despues mejor aun solo los elementos selecionados. Habra que crear un
"""
                #debo meter el nombre de la capa selecionada, no el metido con el texto
                vl2=iface.activeLayer()
                if vl2 is None:
                    iface.messageBar().pushMessage("ATENCION", "Selecciona una capa de puntos", duration=10)
                if vl2.wkbType()== 1:#lo siguiente es multipunto que habra que convertirlo antes en punto or vl2.wkbType()==1001:
                    nombre= vl2.source()
                #nombre = QInputDialog.getText(None, "NOMBRE DE LA CAPA","Introduce el nombre del archivo shp sin espacios")

                #shapefile=r'C:/sigmena/gps/'+nombre [0]+'.shp'
                    shapefile=nombre
                #vectorLyr =QgsVectorLayer(shapefile, nombre [0], "ogr")

                #tendria que mirar si tiene src, si no lo tiene ponerle el del proyecto
                #vectorLyr.setCrs(mycrs,True)
                processing.runalg("qgis:reprojectlayer",shapefile, "epsg:4326",str(shapefile[:-4])+"_wgs84.shp")

                #iface.addVectorLayer(shapefile, nombre [0], "ogr")

                dest_crs = QgsCoordinateReferenceSystem(4326)
                QgsVectorFileWriter.writeAsVectorFormat(vectorLyr,str(shapefile[:-4])+"_wgs84","utf-8",dest_crs,"ESRI Shapefile")
                vectorLyr2 =QgsVectorLayer(str(shapefile[:-4])+"_wgs84.shp", nombre [0]+"_wgs84", "ogr")
                vectorLyr2.setCrs(dest_crs,True)
                iface.addVectorLayer(str(shapefile[:-4])+"_wgs84.shp", str(nombre[0])+"_wgs84", "ogr")
                if os.path.exists(str(shapefile[:-4])+".gpx"):
                    os.remove(str(shapefile[:-4])+".gpx")
                comando="ogr2ogr -f GPX "+str(shapefile[:-4])+".gpx "+str(shapefile[:-4])+"_wgs84.shp"# -sql SELECT nombre AS name"#ogr2ogr -f GPX output.gpx input.gpx waypoints routes tracks"
                os.system(comando)

                ruta =str(shapefile[:-4])+".gpx"
                comando= "C:/Users/cargagps.bat"

                os.system(comando+" "+ ruta)
                            

            """
            
        
