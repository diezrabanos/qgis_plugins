# -*- coding: utf-8 -*-
"""
/***************************************************************************
zoomSigmena
                                 A QGIS plugin
Permite hacer zoom a una coordenada dada
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-03-29
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Javier Diez Rabanos
        email                : dierabfr@jcyl.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""


from qgis.PyQt.QtCore import QSettings, QTranslator, qVersion, QCoreApplication#,QFileInfo
from qgis.PyQt.QtGui import QIcon, QColor,QFont
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from PyQt5.QtWidgets import QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .zoomSigmena_dialog import ZoomSigmenaDialog
import os.path

#import para procesar
import qgis.core as qgisCore
from qgis.core import QgsProject, QgsVectorLayer,QgsField,QgsExpression,QgsExpressionContext,QgsExpressionContextScope,QgsVectorFileWriter, QgsMarkerSymbol,QgsRendererCategory,QgsCategorizedSymbolRenderer,QgsPointXY, QgsPoint,QgsFeature,QgsGeometry,QgsLineSymbol,QgsExpressionContextUtils,QgsPalLayerSettings,QgsTextFormat,QgsVectorLayerSimpleLabeling,QgsExpressionContextUtils,QgsCoordinateTransform,QgsCoordinateReferenceSystem,QgsApplication
from qgis.PyQt.QtCore import QVariant
from qgis.utils import iface


import processing
import os
import glob
import re
import sys


import math
import time

import pyproj



class ZoomSigmena:
    """QGIS Plugin Implementation."""
    def __init__(self, iface):
        """Constructor.
        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ZoomSigmena_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        self.dlg = ZoomSigmenaDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Sigmena')
        
       
        self.first_start = None
        

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ZoomSigmena', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        
    

        
        #cambio el icon path para mi equipo.
        usuario=QgsApplication.qgisSettingsDirPath()
        icon_path=os.path.join(usuario,r"python\plugins\zoomSigmena\icon.png")
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)
            #self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/zoomSigmena/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'ZoomSigmena'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        

    
    



    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Sigmena'),
                action)
            self.iface.removeToolBarIcon(action)





    

    


    def run(self):
        print ("paso por el run")
       
        #coloco el puntero arriba del todo
        QgsProject.instance().layerTreeRegistryBridge().setLayerInsertionPoint( QgsProject.instance().layerTreeRoot(), 0 )
   
        #genero una lista con los sistemas de referencia
        misdatos=[["Etrs89 Zona30 (25830)","25830"],["Etrs89 Zona29 (25829)","25829"],["ED50 Zona30 (23030)","23030"],["ED50_Zona29 (23029)","23029"],["WGS84 geograficas (4326)","4326"] ]
        self.dlg.comboBox_src.clear() 
        for element in misdatos:
            self.dlg.comboBox_src.addItem( element[0])
     
        
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False

            

        # show the dialog
        self.dlg.show()
        
        

        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:

            # Do something useful here - delete the line containing pass and
            # substitute with your code.

            
      

             #saco de  aqui variables que estan en las cajitas
            src_seleccionado=self.dlg.comboBox_src.currentIndex()
             
            # Get the coordinates and scale factor from the dialog
            x=self.dlg.XX.text()##displayText()
            y=self.dlg.YY.text()##displayText()
            
            x=x.replace(',','.')
            y=y.replace(',','.')

            src=misdatos[int(src_seleccionado)][1]
            print (src)

            if src=="4326":
                print("entro en geograficas")
                latext=y
                longtext=x
                lag=float(latext.split()[0])
                lam=float(latext.split()[1])
                las=float(latext.split()[2])
                log=float(longtext.split()[0])
                lom=float(longtext.split()[1])
                los=float(longtext.split()[2])
                lon=-1*(log+(lom/60)+(los/3600))
                lat=lag+(lam/60)+(las/3600)
                x=float(lon)
                y=float(lat)

                huso=30
                destinoProj = pyproj.Proj(proj="utm", zone=huso, ellps="WGS84", units="m")
                origenProj = pyproj.Proj(proj='longlat', ellps='WGS84', datum='WGS84')
                UTM_X,UTM_Y = pyproj.transform(origenProj, destinoProj, lon,lat)



            #creo una capa temporal con las coordenadas
            
            # create layer
            vl2 = QgsVectorLayer("Point?crs=EPSG:"+src, "Zoom", "memory")
            pr2 = vl2.dataProvider()
            
            vl2.startEditing()
            # add fields
            pr2.addAttributes([
                            QgsField("x",  QVariant.Double),
                            QgsField("y", QVariant.Double)])
            vl2.updateFields() 
            # tell the vector layer to fetch changes from the provider
            
            #$add a feature
            fet = QgsFeature()
            fet.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(float(x),float(y))))
            #para que lo pase a utms en pantalla
            if src=="4326":
                x=int(UTM_X)
                y=int(UTM_Y)
            fet.setAttributes([ float(x),float( y)])
            pr2.addFeatures([fet])
            
            
           
            #cambio la simbologia
            symbol = QgsMarkerSymbol.createSimple({'name': 'circle', 'color': 'red','size': '3',})
            vl2.renderer().setSymbol(symbol)

            # update layer's extent when new features have been added
            # because change of extent in provider is not propagated to the layer

            layer_settings  = QgsPalLayerSettings()
            text_format = QgsTextFormat()

            text_format.setFont(QFont("Arial", 12))
            text_format.setSize(12)
            text_format.setColor(QColor("Orange"))

                

            layer_settings.setFormat(text_format)
            layer_settings.fieldName = '''concat('X: ',"X",' Y: ',"Y")'''
            layer_settings.isExpression = True


            layer_settings.enabled = True

            layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
            vl2.setLabelsEnabled(True)
            vl2.setLabeling(layer_settings)
            vl2.triggerRepaint()

            # update layer's extent when new features have been added
            # because change of extent in provider is not propagated to the layer
            vl2.updateExtents()
            vl2.commitChanges()
            vl2.updateExtents()
            canvas = self.iface.mapCanvas()
            canvas.setExtent(vl2.extent())
         
            crsSrc = QgsCoordinateReferenceSystem('EPSG:'+str(src))
            crsDest = QgsProject.instance().crs()

            if crsSrc!=crsDest:

                xform = QgsCoordinateTransform(crsSrc, crsDest, QgsProject.instance())
                canvas.setExtent(xform.transform(vl2.extent()))
            
            self.iface.mapCanvas().zoomScale(10000)

            QgsProject.instance().addMapLayer(vl2)
            
        
