# -*- coding: utf-8 -*-
"""
/***************************************************************************
capassigmena
                                 A QGIS plugin
Permite hacer zoom a una coordenada dada
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-03-29
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Javier Diez Rabanos
        email                : fjavier.diez@jcyl.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""


from qgis.PyQt.QtCore import QSettings, QTranslator, qVersion, QCoreApplication#,QFileInfo
from qgis.PyQt.QtGui import QIcon, QColor,QFont
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from PyQt5.QtWidgets import QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .capassigmena_dialog import CapassigmenaDialog
import os.path

#import para procesar
import qgis.core as qgisCore
from qgis.core import QgsProject, QgsVectorLayer,QgsField,QgsExpression,QgsExpressionContext,QgsExpressionContextScope,QgsVectorFileWriter, QgsMarkerSymbol,QgsRendererCategory,QgsCategorizedSymbolRenderer,QgsPointXY, QgsPoint,QgsFeature,QgsGeometry,QgsLineSymbol,QgsExpressionContextUtils,QgsPalLayerSettings,QgsTextFormat,QgsVectorLayerSimpleLabeling,QgsExpressionContextUtils,QgsCoordinateTransform,QgsCoordinateReferenceSystem,QgsApplication,QgsRasterLayer
from qgis.PyQt.QtCore import QVariant
from qgis.utils import iface


import processing
import os
import glob
import re
import sys


import math
import time

import pyproj
import webbrowser






class Capassigmena:
    """QGIS Plugin Implementation."""
    def __init__(self, iface):
        """Constructor.
        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Capassigmena_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)
        
        self.dlg = CapassigmenaDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Sigmena')
        
        
        self.first_start = None
        

        #defino las variables de la clase
        self.ruta=""
        self.indicescolumnas=[]
        self.numerofilas=0
        self.carpeta=""
        

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('CapasSigmena', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        
    

        
        #cambio el icon path para mi equipo.
        usuario=QgsApplication.qgisSettingsDirPath()
        icon_path=os.path.join(usuario,r"python\plugins\capassigmena\icon.png")
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)
            #self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/capassigmena/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'CapasSigmena'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        
    
    

    def select_folder(self):
        """seleciono la carpeta con los datos de entrada"""

        #self.dlg.carpetalaz.clear()
        self.carpeta = QFileDialog.getExistingDirectory(self.dlg , "Selecciona carpeta")
        self.dlg.lineEdit_ruta.setText(self.carpeta)
        return self.carpeta
        print(self.carpeta)
        
    
        

        




    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Sigmena'),
                action)
            self.iface.removeToolBarIcon(action)


    
    #funcion que carga capas que se le pasan de una lista [grupo,ruta,tipo]

    def cargacapas(self,migrupodecapas,lista):
        print("entro en cargacapas")
        #print (lista)
        #print(migrupodecapas)
        global sgroup



        



        
        if migrupodecapas==lista[0]:
            
            
            if lista[3]=='vectorial':
                layer = QgsVectorLayer(lista[1], lista[2], "ogr")
                QgsProject.instance().addMapLayer(layer,False)
                sgroup.addLayer(layer)
                
                #root = QgsProject.instance().layerTreeRoot()
                #layer2 = root.findLayer(layer.id())
                #clone = layer2.clone()
                #group.insertChildNode(0, clone)
                #root.removeChildNode(layer2)
                
             
                
            if lista[3]=='raster':
                layer = QgsRasterLayer(lista[1], lista[2])
                QgsProject.instance().addMapLayer(layer,False)
                sgroup.addLayer(layer)
             
            if lista[3]=='wms':
                print("entro en wms")
                urlWithParams = 'contextualWMSLegend=0&crs=EPSG:25830&dpiMode=7&featureCount=10&format=image/png&layers=Interministerial_1973-1986&styles=default&url=https://www.ign.es/wms/pnoa-historico'
                layer = QgsRasterLayer(urlWithParams, 'some layer name', 'wms')
                QgsProject.instance().addMapLayer(layer,False)
                sgroup.addLayer(layer)
               
                
        
        
       
        
        """

        
        #carpetasalida= '/'.join(capadetrabajo.split("/")[:-1])+"/capas_intermedias"
        #sufijo=str(elementofijo.split("/")[-1])
        sufijo=elementofijo[1]
        salida=carpetasalida+"/"+sufijo
        #print(capadetrabajo,elementofijo)
        #habra que hacer que carge la capa de mups.
        #print("salida",salida)
        
        layer = QgsVectorLayer(elementofijo[0], sufijo, "ogr")#no es necesario con el saveselectedfeatures

        processing.run("native:selectbylocation", {'INPUT':layer,'PREDICATE':[0],'INTERSECT':capadetrabajo,'METHOD':0})
        #processing.run("native:saveselectedfeatures", {'INPUT':elementofijo,'OUTPUT':salida})#es lo mas facil pero cambia la codifiacion
        #guardo los selecionados con la codifiacion indicada
        selection = layer.selectedFeatures()
        
        feats = [feat for feat in layer.selectedFeatures()]
        elementos=len(feats)
        
        if len(feats)>0:
            #hay que comprobar de que tipo es la capa si lineas o poligonos
            #print("tipo ",layer.wkbType())
            if layer.wkbType()==3 or layer.wkbType()==6 or layer.wkbType()==1006:
                #print("es poligono")
                mem_layer = QgsVectorLayer("Polygon?crs=epsg:25830", sufijo, "memory")
            if layer.wkbType()==2 or layer.wkbType()==5:
                #print("es linea")
                mem_layer = QgsVectorLayer("LineString?crs=epsg:25830", sufijo, "memory")
            if layer.wkbType()==1 or layer.wkbType()==4:
                #print("es punto")
                mem_layer = QgsVectorLayer("Point?crs=epsg:25830", "sufijo", "memory")

            mem_layer_data = mem_layer.dataProvider()
            attr = layer.dataProvider().fields().toList()
            mem_layer_data.addAttributes(attr)
            mem_layer.updateFields()
            mem_layer_data.addFeatures(feats)
            if layer.wkbType()==1 or layer.wkbType()==4:#capa de puntos
                #aqui tengo que incluir la cuadricula de 1x1 contando si existen elementos y borrar si son cero.
                capa=processing.run('qgis:countpointsinpolygon', { 'CLASSFIELD' : None, 'FIELD' : 'presenci', 'OUTPUT' :'TEMPORARY_OUTPUT', 'POINTS' : mem_layer , 'POLYGONS' : 'O:/sigmena/carto/CUADRICU/UTM/UTM1KM/42_malla1x1.shp', 'WEIGHT' : None })['OUTPUT']

                mem_layer=capa
                #despues deberia borrar los features que tienen un 0
                feats = mem_layer.getFeatures()
                dfeats = []


                for feat in feats:
                    if feat['presenci'] == 0:
                        dfeats.append(feat.id())
                res = mem_layer.dataProvider().deleteFeatures(dfeats)
                #men_layer.triggerRepaint()
                #despues deberia borrar la capa si no tiene elementos
                pass
            else:#capa de poligonos
                pass
            #en cualquier caso
            
            QgsVectorFileWriter.writeAsVectorFormat(mem_layer,salida,"utf-8",driverName="ESRI Shapefile")
            QgsProject.instance().addMapLayer(mem_layer)
            
            #hasta aqui para guardar lo selecionado

            

            

            print(sufijo)

    
"""
    


    def run(self):
        print("empezamos")

        #prueba
        fila1=["Espacios","Ortofotos"]
        #fila1=[]
        #for field in layer.fields():
        #    fila1.append(field.name())
        #    print(field.name())
        #print(fila1)

        #relleno los combos
        self.dlg.comboBox_campos.clear()
        
        for element in fila1:
            self.dlg.comboBox_campos.addItem(element)
            
        #coloco el puntero arriba del todo
        QgsProject.instance().layerTreeRegistryBridge().setLayerInsertionPoint( QgsProject.instance().layerTreeRoot(), 0 )

        
       
        # show the dialog
        self.dlg.show()




    

        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        
        
        if result:
            #prefijo=self.dlg.lineEdit_prefijo.text()
            index=self.dlg.comboBox_campos.currentIndex()
            print(index)
            migrupodecapas=fila1[index]
            print(migrupodecapas)
            print("creo grupo")
            groupName=migrupodecapas#"test group"
            root = QgsProject.instance().layerTreeRoot()
            global sgroup
            sgroup = root.addGroup(groupName)

            
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            print("ok")

            
            #lo nuevo empieza aqui
            myfile=open (os.path.join(QgsApplication.qgisSettingsDirPath(),r"python\plugins\capassigmena\capas.txt"))
            myline = myfile.readline()
            print(myline)
            
            while myline:
                #convierto la linea en lista
                elemento=eval(myline)
                #print(elemento)
                self.cargacapas(migrupodecapas,elemento)#tengo que ver como llamar al mup, tb layer 8 o 9
                myline = myfile.readline()#para pasar a la siguiente
            myfile.close()
     


            


            

            
            







