# -*- coding: utf-8 -*-
"""
/***************************************************************************
ptos2pol
                                 A QGIS plugin
Permite crear una capa de poligonos partiendo de los elementos de una capa de puntos. Si se seleccionan ciertos elemento solo se tendran estos en cuenta.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-03-29
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Javier Diez Rabanos
        email                : dierabfr@jcyl.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""


from qgis.PyQt.QtCore import QSettings, QTranslator, qVersion, QCoreApplication#,QFileInfo
from qgis.PyQt.QtGui import QIcon, QColor,QFont
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from PyQt5.QtWidgets import QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .selecionaysiguiente_dialog import selecionaysiguienteDialog
import os.path

#import para procesar
import qgis.core as qgisCore
from qgis.core import QgsProject, QgsVectorLayer,QgsField,QgsExpression,QgsExpressionContext,QgsExpressionContextScope,QgsVectorFileWriter, QgsMarkerSymbol,QgsRendererCategory,QgsCategorizedSymbolRenderer,QgsPointXY, QgsPoint,QgsFeature,QgsGeometry,QgsLineSymbol,QgsExpressionContextUtils,QgsPalLayerSettings,QgsTextFormat,QgsVectorLayerSimpleLabeling,QgsExpressionContextUtils,QgsCoordinateTransform,QgsCoordinateReferenceSystem,QgsApplication,QgsRectangle,QgsMarkerSymbol,QgsRendererCategory,QgsCategorizedSymbolRenderer,QgsLineSymbol,QgsFillSymbol,QgsSingleSymbolRenderer,QgsPalLayerSettings,QgsTextFormat ,QgsVectorLayerSimpleLabeling, QgsExpressionContextUtils,QgsFeatureRequest
from qgis.PyQt.QtCore import QVariant
from qgis.utils import iface


import processing
import os
import glob
import re
import sys


import math
import time

from qgis.PyQt.QtGui import QKeySequence
from qgis.PyQt.QtWidgets import QShortcut
from qgis.PyQt.QtCore import Qt

from qgis.PyQt.QtWidgets import  QWidget



class selecionaysiguiente:
    """QGIS Plugin Implementation."""
    def __init__(self, iface):
        """Constructor.
        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'selecionaysiguiente_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        self.dlg = selecionaysiguienteDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Sigmena')
        
       
        self.first_start = None
        self.dlg.pushButtonNext.clicked.connect(self.siguiente)
        
        

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('selecionaysiguiente', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        
    

        
        #cambio el icon path para mi equipo.
        usuario=QgsApplication.qgisSettingsDirPath()
        icon_path=os.path.join(usuario,r"python\plugins\selecionaysiguiente\icon.png")
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/selecionaysiguiente/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'ptos2pol'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        
    def cargacapadepuntos(self):
        """seleciono la capa de puntos con los datos de entrada""" 
        capaptos = QFileDialog.getOpenFileName( self.dlg , "Selecciona capa de puntos",filter = "shp(*.shp)")
        self.dlg.rutaptos.setText(capaptos[0])
        print (capaptos[0])

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removeToolBarIcon(action)
            self.iface.removePluginMenu(
                self.tr(u'&Sigmena'),
                action)
    
    def siguiente(self):
        global contenidoleidob
        global orden
        global layer
        print("entro en la funcion")
            

        elem=contenidoleidob[orden]
        elem=elem.replace('[','')
        elem=elem.replace(']','')
        elem=elem.replace("'","")
        print(elem)
        elem=elem.split(',')
       
        
        print(elem)
        elm=elem[0]
        print(elm)
        codigovia=elem[1]
        

        
        



        """from PyQt5.QtWidgets import QInputDialog
        def getTextInput(title, message):
            answer = QInputDialog.getText(None, title, message)
            if answer[1]:
                print(answer[0])
                return answer[0]
            else:
                return None
        sigo=getTextInput("COntinuamos", " escribe un '1'")"""
        #si ya existe lo va mirando secuancialmente esperando a que el usuario toque una tecla determinada
       

        miexpresion="\"ANEXO_JV\" = '{}' ".format(elm)+" AND \"CLASIFICAC\" = 'SI' AND \"TIPO\" = 'EJE' AND \"COD_VIA\" = '{}'".format(codigovia)

        layer.selectByExpression(miexpresion,QgsVectorLayer.SetSelection)
        #selection = layer.selectByExpression("\"C_POLIGONO\" = {} ".format(pol)+" AND \"C_PARCELA\" = {}".format(par),QgsVectorLayer.SetSelection)
            
        print(miexpresion)
        selection = layer.selectedFeatures()
        
        self.dlg.labelSelecionados.setText(str(len(selection)))
        iface.actionZoomToSelected().trigger()
        
        orden=int(orden) + 1
        print (orden)
            
 

    def run(self):


        global layer
        print ("paso por el run")
        layer=iface.activeLayer()
        import os.path
        fname="c:/work/listadoviaspecuarias.txt"
       
        if os.path.isfile(fname)==False: 
            #si no existe lo crea, el archivo
            
            #coloco el puntero arriba del todo
            QgsProject.instance().layerTreeRegistryBridge().setLayerInsertionPoint( QgsProject.instance().layerTreeRoot(), 0 )
       
                 
            
            """Run method that performs all the real work"""

            
            #genero una lista con las columnas de la capa de puntos
            
            if layer is None:
                iface.messageBar().pushMessage("ATENCION", "Selecciona una capa", duration=10)
            #if vl2.wkbType()< 1 or vl2.wkbType() > 1:
                #iface.messageBar().pushMessage("ATENCION", "Selecciona una capa de puntos", duration=10)
            else:
                diferentes=[]
                #for feature in layer.getFeatures():
                def get_name(f):
                    return f['ANEXO_JV']
                features = sorted(layer.getFeatures(), key=get_name)

                for feature in features:
                    elm = feature['ANEXO_JV']
                    codigovia = feature['COD_VIA']
                    if [elm,codigovia] not in diferentes:
                        diferentes.append([elm,codigovia])
                    
                #print(diferentes)
                diferentes_ordenado=sorted(diferentes, key=lambda tup: (tup[0],tup[1]) )
                #print(diferentes_ordenado)
                n=1
                for elemento in diferentes_ordenado:
                    elemento.append(n)
                    n=n+1
                #print(diferentes_ordenado)
                with open(fname, 'w') as f:
                    for elemen in diferentes_ordenado:
                        
                        print(elemen, file=f)
        print("espero")
        #leo el txt y hago la primera seleccion
        global contenidoleidob
        contenidoleido = open(fname,"r")
        contenidoleidob=contenidoleido.readlines()
        global orden
        orden=0

        
            
                



        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed

        
        
            
                
            


        

        


