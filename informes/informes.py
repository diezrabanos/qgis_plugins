# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Informes
                                 A QGIS plugin
Saca un informe en pdf con el cruce de capas
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-03-29
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Javier Diez Rabanos
        email                : dierabfr@jcyl.es
 ***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from .HTML import Table
from qgis.PyQt.QtXml import QDomDocument
#from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
#from PyQt5.QtGui import QIcon
#from PyQt5.QtWidgets import QAction

from qgis.PyQt.QtCore import QSettings, QTranslator, qVersion, QCoreApplication,QRectF#,QFileInfo
from qgis.PyQt.QtGui import QIcon, QColor,QFont
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from PyQt5.QtWidgets import QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
#from .informes_dialog import InformesDialog
import os.path

#import para procesar
import qgis.core as qgisCore
from qgis.core import QgsProject, QgsVectorLayer,QgsField,QgsExpression,QgsExpressionContext,QgsExpressionContextScope,QgsVectorFileWriter, QgsMarkerSymbol,QgsRendererCategory,QgsCategorizedSymbolRenderer,QgsPointXY, QgsPoint,QgsFeature,QgsGeometry,QgsLineSymbol,QgsExpressionContextUtils,QgsPalLayerSettings,QgsTextFormat,QgsVectorLayerSimpleLabeling,QgsExpressionContextUtils,QgsCoordinateTransform,QgsCoordinateReferenceSystem,QgsWkbTypes,QgsApplication,QgsFillSymbol,QgsSingleSymbolRenderer,QgsLayoutExporter,QgsLayout,QgsLayoutSize,QgsUnitTypes, QgsTextBufferSettings,QgsRasterLayer,QgsSymbolLayerRegistry,QgsLayoutItemLegend,QgsLayoutPoint,QgsLayoutItemLabel,QgsLayoutItemTextTable,QgsLayoutTableColumn,QgsLayoutFrame,QgsProcessingAlgorithm,QgsLayoutItemHtml,QgsLayoutMeasurement,QgsUnitTypes,QgsPrintLayout,QgsReadWriteContext,QgsLayoutItemPage,QgsLayoutItemMapGrid,QgsRectangle
from qgis.PyQt.QtCore import QVariant
from qgis.utils import iface
#from PyQt5.QtWidgets import QMessageBox
#from PyQt5.QtCore import QFileInfo
#from qgis.PyQt.QtCore import QFileInfo
import reportlab

import processing
import ast
import os
import glob
import re
import sys
#from qgis import *

import math
import time
import webbrowser

        
import tempfile
import shutil



from .informes_dialog import InformesDialog

class Informes:
    
    def __init__(self, iface):
        """Constructor.
        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        global almacen
        global almacen0
        global resultadocambiocultivo
        almacen=["",False,"",[],[],0]
        almacen0=["",False,"",[],[]]
        resultadocambiocultivo=[]
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Informes_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        self.dlg = InformesDialog()
        self.dlg.pushButton_ruta.clicked.connect(self.select_shp)
        self.dlg.mycheckbox2.toggled.connect(self.pinchoenusarcomarca)
        self.dlg.cbPRO.activated.connect(self.pinchoenprovincia)
        self.dlg.cbCOM.activated.connect(self.pinchoencomarca)
        self.dlg.mycheckbox3.toggled.connect(self.pinchoenusarcomarca3)
        self.dlg.cbPRO_3.activated.connect(self.pinchoenprovincia3)
        self.dlg.cbCOM_3.activated.connect(self.pinchoencomarca3)



        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Sigmena')
        
        #self.toolbar = self.iface.addToolBar(u'Sigmena')             #creo que no hace nada
        #self.toolbar.setObjectName(u'Sigmena')            #creo que no hace nada
        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        #self.dlg.pushButton_select_path.clicked.connect(self.select_laz_folder)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.
        We implement this ourselves since we do not inherit QObject.
        :param message: String for translation.
        :type message: str, QString
        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Informes', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        
    

        
        #cambio el icon path para mi equipo.
        usuario=QgsApplication.qgisSettingsDirPath()
        icon_path=os.path.join(usuario,r"python\plugins\informes\icon.png")

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)
            #self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/informes/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Informes'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        

        #inicio el tab de sigpac
        #cojo los parametros necesarios del archivo de configuracion
        global rutaarchivomunicipiossigpac
        global rutacarpetarecintos
        global usarcomarca
        global miprovincia
        global micomarca
        global rutacache
        rutaarchivoconfiguracion=os.path.join(QgsApplication.qgisSettingsDirPath(),r"python/plugins/informes/configuracion.txt")
        rutacache=os.path.join(QgsApplication.qgisSettingsDirPath(),r"python/plugins/informes/cache.txt")
        print(rutacache)
        print(rutaarchivoconfiguracion)
        if os.path.isfile(rutaarchivoconfiguracion) ==True:
            fileconfig = open(rutaarchivoconfiguracion, "r")
            fileconfigleido=fileconfig.readlines()
            try:
                rutaarchivomunicipiossigpac= (fileconfigleido[0].replace('\n',''))
                rutacarpetarecintos= (fileconfigleido[1].replace('\n',''))
                fileconfig.close()
            except:
                rutaarchivomunicipiossigpac=""
                rutacarpetarecintos=""
        if os.path.isfile(rutaarchivoconfiguracion) ==False:
            fileconfig = open(rutaarchivoconfiguracion, "w")
            fileconfig.close()
            rutaarchivomunicipiossigpac=""
            rutacarpetarecintos=""
    



    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removeToolBarIcon(action)
            self.iface.removePluginMenu(
                self.tr(u'&Sigmena'),
                action)

#empieza  aqui la ventana de rutas 4x4:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


    def select_shp(self):
        print("empiezo a cargar la ruta")
        global plantilla
        global ruta1
        """seleciono el shp con la ruta"""
        #self.dlg.carpetalaz.clear()
        ruta = QFileDialog.getOpenFileName(self.dlg, "Ruta en formato shapefile", "O:/sigmena/carto/USO_PUBL/ITINERAR/Rutas_Todoterreno/2021", "shp(*.shp)")#QFileDialog.getExistingDirectory(self.dlg , "Selecciona ruta")
        ruta=str(ruta[0])
        print(ruta)
        self.dlg.lineEdit_ruta.setText(ruta)
        #doy la escala aproximada
        ruta1=QgsVectorLayer(ruta,"RUTA","ogr")
        extent = ruta1.extent()
        extent.scale( 1.03 )
        iface.mapCanvas().setExtent(extent)
        
        #elijo que plantilla usar
        xx=extent.xMaximum()-extent.xMinimum()
        yy=extent.yMaximum()-extent.yMinimum()
        if xx>yy:
            plantilla="A3_H"
            
        else:
            plantilla="A3_V"
        print(plantilla)
        #escala_aproximada=iface.mapCanvas().scale()
        #self.dlg.label_escala_aprox.setText(str(escala_aproximada))
        
        return ruta, plantilla
        


#funcion que hace el cruce de las capas y saca los datos de interes lo utilizo para los 4x4
    def cruce(self,capadetrabajo,elementofijo):
        print("entro en cruce")
        global carpetasalida
        global tablamontes
        global tablaconsorcios
        global tablavvpps
        carpetasalida= '/'.join(capadetrabajo.split("/")[:-1])+"/capas_intermedias"
        sufijo=str(elementofijo.split("/")[-1])
        print("sufijo")
        print (sufijo)
        salida=carpetasalida+"/"+sufijo
        print(capadetrabajo,elementofijo)
        #habra que hacer que carge la capa de mups.
        print("salida",salida)
        
        layer = QgsVectorLayer(elementofijo, sufijo, "ogr")#no es necesario con el saveselectedfeatures

        processing.run("native:selectbylocation", {'INPUT':layer,'PREDICATE':[0],'INTERSECT':capadetrabajo,'METHOD':0})
        #processing.run("native:saveselectedfeatures", {'INPUT':elementofijo,'OUTPUT':salida})#es lo mas facil pero cambia la codifiacion
        #guardo los selecionados con la codifiacion indicada
        selection = layer.selectedFeatures()
        
        feats = [feat for feat in layer.selectedFeatures()]
        #hay que comprobar de que tipo es la capa si lineas o poligonos
        print("tipo ",layer.wkbType())
        if layer.wkbType()==3 or layer.wkbType()==6 :
            print("es poligono")
            mem_layer = QgsVectorLayer("Polygon?crs=epsg:25830", "duplicated_layer", "memory")
        if layer.wkbType()==2 or layer.wkbType()==5:
            print("es linea")
            mem_layer = QgsVectorLayer("LineString?crs=epsg:25830", "duplicated_layer", "memory")

        mem_layer_data = mem_layer.dataProvider()
        attr = layer.dataProvider().fields().toList()
        mem_layer_data.addAttributes(attr)
        mem_layer.updateFields()
        mem_layer_data.addFeatures(feats)
        QgsVectorFileWriter.writeAsVectorFormat(mem_layer,salida,"utf-8",driverName="ESRI Shapefile")
        #QgsProject.instance().addMapLayer(mem_layer)
        
        #hasta aqui para guardar lo selecionado

        
        layer= QgsVectorLayer(salida, sufijo, "ogr")
        QgsProject.instance().addMapLayer(layer)
        #layer.setProviderEncoding(u'UTF-8')
        #layer.dataProvider().setEncoding(u'UTF-8')

        if sufijo=="Mup_etrs89.shp":
            print("entro en sufuijo mup")
            print(salida)
            interesantes=["ETIQUETA","NOMB_MONTE","TERMIN_MUN","PERTENENCI"]
            cabecera=["M.U.P.","NOMBRE","TERMINO MUNICIPAL","PERTENENCIA"]
            tablamontes=[]
            #listado de columnas que me interesan
            for feature in layer.getFeatures():
                tablamonte=[]
                #print(feature)
                for field in layer.fields():
                    #print(field)
                    for campo in interesantes:
                        if campo== field.name():
                            #print(feature[campo])
                            tablamonte.append(feature[campo])
                            #print(tablamonte)
                tablamontes.append(tablamonte)
            #print(tablamontes)
            tablamontes.sort(key=lambda x: x[2])            
            tablamontes.insert(0,cabecera)
            #elimino los duplicados
            lista_nueva = []
            for i in tablamontes:
                if i not in lista_nueva:
                    lista_nueva.append(i)
            tablamontes=lista_nueva
        
        if sufijo=="Consorcios_etrs89.shp":
            print("entro en sufuijo consorcio")
            print(salida)
            interesantes=["CONSORCIO","NOMBRE","PUEBLO","NOMBRE_INE"]
            cabecera=["CONSORCIO","NOMBRE","LOCALIDAD","TERMINO MUNICIPAL"]
            tablaconsorcios=[]
            #listado de columnas que me interesan
            for feature in layer.getFeatures():
                tablaconsorcio=[]
                #print(feature)
                for field in layer.fields():
                    #print(field)
                    for campo in interesantes:
                        if campo== field.name():
                            print(feature[campo])
                            print(type(feature[campo]))
                            if type(feature[campo])=='str':
                                print(unicode(feature[campo].toString(), "utf-8"))
                            
                            
                            tablaconsorcio.append(feature[campo])
                            #print(tablamonte)
                tablaconsorcios.append(tablaconsorcio)

            tablaconsorcios.sort(key=lambda x: x[2])            
            tablaconsorcios.insert(0,cabecera)
            #elimino los duplicados
            lista_nueva = []
            for i in tablaconsorcios:
                if i not in lista_nueva:
                    lista_nueva.append(i)
            tablaconsorcios=lista_nueva


        if sufijo=="42_vvpp_etrs89.shp":
            print("entro en sufuijo vvpp")
            print(salida)
            interesantes=["NOMBRE","TERM_MUNIC"]
            cabecera=["VIAS PECUARIAS","TERMINO MUNICIPAL"]
            tablavvpps=[]
            #listado de columnas que me interesan
            for feature in layer.getFeatures():
                tablavvpp=[]
                #print(feature)
                for field in layer.fields():
                    #print(field)
                    for campo in interesantes:
                        if campo== field.name():
                            #print(feature[campo])
                            
                            
                            tablavvpp.append(feature[campo])
                            #print(tablamonte)
                tablavvpps.append(tablavvpp)
            #print(tablamontes)
            tablavvpps.sort(key=lambda x: x[1])            
            tablavvpps.insert(0,cabecera)
            #elimino los duplicados
            lista_nueva = []
            for i in tablavvpps:
                if i not in lista_nueva:
                    lista_nueva.append(i)
            tablavvpps=lista_nueva



#empiezo el cruce de capas vectoriales con la parcela de la que se ha pedido el cambio de cultivo
    def crucecambiocultivo(self,capadetrabajo,elementofijo,carpetasalida):
        print("entro en cruce cambio de cultivo")
        
        global resultadocambiocultivo
        
        #global carpetasalida

        
        #carpetasalida= '/'.join(capadetrabajo.split("/")[:-1])+"/capas_intermedias"
        sufijo=str(elementofijo.split("/")[-1])
        print("sufijo")
        print (sufijo)
        salida=carpetasalida+"/"+sufijo
        print(capadetrabajo,elementofijo)
        #habra que hacer que carge la capa de mups.
        print("salida",salida)
        
        layer = QgsVectorLayer(elementofijo, sufijo, "ogr")#no es necesario con el saveselectedfeatures

        processing.run("native:selectbylocation", {'INPUT':layer,'PREDICATE':[0],'INTERSECT':capadetrabajo,'METHOD':0})
        #processing.run("native:saveselectedfeatures", {'INPUT':elementofijo,'OUTPUT':salida})#es lo mas facil pero cambia la codifiacion
        #guardo los selecionados con la codifiacion indicada
        selection = layer.selectedFeatures()
        
        feats = [feat for feat in layer.selectedFeatures()]
        elementos=len(feats)
        
        if len(feats)>0:
            #hay que comprobar de que tipo es la capa si lineas o poligonos
            print("tipo ",layer.wkbType())
            if layer.wkbType()==3 or layer.wkbType()==6 or layer.wkbType()==1006:
                print("es poligono")
                mem_layer = QgsVectorLayer("Polygon?crs=epsg:25830", "duplicated_layer", "memory")
            if layer.wkbType()==2 or layer.wkbType()==5:
                print("es linea")
                mem_layer = QgsVectorLayer("LineString?crs=epsg:25830", "duplicated_layer", "memory")
            if layer.wkbType()==1 or layer.wkbType()==4:
                print("es punto")
                mem_layer = QgsVectorLayer("Point?crs=epsg:25830", "duplicated_layer", "memory")

            mem_layer_data = mem_layer.dataProvider()
            attr = layer.dataProvider().fields().toList()
            mem_layer_data.addAttributes(attr)
            mem_layer.updateFields()
            mem_layer_data.addFeatures(feats)
            QgsVectorFileWriter.writeAsVectorFormat(mem_layer,salida,"utf-8",driverName="ESRI Shapefile")
            #QgsProject.instance().addMapLayer(mem_layer)
            
            #hasta aqui para guardar lo selecionado

            
            #layer= QgsVectorLayer(salida, sufijo, "ogr")
            #QgsProject.instance().addMapLayer(layer)
            #layer.setProviderEncoding(u'UTF-8')
            #layer.dataProvider().setEncoding(u'UTF-8')
            resultadocambiocultivo.append("&#9745;")#("Si")
        else:
            resultadocambiocultivo.append("&#9744;")
        print(sufijo, resultadocambiocultivo)
        
    def crucecambiocultivoraster(self,capadetrabajo,elementofijo,carpetasalida):#PARA LAS PENDIENTES
        print("entro en cruce cambio de cultivo raster")
        global resultadocambiocultivo
        
        pendiente=0
        processing.run("qgis:zonalstatistics", {'INPUT_RASTER':elementofijo,'RASTER_BAND':1,'INPUT_VECTOR':capadetrabajo,'COLUMN_PREFIX':'_','STATS':[6]})
        for feature in capadetrabajo.getFeatures():
            for field in capadetrabajo.fields():
                if "_max"== field.name():
                    if feature["_max"]==2:
                        pendiente=1
        print(pendiente)
        print("antes",resultadocambiocultivo)
        if pendiente==1:
            resultadocambiocultivo.append("&#9745;")#("Si")
        else:
            resultadocambiocultivo.append("&#9744;")
                            
        

#configuro el mapa con las capas necesarias para las rutas 4x4
    def hagomapa(self,ruta):
        print("empiezo a hacer los cruces")
        #elimino capas del proeycto actual
        #capasinteresantes=[]
        capas =QgsProject.instance().mapLayers()
        for capa in capas:
            #print (capa)
            #if capa not in capasinteresantes:
            QgsProject.instance().removeMapLayers( [capa] )
            
        del(capas)

       
        #cargo las capas finales
        mup=QgsVectorLayer(os.path.join(carpetasalida,"Mup_etrs89.shp"),"M.U.P.","ogr")
        consorcio=QgsVectorLayer(os.path.join(carpetasalida,"Consorcios_etrs89.shp"),"Consorcios","ogr")
        vvpp=QgsVectorLayer(os.path.join(carpetasalida,"42_vvpp_etrs89.shp"),"VVPP","ogr")
        ruta=QgsVectorLayer(ruta,"RUTA","ogr")
        # cargo el raster
        path_to_tif = os.path.join(r"R:\SIGMENA\CARTO\RASTER\ESCANEOS\E200\42_prov_IGN_etrs89.TIF")
        rlayer = QgsRasterLayer(path_to_tif, "E200")
        rlayer.renderer().setOpacity(0.5)
        QgsProject.instance().addMapLayer(rlayer)#QgsProject.instance().addRasterLayer(rlayer)
 
        #aplico simbologia a estas capas, si existen
        try:
            symbol = QgsFillSymbol.createSimple({'color': '0,0,0,0', 'outline_color': 'red','width_border':'1'})#({'line_style': 'dash', 'color': layercolour })
            symbol.setOpacity(1)
            #etiqueto
            layer_settings  = QgsPalLayerSettings()
            text_format = QgsTextFormat()
            text_format.setFont(QFont("Arial", 12))
            text_format.setSize(12)
            text_format.setColor(QColor("Red"))
            #le meto un buffer a la etiqueta
            buffer_settings = QgsTextBufferSettings()
            buffer_settings.setEnabled(True)
            buffer_settings.setSize(1)
            buffer_settings.setColor(QColor("white"))

            text_format.setBuffer(buffer_settings)
            layer_settings.setFormat(text_format)
            layer_settings.fieldName = '''concat('MUP ',"ETIQUETA")'''            
            layer_settings.isExpression = True
            layer_settings.enabled = True
            layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
            mup.setLabelsEnabled(True)
            mup.setLabeling(layer_settings)
            mup.triggerRepaint()
            mup.renderer().setSymbol(symbol)
            QgsProject.instance().addMapLayer(mup)   
        except: 
            pass
        try:
            symbol = QgsFillSymbol.createSimple({'color': '0,0,0,0', 'outline_color': 'yellow','width_border':'1'})
            #etiqueto
            layer_settings  = QgsPalLayerSettings()
            text_format = QgsTextFormat()
            text_format.setFont(QFont("Arial", 12))
            text_format.setSize(12)
            text_format.setColor(QColor("Yellow"))
            #le meto un buffer a la etiqueta
            buffer_settings = QgsTextBufferSettings()
            buffer_settings.setEnabled(True)
            buffer_settings.setSize(1)
            buffer_settings.setColor(QColor("grey"))
            text_format.setBuffer(buffer_settings)
            layer_settings.setFormat(text_format)
            layer_settings.fieldName = '''concat('SO',"CONSORCIO")'''            
            layer_settings.isExpression = True
            layer_settings.enabled = True
            layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
            consorcio.setLabelsEnabled(True)
            consorcio.setLabeling(layer_settings)
            consorcio.triggerRepaint()
            consorcio.renderer().setSymbol(symbol)
            QgsProject.instance().addMapLayer(consorcio)
        except: 
            pass

        try:
            props = { 'width' : '.6', 'color' : '0,255,0','penstyle': 'dash','customdash': '3;2', 'use_custom_dash': '1' } #{'width': '0.26', 'color': '255,0,0', 'offset': '-1.0', 'penstyle': 'solid', 'use_custom_dash': '0', 'joinstyle': 'bevel', 'capstyle': 'square'})
            association_symbol = QgsApplication.symbolLayerRegistry().symbolLayerMetadata("SimpleLine").createSymbolLayer(props)#{        'arrow_width': '0.4',        'head_length': '2.0', 'head_thickness' : '0.75', 'color': 'red', 'line_color': 'red', 'is_curved': '0', 'arrow_start_width': '.2 '})#("SimpleLine")(props)
            vvpp.renderer().symbol().deleteSymbolLayer(0) 
            vvpp.renderer().symbol().appendSymbolLayer(association_symbol)            
            #etiqueto
            layer_settings  = QgsPalLayerSettings()
            text_format = QgsTextFormat()
            text_format.setFont(QFont("Arial", 9))
            text_format.setSize(9)
            text_format.setColor(QColor("Green"))
            #le meto un buffer a la etiqueta
           
            layer_settings.setFormat(text_format)
            #layer_settings.fieldName = "NOMBRE"
            layer_settings.fieldName = '''concat("NOMBRE" , '\n' ,  "ANCHO_M"  , ' m.')'''            
            layer_settings.isExpression = True
            layer_settings.enabled = True
            layer_settings.placement = 2

            
            layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
            vvpp.setLabelsEnabled(True)
            
            vvpp.setLabeling(layer_settings)
            
            vvpp.triggerRepaint()
            vvpp.renderer().symbol()
            QgsProject.instance().addMapLayer(vvpp)   
        except: 
            pass
        
        symbol=QgsLineSymbol.createSimple({'color': 'black', 'line_width': '1.3'})
        ruta.renderer().setSymbol(symbol)
        extent = ruta.extent()
        extent.scale( 1.03 )
        iface.mapCanvas().setExtent(extent)
        #ajusta a escala
        #if self.dlg.lineEdit_escala.text() is not "":
            #iface.mapCanvas().zoomScale( int(self.dlg.lineEdit_escala.text()) )
        #iface.mapCanvas().scale()
        #
        iface.mapCanvas().refresh()

        #zoomRectangle = QgsRectangle(pos[0]-offset, pos[1]-offset,pos[0]+offset,pos[1]+offset)
        #self.canvas.setExtent(zoomRectangle)
        #self.canvas.refresh()
        
        QgsProject.instance().addMapLayer(ruta)

        




        


#configuro el mapa con las capas necesarias para los cambios de cultivo
    def hagomapa2(self,resultadocambiocultivo,carpetasalida,munic,polig,parc):
        global extension
        #lo primero si no lo he hecho ya seria congelar la vista.
        
        #elimino capas del proeycto actual
        capasinteresantes=['Sigpac']
        capas =QgsProject.instance().mapLayers()
        for capa in capas:
            #print (capa)
            if capa[:6] not in capasinteresantes :
                #QgsProject.instance().removeMapLayers( [capa] )
                QgsProject.instance().layerTreeRoot().findLayer(capa).setItemVisibilityChecked(False)
            
        del(capas)

       
        #cargo las capas finales vectoriales antes las he tenido que crear
        rutaestilos=r'O:/sigmena/leyendas/qgis'

       
       
        if resultadocambiocultivo[0]=="&#9745;":#"Si":
            mup=QgsVectorLayer(os.path.join(carpetasalida,'Mup_etrs89.shp') ,"M.U.P.","ogr")
        if resultadocambiocultivo[1]=="&#9745;":#"Si":
            consorcio=QgsVectorLayer(os.path.join(carpetasalida,"Consorcios_etrs89.shp"),"Consorcios","ogr")
        if resultadocambiocultivo[2]=="&#9745;":#"Si":
            vvpp=QgsVectorLayer(os.path.join(carpetasalida,"42_vvpp_etrs89.shp"),"VVPP","ogr")
        if resultadocambiocultivo[3]=="&#9745;":#"Si":
            ren=QgsVectorLayer(os.path.join(carpetasalida,"42_ren_ex_etrs89.shp"),"R.E.N","ogr")
        if resultadocambiocultivo[4]=="&#9745;":#"Si":
            zec=QgsVectorLayer(os.path.join(carpetasalida,"42_ZEC.shp"),"Z.E.C","ogr")
        if resultadocambiocultivo[5]=="&#9745;":#"Si":
            zepa=QgsVectorLayer(os.path.join(carpetasalida,"42_ZEPA.shp"),"Z.E.P.A","ogr")
        if resultadocambiocultivo[6]=="&#9745;":#"Si":
            alondra=QgsVectorLayer(os.path.join(carpetasalida,"42_AREAS_RELEVANCIA_ALONDRA_RICOTI_etrs89.shp"),"Z. Alondra","ogr")
        if resultadocambiocultivo[7]=="&#9745;":#"Si":
            yacimientos=QgsVectorLayer(os.path.join(carpetasalida,"42_VW_BIENES.shp"),"Yacimientos","ogr")
        if resultadocambiocultivo[8]=="&#9745;":#"Si":
            print("FTA SIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII")
            repoblaciones=QgsVectorLayer(os.path.join(carpetasalida,"FTA_SORIA_1993_2018.shp"),"F.T.A","ogr")
        
        
        

        def simbologiayetiquetopol(capa, estilo, colorrelleno, colorborde,gruesoborde,texto,coloretiqueta,colorsombra):
            QgsProject.instance().layerTreeRegistryBridge().setLayerInsertionPoint( QgsProject.instance().layerTreeRoot(), 1 )
            print
            symbol = QgsFillSymbol.createSimple({'color': colorrelleno,'style':estilo, 'outline_color': colorborde,'width_border':'1'})#({'line_style': 'dash', 'color': layercolour })
            symbol.setOpacity(0.8)
            #etiqueto
            layer_settings  = QgsPalLayerSettings()
            text_format = QgsTextFormat()
            text_format.setFont(QFont("Arial", 12))
            text_format.setSize(12)
            text_format.setColor(QColor(coloretiqueta))
            #le meto un buffer a la etiqueta
            buffer_settings = QgsTextBufferSettings()
            buffer_settings.setEnabled(True)
            buffer_settings.setSize(1)
            buffer_settings.setColor(QColor(colorsombra))

            text_format.setBuffer(buffer_settings)
            layer_settings.setFormat(text_format)
            layer_settings.fieldName = texto          
            layer_settings.isExpression = True
            layer_settings.enabled = True
            layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
            capa.setLabelsEnabled(True)
            capa.setLabeling(layer_settings)
            capa.triggerRepaint()
            capa.renderer().setSymbol(symbol)
            QgsProject.instance().addMapLayer(capa)
            
        #aplico simbologia a estas capas, si existen

        try:
            simbologiayetiquetopol(mup, 'solid','0,0,0,0', 'red','1','''concat('MUP ',"ETIQUETA")'''   ,"Red","white")
            QgsProject.instance().addMapLayer(mup)
            
        except: 
            pass
        try:
            simbologiayetiquetopol(consorcio,'solid', '0,0,0,0', 'yellow','1','''concat('SO',"CONSORCIO")'''   ,"Yellow","grey")
           
        except: 
            pass

        try:
            QgsProject.instance().layerTreeRegistryBridge().setLayerInsertionPoint( QgsProject.instance().layerTreeRoot(), 0 )
            props = { 'width' : '.6', 'color' : '0,255,0','penstyle': 'dash','customdash': '3;2', 'use_custom_dash': '1' } #{'width': '0.26', 'color': '255,0,0', 'offset': '-1.0', 'penstyle': 'solid', 'use_custom_dash': '0', 'joinstyle': 'bevel', 'capstyle': 'square'})
            association_symbol = QgsApplication.symbolLayerRegistry().symbolLayerMetadata("SimpleLine").createSymbolLayer(props)#{        'arrow_width': '0.4',        'head_length': '2.0', 'head_thickness' : '0.75', 'color': 'red', 'line_color': 'red', 'is_curved': '0', 'arrow_start_width': '.2 '})#("SimpleLine")(props)
            vvpp.renderer().symbol().deleteSymbolLayer(0) 
            vvpp.renderer().symbol().appendSymbolLayer(association_symbol)            
            #etiqueto
            layer_settings  = QgsPalLayerSettings()
            text_format = QgsTextFormat()
            text_format.setFont(QFont("Arial", 9))
            text_format.setSize(9)
            text_format.setColor(QColor("Green"))
            #le meto un buffer a la etiqueta
           
            layer_settings.setFormat(text_format)
            #layer_settings.fieldName = "NOMBRE"
            layer_settings.fieldName = '''concat("NOMBRE" , '\n' ,  "ANCHO_M"  , ' m.')'''            
            layer_settings.isExpression = True
            layer_settings.enabled = True
            layer_settings.placement = 2

            
            layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
            vvpp.setLabelsEnabled(True)
            
            vvpp.setLabeling(layer_settings)
            
            vvpp.triggerRepaint()
            vvpp.renderer().symbol()
            QgsProject.instance().addMapLayer(vvpp)   
        except: 
            pass
        try:
            simbologiayetiquetopol(ren, 'vertical','0,255,0', 'green','1','''concat(' ',"NOMBRE")'''   ,"green","white")
        except:
            pass
        try:
            simbologiayetiquetopol(zec, 'b_diagonal','255,0,0', 'red','1','''concat(' ',"SITE_NAME")'''   ,"red","white")
        except:
            pass
        try:
            simbologiayetiquetopol(zepa,'f_diagonal', '0,0,255', 'blue','1','''concat(' ',"SITE_NAME")'''   ,"blue","white")
        except:
            pass
        try:
            simbologiayetiquetopol(alondra,'horizontal', '255,255,0', 'orange','1','''concat('',' ')'''   ,"Yellow","grey")
        except:
            pass
        try:
            simbologiayetiquetopol(yacimientos,'dense1', '255,255,255,255', 'black','1','''concat('YAC. ',"A_DENO_PPA")'''   ,"Black","grey")
        except:
            pass
        try:
            simbologiayetiquetopol(repoblaciones,'dense1', '255,255,255,255', 'black','1','''concat('F.T.A ','')'''   ,"Black","grey")
        except:
            pass
        """symbol=QgsLineSymbol.createSimple({'color': 'black', 'line_width': '1.3'})
        ruta.renderer().setSymbol(symbol)
        extent = ruta.extent()
        extent.scale( 1.03 )
        iface.mapCanvas().setExtent(extent)
        if self.dlg.lineEdit_escala.text() is not "":
            iface.mapCanvas().zoomScale( int(self.dlg.lineEdit_escala.text()) )
        #iface.mapCanvas().scale()
        #
        iface.mapCanvas().refresh()
        #zoomRectangle = QgsRectangle(pos[0]-offset, pos[1]-offset,pos[0]+offset,pos[1]+offset)
        #self.canvas.setExtent(zoomRectangle)
        #self.canvas.refresh()
        
        QgsProject.instance().addMapLayer(ruta)"""

        
        # cargo el wms de la ortofoto
        sies=resultadocambiocultivo.count("&#9745;")#('Si')

        QgsProject.instance().layerTreeRegistryBridge().setLayerInsertionPoint( QgsProject.instance().layerTreeRoot(), sies+1 )
        urlWithParams='contextualWMSLegend=0&crs=EPSG:25830&dpiMode=7&featureCount=10&format=image/png&layers=Ortofoto_2001&styles=&url=http://orto.wms.itacyl.es/WMS?'
        rlayer = QgsRasterLayer(urlWithParams, 'ortos2001', 'wms')
        rlayer.isValid()
        QgsProject.instance().addMapLayer(rlayer)
        #cargo el raster de pendientes
        path_to_tif = os.path.join(r"O:\sigmena\carto\M_FISICO\RELIEVE\PENDIENT/MDT5CYL_PEND_10_15.TIF")
        rlayer = QgsRasterLayer(path_to_tif, "Pendiente")
        rlayer.renderer().setOpacity(0.2)
        rlayer.loadNamedStyle(os.path.join(rutaestilos,'pendiente_10_15.qml'))
        QgsProject.instance().addMapLayer(rlayer)

        #desde aqui empiezo a arreglarlo
        #los paso al layout

        projectInstance = QgsProject.instance()
        layoutmanager = projectInstance.layoutManager()
        lay = layoutmanager.layoutByName("A4_H") #Layout name

        """
        #1 empiezo
        tmpfile = 'o:/sigmena/leyendas/cambio_cultivo.qpt'
        # Load template from file
        p = QgsProject()
        l = QgsLayout(p)
        with open(tmpfile) as f:
            template_content = f.read()
        # it return a QgsComposerView
        doc1 = QDomDocument()
        doc1.setContent(template_content)
        ele = doc1.documentElement()
        print("leo la plantilla")
        project = QgsProject.instance()
        lay = QgsPrintLayout(project)
        #lay.initializeDefaults()
        #layout.setName("cambioslayout")
        #pc = layout.pageCollection()
        #pc.pages()[0].setPageSize('A4', QgsLayoutItemPage.Orientation.Landscape)
        
        lay.addItemsFromXml(ele, doc1, QgsReadWriteContext())
        iface.openLayoutDesigner(lay)
        print("acabo de abrir el plano")
        #1 acabo
        """

        
        mapItem = lay.referenceMap()
        mapItem.attemptResize(QgsLayoutSize(240, 190, QgsUnitTypes.LayoutMillimeters))
        #meto la leyenda
        legend = QgsLayoutItemLegend(lay)
        legend.setTitle("Leyenda")
        
        legend.setLinkedMap(mapItem) # pass a QgsLayoutItemMap object
        #incluye todos los visibles
        #legend.setLegendFilterByMapEnabled(True)
        #todas las visibles de otra forma
        lyrs_to_add = [l for l in QgsProject().instance().layerTreeRoot().children() if l.isVisible()]
        #lyrs_to_add2 = [l.name() for l in QgsProject().instance().layerTreeRoot().children() if l.isVisible()]
        #print (lyrs_to_add2)
        lyrs_to_add2 = ["M.U.P.","Consorcios","VVPP","R.E.N","Z.E.C","Z.E.P.A","Z. Alondra","Yacimientos","F.T.A.","Pendiente"]
        legend.setAutoUpdateModel(False)
        group = legend.model().rootGroup()
        group.clear()
        for l in lyrs_to_add:
            if l.name() in lyrs_to_add2:
                subgroup = group.addGroup(l.name())
                checked = l.checkedLayers()
                for c in checked:
                    #subgroup.addLayer(c)
                    group.addLayer(c)
                
        lay.addItem(legend)
        legend.adjustBoxSize()
        legend.attemptMove(QgsLayoutPoint(25.5, 9, QgsUnitTypes.LayoutCentimeters))
        #legend.attemptResize(QgsLayoutSize(2.8, 2.2, QgsUnitTypes.LayoutCentimeters))
        legend.refresh()
        
        lay.addLayoutItem(legend)
        
        #cambio el titulo
        #Titulo="Mi titulo"
        for i in lay.items():
             if isinstance(i, QgsLayoutItemLabel) and i.id() == "titulo":
                i.setText("")




#METO LA TABLA CON LOS SIES
         
        layout_html = QgsLayoutItemHtml(lay)
        html_frame = QgsLayoutFrame(lay, layout_html)
        html_frame.attemptSetSceneRect(QRectF(255, 40, 50, 100))
        html_frame.setFrameEnabled(True)
        layout_html.addFrame(html_frame)
        layout_html.setContentMode(QgsLayoutItemHtml.ManualHtml)#background-color: white ;
        estilo="<style> table { font-size: 12px; background-color:white; border-collapse: collapse;}tr {border: 0px solid black;bgcolor :white;}td {white-space: nowrap; padding: 0px;bgcolor :white;}td.bold {font-weight: bold;}td.gap {background-color:white;padding:1px;}</style>"      
        htmlcode = '<TABLE><CAPTION>LIMITACIONES</CAPTION><TR><TD>'+resultadocambiocultivo[0]+'</TD><TD>M.U.P.</TD></TR><TR><TD>'+resultadocambiocultivo[1]+'</TD><TD>Consorcios</TD></TR><TR><TD>'+resultadocambiocultivo[2]+'</TD><TD>V.V.P.P.</TD></TR><TR><TD>'+resultadocambiocultivo[3]+'</TD><TD>R.E.N.</TD></TR><TR><TD>'+resultadocambiocultivo[4]+'</TD><TD>Z.E.C.</TD></TR><TR><TD>'+resultadocambiocultivo[5]+'</TD><TD>Z.E.P.A.</TD></TR><TR><TD>'+resultadocambiocultivo[6]+'</TD><TD>Z. Alondra</TD></TR><TR><TD>'+resultadocambiocultivo[7]+'</TD><TD>Yacimientos</TD></TR><TR><TD>'+resultadocambiocultivo[8]+'</TD><TD>F.T.A.</TD></TR><TR><TD>'+resultadocambiocultivo[9]+'</TD><TD>Pendiente</TD></TR><TR><TD>&#9745;</TD><TD>No cultivado</TD></TR></TABLE>'
       
        layout_html.setHtml(estilo+" "+str(htmlcode))
        layout_html.loadHtml()
        html_frame.setFrameStrokeWidth(QgsLayoutMeasurement(0.5, QgsUnitTypes.LayoutMillimeters))
        html_frame.setFrameStrokeColor(QColor("transparent"))




        label0 = QgsLayoutItemLabel(lay)
        label0.setFont(QFont("Arial", 10))
        label0.setText("CAMBIO DE CULTIVO")
        label0.adjustSizeToText()
        lay.addItem(label0)
        label0.attemptMove(QgsLayoutPoint(255, 10, QgsUnitTypes.LayoutMillimeters))
        label1 = QgsLayoutItemLabel(lay)
        label2 = QgsLayoutItemLabel(lay)
        label3 = QgsLayoutItemLabel(lay)
        label1.setFont(QFont("Arial", 12))
        label2.setFont(QFont("Arial", 12))
        label3.setFont(QFont("Arial", 12)) 
        label1.setText(munic)
        label2.setText("Polígono: "+polig)
        label3.setText("Parcela: "+parce)
        label1.adjustSizeToText()
        label2.adjustSizeToText()
        label3.adjustSizeToText()
        lay.addItem(label1)
        lay.addItem(label2)
        lay.addItem(label3)
        label1.attemptMove(QgsLayoutPoint(255, 15, QgsUnitTypes.LayoutMillimeters))
        label2.attemptMove(QgsLayoutPoint(255, 20, QgsUnitTypes.LayoutMillimeters))
        label3.attemptMove(QgsLayoutPoint(255, 25, QgsUnitTypes.LayoutMillimeters))
        label4 = QgsLayoutItemLabel(lay)
        label4.setFont(QFont("Arial", 10))
        label4.setText("Ortofoto 2001")
        label4.adjustSizeToText()
        lay.addItem(label4)
        label4.attemptMove(QgsLayoutPoint(255, 30, QgsUnitTypes.LayoutMillimeters))

        
        #print(mapItem)
        #mapItem.setExtent(iface.mapCanvas().extent())
        #mapItem.attemptResize(QgsLayoutSize(410, 260, QgsUnitTypes.LayoutMillimeters))

        iface.mapCanvas().setExtent(extension)
        mapItem.zoomToExtent(extension)#(iface.mapCanvas().extent())
        #activo el grid
        mapItem.grid().setEnabled(False)



        legendExporter=QgsLayoutExporter(lay)
        imageSettings=legendExporter.ImageExportSettings()
        imageSettings.cropToContents=True
        imageSettings.dpi=300
        imageSettings.pages=[0]
        exporter = QgsLayoutExporter(lay)
        iface.openLayoutDesigner(lay)
        
        






        


        
#configuro los mapas necesarios para la serie de ortos
    #configuro el mapa con las capas necesarias para los cambios de cultivo
    def hagomapa3(self,ano1,ano2, municip,polig,parcel):
        #para los informes en pdf
        from reportlab.platypus import SimpleDocTemplate,Paragraph,Table,TableStyle,Image
        from reportlab.lib.styles import getSampleStyleSheet
        from reportlab.lib import colors
        from reportlab.lib.pagesizes import A3,A4,A6,portrait,landscape
        from reportlab.lib.units import mm
        from reportlab.pdfgen import canvas
        from reportlab.pdfbase import pdfmetrics
        from reportlab.pdfbase.ttfonts import TTFont
        from PyPDF2 import PdfFileWriter, PdfFileReader
        import io

        filePath = tempfile.mkdtemp()
        print (filePath)
        #filePath=r"c:/work/temporal/"

        #elimino capas del proeycto actual
        def eliminacapas():
            capasinteresantes=["Sigpac"]
            capas =QgsProject.instance().mapLayers()
            for capa in capas:
                if capa[:6] not in capasinteresantes :
                    #QgsProject.instance().removeMapLayers( [capa] )   
                    QgsProject.instance().layerTreeRoot().findLayer(capa).setItemVisibilityChecked(False)
            del(capas)
        
        eliminacapas()
            
        QgsProject.instance().layerTreeRegistryBridge().setLayerInsertionPoint( QgsProject.instance().layerTreeRoot(), 1 )
        projectInstance = QgsProject.instance()
        layoutmanager = projectInstance.layoutManager()
        layout = layoutmanager.layoutByName("A6") #Layout name
        mapItem = layout.referenceMap()
        mapItem.zoomToExtent(iface.mapCanvas().extent())
        
        listaanos=[1956,1977,1997,1999,2000,2001,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017]

        # cargo el wms de la ortofoto y genero el png
        imagenes=[]
        for ano in listaanos:
            if ano>=ano1 and ano<=ano2:
                print(ano)
                #try:
                QgsProject.instance().layerTreeRegistryBridge().setLayerInsertionPoint( QgsProject.instance().layerTreeRoot(), 1 )
                if ano==1977:
                    print("empiezo 1977")
                    rlayer = QgsRasterLayer("contextualWMSLegend=0&crs=EPSG:25830&dpiMode=7&featureCount=10&format=image/png&layers=Ortofoto_1973_1986&styles&url=http://orto.wms.itacyl.es/WMS?", "1977", 'wms')
                    print("1977 ok")
                else:
                    rlayer = QgsRasterLayer("contextualWMSLegend=0&crs=EPSG:25830&dpiMode=7&featureCount=10&format=image/png&layers=Ortofoto_"+str(ano)+'&styles=&url=http://orto.wms.itacyl.es/WMS?', str(ano), 'wms')
                eliminacapas()
                QgsProject.instance().layerTreeRegistryBridge().setLayerInsertionPoint( QgsProject.instance().layerTreeRoot(), 1 )
                if rlayer.isValid()==True:
                    QgsProject.instance().addMapLayer(rlayer)
                    print("true ",ano)
                    time.sleep(2)

                    mapItem.zoomToExtent(iface.mapCanvas().extent())
                    legendExporter=QgsLayoutExporter(layout)
                    imageSettings=legendExporter.ImageExportSettings()
                    imageSettings.cropToContents=True
                    imageSettings.dpi=100
                    imageSettings.pages=[0]
                    exporter = QgsLayoutExporter(layout)
                    archi=( filePath + str(ano) + ".png" )
                    exporter.exportToImage(archi,imageSettings )
                    imagenes.append(archi)
        print("todas las imagenes de comienzo")
        print (imagenes)
        #saco valor de la imagen en varios sitios para ver si esta en blanco
        from PIL import Image as Imagepil
        borrar=[]
                       
        print("empiezo a quitar las no validas")
        print("imagenes ahora",imagenes)
        for imagen in imagenes:
            print("por si estan en blanco",imagen)
            im = Imagepil.open(imagen) # Can be many different formats., ruta de la imagen
            pix = im.load()
            #print im.size  # Get the width and hight of the image for iterating over
            print (imagen, pix[1,1],pix[10,100],pix[100,10])
            if pix[1,1]==(255, 255, 255, 255) or pix[10,100]==(255, 255, 255, 255) or pix[100,10]==(255, 255, 255, 255) :
                borrar.append(imagen)
        for imagen in borrar:
            imagenes.remove(imagen)
            
        print( "final ",imagenes)
        #anado todas las imagenes a un pdf
        carpetasalida=filePath
        c = canvas.Canvas(carpetasalida+"/salida.pdf", pagesize=portrait(A4))#landscape(A4))  # alternatively use bottomup=False
        ruta_logo=r"o:/sigmena/logos/color_consejeria.jpg"
        img_logo=Image(ruta_logo)#,, width)#250*mm,250*mm)#los numeross son opcionales para determinar el tamaño
        img_logo._restrictSize(30 * mm, 20 * mm)
        img_logo.drawOn(c,170*mm,275 * mm)
        width, height = A6
        n=0
        if n==0:
            c.setFont("Helvetica", 10)
            #aqui meto un texto
            ptext = "Municipio: " +municip+"   Polígono: "+str(polig)+"   Parcela: "+str(parcel)
            c.drawString(30*mm, 270*mm, ptext)
        nmax=len(imagenes)
        print (nmax)
        #meto la imagen y el texto
        for imagen in imagenes:
            c.setFont("Helvetica", 12)
            #aqui meto un texto
            ptext = "Año Ortofoto " +str(imagen[-8:-4])
            print(ptext)
            #p = Paragraph(ptext, style=styles["Normal"])
            
            img_data1=Image(imagen,height, width)#250*mm,250*mm)#los numeross son opcionales para determinar el tamaño
            #img_data1.wrapOn(c, 200*mm,200*mm)
            if n%2==0:
                x,y =30,150
                z,t=100,260
                c.drawCentredString( 100*mm, 15*mm, "- "+str(n//2+1) +" -")
                c.setFont("Helvetica", 8)
                #c.drawString(190*mm, 15*mm, "SIGMENA")
                c.setFont("Helvetica", 12)
            else:
                x,y=30,20
                z,t=100,130
            #p.wrapOn(c, 50*mm, 50*mm)  # size of 'textbox' for linebreaks etc.
            #p.drawOn(c, z * mm, t * mm)    # position of text / where to draw
            img_data1.drawOn(c,x*mm,y * mm)
            c.drawCentredString( z*mm, t*mm, ptext)
            #c.drawString(z*mm, t*mm, ptext)
            
            if n%2==1:
                print (n)
                if n< nmax-1:
                    c.showPage()
            n=n+1
        c.drawCentredString( 100*mm, 15*mm, "- "+str(n//2+1) +" -")
        c.setFont("Helvetica", 8)
        c.drawString(190*mm, 15*mm, "SIGMENA")
    
        c.save()
        help_file = 'file:' + carpetasalida + '/salida.pdf'
        print(help_file)
        webbrowser.open_new(help_file)
        
                


                
                #except:
                 #   pass
        # ... do stuff with dirpath
        #shutil.rmtree(filePath,ignore_errors=True)



        

    



    
    def plantillaapng(self,plantilla,Titulo ,rutapng):
        projectInstance = QgsProject.instance()
        layoutmanager = projectInstance.layoutManager()
        layout = layoutmanager.layoutByName("A3_H") #Layout name
        mapItem = layout.referenceMap()
        #meto la leyenda
        legend = QgsLayoutItemLegend(layout)
        legend.setTitle("Leyenda")
        
        legend.setLinkedMap(mapItem) # pass a QgsLayoutItemMap object
        #incluye todos los visibles
        #legend.setLegendFilterByMapEnabled(True)
        #todas las visibles de otra forma
        lyrs_to_add = [l for l in QgsProject().instance().layerTreeRoot().children() if l.isVisible()]
        #lyrs_to_add2 = [l.name() for l in QgsProject().instance().layerTreeRoot().children() if l.isVisible()]
        #print (lyrs_to_add2)
        lyrs_to_add2 = ["RUTA","M.U.P.","Consorcios","VVPP"]
        legend.setAutoUpdateModel(False)
        group = legend.model().rootGroup()
        group.clear()
        for l in lyrs_to_add:
            if l.name() in lyrs_to_add2:
                subgroup = group.addGroup(l.name())
                checked = l.checkedLayers()
                for c in checked:
                    #subgroup.addLayer(c)
                    group.addLayer(c)
                
        layout.addItem(legend)
        legend.adjustBoxSize()
        legend.attemptMove(QgsLayoutPoint(37, 2, QgsUnitTypes.LayoutCentimeters))
        #legend.attemptResize(QgsLayoutSize(2.8, 2.2, QgsUnitTypes.LayoutCentimeters))
        legend.refresh()
        
        layout.addLayoutItem(legend)

        #cambio el titulo
        #Titulo="Mi titulo"
        for i in layout.items():
             if isinstance(i, QgsLayoutItemLabel) and i.id() == "titulo":
                i.setText(Titulo)
                
        #label.setText("Hello world")
        #label.adjustSizeToText()
        #layout.addItem(label)

        
        #print(mapItem)
        #mapItem.setExtent(iface.mapCanvas().extent())
        #mapItem.attemptResize(QgsLayoutSize(410, 260, QgsUnitTypes.LayoutMillimeters))
        mapItem.zoomToExtent(iface.mapCanvas().extent())
        
        #layout = layoutmanager.layoutByName(plantilla) #Layout name
        #mapItem = QgsLayout.referenceMap()
        #mapItem.setExtent(iface.mapCanvas().extent())
        legendExporter=QgsLayoutExporter(layout)
        imageSettings=legendExporter.ImageExportSettings()
        imageSettings.cropToContents=True
        imageSettings.dpi=300
        imageSettings.pages=[0]
        exporter = QgsLayoutExporter(layout)
        exporter.exportToImage(rutapng,imageSettings )


    def plantillaapdf(self,plantilla,Titulo ,rutapdf):
        projectInstance = QgsProject.instance()
        layoutmanager = projectInstance.layoutManager()
        layout = layoutmanager.layoutByName("A3_H") #Layout name
        mapItem = layout.referenceMap()
        #meto la leyenda
        legend = QgsLayoutItemLegend(layout)
        legend.setTitle("Leyenda")
        
        legend.setLinkedMap(mapItem) # pass a QgsLayoutItemMap object
        #incluye todos los visibles
        #legend.setLegendFilterByMapEnabled(True)
        #todas las visibles de otra forma
        lyrs_to_add = [l for l in QgsProject().instance().layerTreeRoot().children() if l.isVisible()]
        #lyrs_to_add2 = [l.name() for l in QgsProject().instance().layerTreeRoot().children() if l.isVisible()]
        #print (lyrs_to_add2)
        lyrs_to_add2 = ["RUTA","M.U.P.","Consorcios","VVPP"]
        legend.setAutoUpdateModel(False)
        group = legend.model().rootGroup()
        group.clear()
        for l in lyrs_to_add:
            if l.name() in lyrs_to_add2:
                subgroup = group.addGroup(l.name())
                checked = l.checkedLayers()
                for c in checked:
                    #subgroup.addLayer(c)
                    group.addLayer(c)
                
        layout.addItem(legend)
        legend.adjustBoxSize()
        legend.attemptMove(QgsLayoutPoint(37, 2, QgsUnitTypes.LayoutCentimeters))
        #legend.attemptResize(QgsLayoutSize(2.8, 2.2, QgsUnitTypes.LayoutCentimeters))
        legend.refresh()
        
        layout.addLayoutItem(legend)

        #cambio el titulo
        #Titulo="Mi titulo"
        for i in layout.items():
             if isinstance(i, QgsLayoutItemLabel) and i.id() == "titulo":
                i.setText(Titulo)
                
        #label.setText("Hello world")
        #label.adjustSizeToText()
        #layout.addItem(label)

        
        #print(mapItem)
        #mapItem.setExtent(iface.mapCanvas().extent())
        #mapItem.attemptResize(QgsLayoutSize(410, 260, QgsUnitTypes.LayoutMillimeters))
        mapItem.zoomToExtent(iface.mapCanvas().extent())
        
        #layout = layoutmanager.layoutByName(plantilla) #Layout name
        #mapItem = QgsLayout.referenceMap()
        #mapItem.setExtent(iface.mapCanvas().extent())
        legendExporter=QgsLayoutExporter(layout)
        imageSettings=legendExporter.ImageExportSettings()
        imageSettings.cropToContents=True
        imageSettings.dpi=300
        imageSettings.pages=[0]
        exporter = QgsLayoutExporter(layout)
        exporter.exportToPdf(rutapdf, QgsLayoutExporter.PdfExportSettings() )

    #funcion que genera el plano a partir de la plantilla incluyendo las tablas para las rutas 4x4 
    def plantillaamapa2(self,plantilla,Titulo,tablamups,tablaconsorcios,tablavvpps):
        print("empiezo a configurar el layout")
        global ruta1
        projectInstance = QgsProject.instance()
        layoutmanager = projectInstance.layoutManager()
        #print(layoutmanager.layouts()) 
        layout = layoutmanager.layoutByName(plantilla)
        mapItem = layout.referenceMap()

        #meto la leyenda
        legend = QgsLayoutItemLegend(layout)
        legend.setTitle("Leyenda")
        legend.setLinkedMap(mapItem) # pass a QgsLayoutItemMap object
        #incluye todos los visibles
        #legend.setLegendFilterByMapEnabled(True)
        #todas las visibles de otra forma
        lyrs_to_add = [l for l in QgsProject().instance().layerTreeRoot().children() if l.isVisible()]
        #lyrs_to_add2 = [l.name() for l in QgsProject().instance().layerTreeRoot().children() if l.isVisible()]
        lyrs_to_add2 = ["RUTA","M.U.P.","Consorcios","VVPP"]
        legend.setAutoUpdateModel(False)
        group = legend.model().rootGroup()
        group.clear()
        for l in lyrs_to_add:
            if l.name() in lyrs_to_add2:
                subgroup = group.addGroup(l.name())
                checked = l.checkedLayers()
                for c in checked:
                    #subgroup.addLayer(c)
                    group.addLayer(c) 
        layout.addItem(legend)
        legend.adjustBoxSize()
        legend.attemptMove(QgsLayoutPoint(37, 2, QgsUnitTypes.LayoutCentimeters))
        #legend.attemptResize(QgsLayoutSize(2.8, 2.2, QgsUnitTypes.LayoutCentimeters))
        legend.refresh()
        layout.addLayoutItem(legend)
        
        #cambio el titulo
        for i in layout.items():
             if isinstance(i, QgsLayoutItemLabel) and i.id() == "titulo":
                i.setText(Titulo)
        mapItem.zoomToExtent(iface.mapCanvas().extent())
        
        #meto tabla mups
        if len(tablamups)>1:
            layout_html = QgsLayoutItemHtml(layout)
            html_frame = QgsLayoutFrame(layout, layout_html)
            html_frame.attemptSetSceneRect(QRectF(10, 10, 200, 200))
            html_frame.setFrameEnabled(True)
            layout_html.addFrame(html_frame)
            layout_html.setContentMode(QgsLayoutItemHtml.ManualHtml)#background-color: white ;
            estilo="<style> table { font-size: 9px; background-color:white; border-collapse: collapse;}tr {border: 2px solid black;bgcolor :white;}td {white-space: nowrap; padding: 1px;bgcolor :white;}td.bold {font-weight: bold;}td.gap {background-color:black;padding:1px;}</style>"      
            htmlcode = Table(tablamups[1:],header_row=tablamups[0])
            layout_html.setHtml(estilo+" "+str(htmlcode))
            layout_html.loadHtml()
            html_frame.setFrameStrokeWidth(QgsLayoutMeasurement(0.5, QgsUnitTypes.LayoutMillimeters))
            html_frame.setFrameStrokeColor(QColor("transparent"))
        #meto tabla de consorcios
        if len(tablaconsorcios)>1:
            layout_html2 = QgsLayoutItemHtml(layout)
            html_frame2 = QgsLayoutFrame(layout, layout_html2)
            html_frame2.attemptSetSceneRect(QRectF(10, 90, 150, 150))
            html_frame2.setFrameEnabled(True)
            layout_html2.addFrame(html_frame2)
            layout_html2.setContentMode(QgsLayoutItemHtml.ManualHtml)#background-color: white ;
            estilo="<style>body {font-family: sans-serif;font-size: 80%;} table { background-color:white; border-collapse: collapse;}tr {border: 2px solid black;bgcolor :white;}td {white-space: nowrap; padding: 1px;bgcolor :white;}td.bold {font-weight: bold;}td.gap {background-color:black;padding:1px;}</style>"      
            htmlcode = Table(tablaconsorcios[1:],header_row=tablaconsorcios[0])
            layout_html2.setHtml(estilo+" "+str(htmlcode))
            layout_html2.loadHtml()
            html_frame2.setFrameStrokeWidth(QgsLayoutMeasurement(0.5, QgsUnitTypes.LayoutMillimeters))
            html_frame2.setFrameStrokeColor(QColor("transparent"))
        #metotabla de vias pecuarias
        if len(tablavvpps)>1:
            layout_html3 = QgsLayoutItemHtml(layout)
            html_frame3 = QgsLayoutFrame(layout, layout_html3)
            html_frame3.attemptSetSceneRect(QRectF(100, 10, 200, 200))
            html_frame3.setFrameEnabled(True)
            layout_html3.addFrame(html_frame3)
            layout_html3.setContentMode(QgsLayoutItemHtml.ManualHtml)#background-color: white ;
            estilo="<style>body {font-family: sans-serif;font-size: 80%;} table { background-color:white; border-collapse: collapse;}tr {border: 2px solid black;bgcolor :white;}td {white-space: nowrap; padding: 1px;bgcolor :white;}td.bold {font-weight: bold;}td.gap {background-color:black;padding:1px;}</style>"      
            htmlcode = Table(tablavvpps[1:],header_row=tablavvpps[0])
            layout_html3.setHtml(estilo+" "+str(htmlcode))
            layout_html3.loadHtml()
            html_frame3.setFrameStrokeWidth(QgsLayoutMeasurement(0.5, QgsUnitTypes.LayoutMillimeters))
            html_frame3.setFrameStrokeColor(QColor("transparent"))
        #abre el mapa
        iface.openLayoutDesigner(layout)
        extent = ruta1.extent()
        extent.scale( 1.08 )
        #iface.mapCanvas().setExtent(extent)
        mapItem.zoomToExtent(extent)#(iface.mapCanvas().extent())




#funcion que crea el layout partiendo de los datos preexistentes
    def plantillaamapa(self,plantilla,Titulo,tablamups,tablaconsorcios,tablavvpps):
        projectInstance = QgsProject.instance()
        layoutmanager = projectInstance.layoutManager()
        print(projectLayoutManager.layouts())
        layout = layoutmanager.layoutByName("A3_H") #Layout name
        mapItem = layout.referenceMap()
        #meto la leyenda
        
        legend = QgsLayoutItemLegend(layout)
        legend.setTitle("Leyenda")
        legend.setLinkedMap(mapItem) # pass a QgsLayoutItemMap object
        #incluye todos los visibles
        #legend.setLegendFilterByMapEnabled(True)
        #todas las visibles de otra forma
        lyrs_to_add = [l for l in QgsProject().instance().layerTreeRoot().children() if l.isVisible()]
        #lyrs_to_add2 = [l.name() for l in QgsProject().instance().layerTreeRoot().children() if l.isVisible()]
        lyrs_to_add2 = ["RUTA","M.U.P.","Consorcios","VVPP"]
        legend.setAutoUpdateModel(False)
        group = legend.model().rootGroup()
        group.clear()
        for l in lyrs_to_add:
            if l.name() in lyrs_to_add2:
                subgroup = group.addGroup(l.name())
                checked = l.checkedLayers()
                for c in checked:
                    #subgroup.addLayer(c)
                    group.addLayer(c) 
        layout.addItem(legend)
        legend.adjustBoxSize()
        legend.attemptMove(QgsLayoutPoint(37, 2, QgsUnitTypes.LayoutCentimeters))
        #legend.attemptResize(QgsLayoutSize(2.8, 2.2, QgsUnitTypes.LayoutCentimeters))
        legend.refresh()
        layout.addLayoutItem(legend)
        #cambio el titulo
        for i in layout.items():
             if isinstance(i, QgsLayoutItemLabel) and i.id() == "titulo":
                i.setText(Titulo)
        mapItem.zoomToExtent(iface.mapCanvas().extent())

  #empiezo con las tablas
        
        #QgsProcessingAlgorithm.FlagNoThreading
        
        #project = QgsProject.instance()
        #layoutmanager = project.layoutManager()
        #layout = layoutmanager.layoutByName("hhh") 
        tablemup = QgsLayoutItemTextTable(layout)
        layout.addMultiFrame(tablemup)
        # Add columns
        interesantes=["ETIQUETA","NOMB_MONTE","TERMIN_MUN","PERTENENCI"]
        cabecera=["M.U.P.","NOMBRE","TERMINO MUNICIPAL","PERTENENCIA"]
        cols = [QgsLayoutTableColumn(),QgsLayoutTableColumn(),QgsLayoutTableColumn(),QgsLayoutTableColumn()]
        #pongo las cabeceras
    
        cols[0].setHeading("M.U.P.")
        cols[1].setHeading("NOMBRE")
        cols[2].setHeading("TERMINO MUNICIPAL")
        cols[3].setHeading("PERTENENCIA")
        tablemup.setColumns(cols)

        # Add only 1 row
        #tablemup.setContents(tablamups)#([['hello', 'world', '!',"ufdbdfnj"]])#(tablamups)#
        
        print(tablamups)

        # Base class for frame items, which form a layout multiframe item.
        frame = QgsLayoutFrame(layout, tablemup)
        frame.attemptResize(QgsLayoutSize(100, 100), True)
        tablemup.addFrame(frame)



    
        
#funcion que crea el informe en pdf con los datos que salen de la funcion anterior y el tipo de informe que saldra del dialogo, crea un pdf con todo, partiendo de imagen y tablas y textos
    """def creaelpdf(self,tipo,datosmontes,x1,y1,datosconsorcios,x2,y2,datosvvpps,x3,y3,imagen):
        from reportlab.platypus import SimpleDocTemplate,Paragraph,Table,TableStyle,Image
        from reportlab.lib.styles import getSampleStyleSheet
        from reportlab.lib import colors
        from reportlab.lib.pagesizes import A3,portrait,landscape
        from reportlab.lib.units import mm
        from reportlab.pdfgen import canvas
        from reportlab.pdfbase import pdfmetrics
        from reportlab.pdfbase.ttfonts import TTFont
        global carpetasalida
        global tablamontes
        global tablaconsorcios
        global tablavvpps
        
        c = canvas.Canvas(carpetasalida+"/salida.pdf", pagesize=landscape(A3))  # alternatively use bottomup=False
        width, height = A3
        #meto la imagen
        #img_data1=Image(imagen,height-20, width-20)#250*mm,250*mm)#los numeross son opcionales para determinar el tamaño
        ##img_data1.wrapOn(c, 200*mm,200*mm)
        #img_data1.drawOn(c,3*mm,5 * mm)
        
        #pdfmetrics.registerFont(TTFont('Verdana','Verdana.ttf'))
        #c.setFont('Verdana',8)
        #defino el estilo de la tabla
        tstyle=TableStyle([("GRID",(0,0),(-1,-1),.1,colors.black),
                           ("GRID",(0,0),(-1,0),.8,colors.black),
                           ('FONTSIZE', (0, 0), (-1, -1), 8),
                           ('BACKGROUND', (0,0), (-1,-1), colors.white),
                            #('FONTNAME', (0,0), (-1,0), 'Verdana'),#'Courier-Bold'),
                            ("ALIGN",(0,0),(-1,-1),"CENTER"),
                            ("VALIGN",(0,0),(-1,-1),"MIDDLE")])
        #hago la tabla de montes
        data = tablamontes
        t=Table(data)
        t.setStyle(tstyle)
        t.wrapOn(c, width, height)
        t.drawOn(c, int(x1)*mm, int(y1)*mm)#10,5
        #tabla de consorcios
        data = tablaconsorcios
        print (data)
        t2=Table(data)
        t2.setStyle(tstyle)
        t2.wrapOn(c, width, height)
        t2.drawOn(c, int(x2)*mm, int(y2)*mm)#10,250
        #tabla de vvpp
        data = tablavvpps
        print (data)
        t3=Table(data)
        t3.setStyle(tstyle)
        t3.wrapOn(c, width, height)
        t3.drawOn(c, int(x3)*mm, int(y3)*mm)    #250,5    
        #aqui mete un texto
        styles = getSampleStyleSheet()    
        #ptext = "This is an example."
        #p = Paragraph(ptext, style=styles["Normal"])
        #p.wrapOn(c, 50*mm, 50*mm)  # size of 'textbox' for linebreaks etc.
        #p.drawOn(c, 0*mm, 0*mm)    # position of text / where to draw
        
        c.save()
        """




    
    
#funcion que crea el informe en pdf con los datos que salen de la funcion anterior y el tipo de informe que saldra del dialogo, crea un pdf con todo, partiendo de otro pdf, y encima poniendo imagen y tablas y textos
    def creaelpdf(self,tipo,datosmontes,x1,y1,datosconsorcios,x2,y2,datosvvpps,x3,y3,pdfbase):
        
        global carpetasalida
        global tablamontes
        global tablaconsorcios
        global tablavvpps

        
        packet = io.BytesIO()
        # create a new PDF with Reportlab
        c = canvas.Canvas(packet, pagesize=landscape(A3))  # alternatively use bottomup=False
        width, height = A3
        #meto la imagen
        #img_data1=Image(imagen,height-20, width-20)#250*mm,250*mm)#los numeross son opcionales para determinar el tamaño
        ##img_data1.wrapOn(c, 200*mm,200*mm)
        #img_data1.drawOn(c,3*mm,5 * mm)


        
        #pdfmetrics.registerFont(TTFont('Verdana','Verdana.ttf'))
        #c.setFont('Verdana',8)
        #defino el estilo de la tabla
        tstyle=TableStyle([("GRID",(0,0),(-1,-1),.1,colors.black),
                           ("GRID",(0,0),(-1,0),.8,colors.black),
                           ('FONTSIZE', (0, 0), (-1, -1), 8),
                           ('BACKGROUND', (0,0), (-1,-1), colors.white),
                            #('FONTNAME', (0,0), (-1,0), 'Verdana'),#'Courier-Bold'),
                            ("ALIGN",(0,0),(-1,-1),"CENTER"),
                            ("VALIGN",(0,0),(-1,-1),"MIDDLE")])
        #hago la tabla de montes
        data = tablamontes
        print (data)
        print(len(data))
        t=Table(data)
        t.setStyle(tstyle)
        t.wrapOn(c, width, height)
        t.drawOn(c, int(x1)*mm, int(y1)*mm)#10,5
        
        #tabla de consorcios
        data = tablaconsorcios
        if len(data)>1:
            print (data)
            print(len(data))
            t2=Table(data)
            t2.setStyle(tstyle)
            t2.wrapOn(c, width, height)
            t2.drawOn(c, int(x2)*mm, int(y2)*mm)#10,250

        #tabla de vvpp
        data = tablavvpps
        print (data)
        
        print(len(data))
        t3=Table(data)
        t3.setStyle(tstyle)
        t3.wrapOn(c, width, height)
        t3.drawOn(c, int(x3)*mm, int(y3)*mm)    #250,5    

        #aqui mete un texto
        styles = getSampleStyleSheet()    
        #ptext = "This is an example."
        #p = Paragraph(ptext, style=styles["Normal"])
        #p.wrapOn(c, 50*mm, 50*mm)  # size of 'textbox' for linebreaks etc.
        #p.drawOn(c, 0*mm, 0*mm)    # position of text / where to draw

        

        c.save()


        #move to the beginning of the StringIO buffer
        packet.seek(0)
        new_pdf = PdfFileReader(packet)
        # read your existing PDF
        existing_pdf = PdfFileReader(open(pdfbase, "rb"))
        output = PdfFileWriter()
        # add the "watermark" (which is the new pdf) on the existing page
        page = existing_pdf.getPage(0)
        page.mergePage(new_pdf.getPage(0))
        output.addPage(page)
        # finally, write "output" to a real file
        outputStream = open(carpetasalida+"/salida.pdf", "wb")
        output.write(outputStream)
        
        outputStream.close()
        



    
    #desde aqui la ventana de cambios de cultivo:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    def pinchoenprovincia(self):
        global almacen
        global almacen0
        self.dlg.cbMUN.clear()
        self.dlg.cbMUN.setCurrentIndex(0)
        print("1 cojo la provincia seleccionada en el combo")
        provincias=[["","00"],["Avila","05"],["Burgos","09"],["León","24"],["Palencia","34"],["Salamanca","37"],["Segovia","40"],["Soria","42"],["Valladolid","47"],["Zamora","49"]]
        indpro=self.dlg.cbPRO.currentIndex()
        provincia=str("{:02d}".format(int((provincias[int(indpro)][1]))))
        print ("escribo la provincia en el almacen")
        almacen[0]=provincia

        #para ver si tengo que rellenar las comarcas
        print ("leo del almacen si true o false y lo pongo en pantalla")
        print ("lacabo de pinchar en provincia")
        if almacen[1]=="False":
            print("1.1 no tengo selecionado que use la comarca")
            self.dlg.cbMUN.clear()
            self.dlg.cbMUN.setCurrentIndex(0)
            self.dlg.mycheckbox2.setChecked (False)
            usarcomarca=False
            almacen[2]=""
            almacen[3]=[]
            #ahora deberia rellenar los municipios de la cache o no
            if almacen[0]==almacen0[0] and almacen0[1]=="False":
                print("1.1.1 la provincia es la misma dela cache y no tengo que mirar las comarcas, asi que pongo los municipios de la cahce")
                #la lista de municipios que tengo de la cache es la buena
                municipios=almacen[4]
                #anado un elemneto enblanco en el desplegable
                self.dlg.cbMUN.addItem("" ) 
                for element in municipios:
                    self.dlg.cbMUN.addItem( element[0])

            else:
                municipios=[]
                print("1.1.2 no tengo selecionado que use la comarca y la provincia es distinta de la de la cache asi que tengo que leer la capa de munciipios")
                #tengo que sacar los municipios de la capa
                print("tengo que leer todo el shp de municipios")
                #para evitar problemas con la codificacion de los shapes con los municipios y las tildes  ##OJO######
                #QSettings().setValue("/qgis/ignoreShapeEncoding", False)
                #selecciono la ruta capa con todos los municipios del sigpac****************************************************************************************************************************
                layerlista = QgsVectorLayer(rutaarchivomunicipiossigpac, 'Municipios Sigpac', 'ogr')
                idpro = layerlista.dataProvider().fieldNameIndex('C_PROVINCI')
                idTM =layerlista.dataProvider().fieldNameIndex('D_NOMBRE')
                idmun=  layerlista.dataProvider().fieldNameIndex('C_PROVMUN')
                feats = [ feat for feat in layerlista.getFeatures() ]
                for feature in feats:
                    lista=[]
                    #filtro para meter solo los municipios de la provincia que me interesa
                    if str(feature.attributes()[idpro])==almacen[0]:  #antes ponia pro, tengo que analizar que sea la que tengo seleccionada, no la del txt
                        lista=[feature.attributes()[idTM],feature.attributes()[idpro], feature.attributes()[idmun]]
                        municipios.append(lista)
                #ordeno por el primer elemento
                municipios.sort(key=lambda x: x[2])
                #anado un elemneto enblanco en el desplegable
                self.dlg.cbMUN.addItem("" ) 
                for element in municipios:
                    self.dlg.cbMUN.addItem( element[0])
                almacen[4]=municipios
                almacen[2]=""
                almacen[3]=[]
                
            
        else:
            print("1.2")
            usarcomarca=True
            almacen[1]="True"
            self.dlg.mycheckbox2.setChecked (True)
            #relleno las comarcas
            #si la provincia es la del cache
            if almacen[0]==almacen0[0]:
                print("1.2.1")
                #para rellenar las comarcas 
                comarca=almacen[2]
                comarcas=almacen0[3]
                print("lo limpio")
                self.dlg.cbCOM.clear()
                #anado un elemneto enblanco en el desplegable
                print("Estoy cambaido la comarca porque he cambiado la provincia.")
                self.dlg.cbCOM.addItem("") 
                for element in comarcas:
                    self.dlg.cbCOM.addItem(element)#[0])
                #ahora tendre que tocar en una comarca para despues poner los municipios correspondientes. eso es otro cantar
                    
            else:
                print("1.2.2")
                #relleno las comarcas busscando en la capa shp
                self.dlg.cbCOM.setCurrentIndex(0)
                self.dlg.cbCOM.clear()
                #tengo que leer todos los municipios para sacar las comarcas de esa provincia
                print("tengo que leer todo el shp de municipios.......................")
                #para evitar problemas con la codificacion de los shapes con los municipios y las tildes  ##OJO######
                QSettings().setValue("/qgis/ignoreShapeEncoding", False)
                #selecciono la ruta capa con todos los municipios del sigpac****************************************************************************************************************************
                layerlista = QgsVectorLayer(rutaarchivomunicipiossigpac, 'Municipios Sigpac', 'ogr')
                #para rellenar el combo de comarcas
                comarcas=[]
                feats = [ feat for feat in layerlista.getFeatures() ]
                idpro = layerlista.dataProvider().fieldNameIndex('C_PROVINCI')
                idCOM =layerlista.dataProvider().fieldNameIndex('COMARCA')
                idmun=  layerlista.dataProvider().fieldNameIndex('C_PROVMUN')
                for feature in feats:
                    #filtro para meter solo las comarcas de la provincia que me interesa
                    if str("{:02d}".format(int((feature.attributes()[idpro]))))==almacen[0]:#antes ponia pro
                        elemento=feature.attributes()[idCOM]
                        if elemento not in comarcas:
                            comarcas.append(elemento)
                #ordeno por el primer elemento
                comarcas.sort(key=lambda x: x[0]) 
                #anado un elemneto enblanco en el desplegable
                self.dlg.cbCOM.addItem("" ) 
                for element in comarcas:
                    self.dlg.cbCOM.addItem( element)
                almacen[3]=comarcas
                almacen[2]=""
                almacen[4]=[]

                #por aqui he acabado, tendre que tocar en municipio
                
                
        
    def pinchoencomarca(self):
        global almacen
        global almacen0
        self.dlg.cbMUN.clear()
        self.dlg.cbMUN.setCurrentIndex(0)
        #lo unico que tengo que hacer es rellenar los municipios
        #saco que comarca he seleccionado
        comarcas=almacen[3]
        indcom=self.dlg.cbCOM.currentIndex()
        comarca=str(comarcas[int(indcom)-1])
        print ("2. comarca seleccionada en el combo",comarca)
        almacen[2]=comarca

        #si la comarca es la del almacen0, entonces solo tengo que leer los municipios del almacen0
        if almacen[2]==almacen0[2]:
            print("2.1")
            municipios=almacen0[4]
        #tengo que sacar los municipios de la capa
        else:
            print("2.2 tengo que leer todo el shp de municipios")
            #para evitar problemas con la codificacion de los shapes con los municipios y las tildes  ##OJO######
            QSettings().setValue("/qgis/ignoreShapeEncoding", False)
            #selecciono la ruta capa con todos los municipios del sigpac****************************************************************************************************************************
            layerlista = QgsVectorLayer(rutaarchivomunicipiossigpac, 'Municipios Sigpac', 'ogr')
            idpro = layerlista.dataProvider().fieldNameIndex('C_PROVINCI')
            idCOM = layerlista.dataProvider().fieldNameIndex('COMARCA')
            idTM =layerlista.dataProvider().fieldNameIndex('D_NOMBRE')
            idmun=  layerlista.dataProvider().fieldNameIndex('C_PROVMUN')
            feats = [ feat for feat in layerlista.getFeatures() ]
            municipios=[]
            for feature in feats:
                lista=[]
                #filtro para meter solo los municipios de la provincia que me interesa
                if str(feature.attributes()[idCOM])==almacen[2]:  #antes ponia pro, tengo que analizar que sea la que tengo seleccionada, no la del txt
                    lista=[feature.attributes()[idTM],feature.attributes()[idpro], feature.attributes()[idmun]]
                    municipios.append(lista)
            #ordeno por el primer elemento
            municipios.sort(key=lambda x: x[2])
            #anado un elemneto enblanco en el desplegable
        self.dlg.cbMUN.addItem("" ) 
        for element in municipios:
            self.dlg.cbMUN.addItem( element[0])
        almacen[4]=municipios
        
        
        
        #ssi no tengo que leer la capa
    def pinchoenusarcomarca(self):
        
        global almacen
        global almacen0

        print("3. he vaciado los municipios y comarcas")
        self.dlg.cbCOM.setCurrentIndex(0)
        self.dlg.cbCOM.clear()
        self.dlg.cbMUN.setCurrentIndex(0)
        self.dlg.cbMUN.clear()
        if self.dlg.mycheckbox2.isChecked():
            print("3.1")
            almacen[1]="True"
            almacen[2]=""
            #debo rellenar las comarcas de esa provincia.
            #si la provincia es la del almacen0, cojo esas comarcas y las meto al combo
            provincia=almacen[0]
            #para rellenar las comarcas
            if almacen[0]==almacen0[0]:
                print("3.1.1 provincia del almacen0")
                if almacen0[3] ==['']:
                    
                    #almacen[3]
                    #tendre que rellenar las comarcas como siempre
                    print("3.1.1.1 tengo que leer todo el shp de municipios")
                    #para evitar problemas con la codificacion de los shapes con los municipios y las tildes  ##OJO######
                    QSettings().setValue("/qgis/ignoreShapeEncoding", False)
                    #selecciono la ruta capa con todos los municipios del sigpac****************************************************************************************************************************
                    layerlista = QgsVectorLayer(rutaarchivomunicipiossigpac, 'Municipios Sigpac', 'ogr')
                    #para rellenar el combo de comarcas
                    comarcas=[]
                    feats = [ feat for feat in layerlista.getFeatures() ]
                    idpro = layerlista.dataProvider().fieldNameIndex('C_PROVINCI')
                    idCOM =layerlista.dataProvider().fieldNameIndex('COMARCA')
                    idmun=  layerlista.dataProvider().fieldNameIndex('C_PROVMUN')
                    for feature in feats:
                        #filtro para meter solo las comarcas de la provincia que me interesa
                        if str("{:02d}".format(int((feature.attributes()[idpro]))))==almacen[0]:#antes ponia pro
                            elemento=feature.attributes()[idCOM]
                            if elemento not in comarcas:
                                comarcas.append(elemento)
                    #ordeno por el primer elemento
                    comarcas.sort(key=lambda x: x[0])
                    almacen[3]=comarcas
                else:
                    print("3.1.1.2")
                    comarcas=almacen0[3]
                #anado un elemneto enblanco en el desplegable
                self.dlg.cbCOM.addItem("") 
                for element in comarcas:
                    self.dlg.cbCOM.addItem(element)#[0])
                #ahora tendre que tocar en una comarca para despues poner los municipios correspondientes. eso es otro cantar
                    
            #si la provincia no es la del almacen busco todas las que coincidan en la capa con esa provincia        
            else:
                print("3.1.2")
                #tengo que leer todos los municipios para sacar las comarcas de esa provincia
                print("tengo que leer todo el shp de municipios")
                #para evitar problemas con la codificacion de los shapes con los municipios y las tildes  ##OJO######
                QSettings().setValue("/qgis/ignoreShapeEncoding", False)
                #selecciono la ruta capa con todos los municipios del sigpac****************************************************************************************************************************
                layerlista = QgsVectorLayer(rutaarchivomunicipiossigpac, 'Municipios Sigpac', 'ogr')
                #para rellenar el combo de comarcas
                comarcas=[]
                feats = [ feat for feat in layerlista.getFeatures() ]
                idpro = layerlista.dataProvider().fieldNameIndex('C_PROVINCI')
                idCOM =layerlista.dataProvider().fieldNameIndex('COMARCA')
                idmun=  layerlista.dataProvider().fieldNameIndex('C_PROVMUN')
                for feature in feats:
                    #filtro para meter solo las comarcas de la provincia que me interesa
                    if str("{:02d}".format(int((feature.attributes()[idpro]))))==almacen[0]:#antes ponia pro
                        elemento=feature.attributes()[idCOM]
                        if elemento not in comarcas:
                            comarcas.append(elemento)
                #ordeno por el primer elemento
                comarcas.sort(key=lambda x: x[0])  
                #anado un elemneto enblanco en el desplegable
                self.dlg.cbCOM.addItem("" ) 
                for element in comarcas:
                    self.dlg.cbCOM.addItem( element)
                almacen[3]=comarcas
        else:#si no esta checkeado el usar las comarcas
            print("3.2")
            almacen[1]="False"
            almacen[2]=""
            almacen[3]=[]
            almacen[4]=[]
            #deberia rellenar los municipios de la provincia seleccionada
            #si la provincia seleccionada es la del cache, solo tengo que cogerlo de la cache

            

            print("si solo quito el usar comarcas y no tengo la provincia orignal voy por aqui")
            #tengo que sacar los municipios de la capa
            print("tengo que leer todo el shp de municipios")
            #para evitar problemas con la codificacion de los shapes con los municipios y las tildes  ##OJO######
            QSettings().setValue("/qgis/ignoreShapeEncoding", False)
            #selecciono la ruta capa con todos los municipios del sigpac****************************************************************************************************************************
            layerlista = QgsVectorLayer(rutaarchivomunicipiossigpac, 'Municipios Sigpac', 'ogr')
            idpro = layerlista.dataProvider().fieldNameIndex('C_PROVINCI')
            idTM =layerlista.dataProvider().fieldNameIndex('D_NOMBRE')
            idmun=  layerlista.dataProvider().fieldNameIndex('C_PROVMUN')
            #idCOM=layerlista.dataProvider().fieldNameIndex('COMARCA')
            feats = [ feat for feat in layerlista.getFeatures() ]
            municipios=[]
            for feature in feats:
                lista=[]
                #filtro para meter solo los municipios de la provincia que me interesa
                if str(feature.attributes()[idpro])==almacen[0]:  #antes ponia pro, tengo que analizar que sea la que tengo seleccionada, no la del txt
                    lista=[feature.attributes()[idTM],feature.attributes()[idpro], feature.attributes()[idmun]]
                    municipios.append(lista)
            #ordeno por el primer elemento
            municipios.sort(key=lambda x: x[2])
            almacen[4]=municipios
            #anado un elemneto enblanco en el desplegable
            self.dlg.cbMUN.addItem("" ) 
            for element in municipios:
                self.dlg.cbMUN.addItem( element[0])


#empiezo con la serie de ortofotos a configurar el menu sigmena::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::.
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    def pinchoenprovincia3(self):
        global almacen
        global almacen0
        self.dlg.cbMUN_3.clear()
        self.dlg.cbMUN_3.setCurrentIndex(0)
        print("1 cojo la provincia seleccionada en el combo")
        provincias=[["","00"],["Avila","05"],["Burgos","09"],["León","24"],["Palencia","34"],["Salamanca","37"],["Segovia","40"],["Soria","42"],["Valladolid","47"],["Zamora","49"]]
        indpro=self.dlg.cbPRO_3.currentIndex()
        provincia=str("{:02d}".format(int((provincias[int(indpro)][1]))))
        print ("escribo la provincia en el almacen")
        almacen[0]=provincia

        #para ver si tengo que rellenar las comarcas
        print ("leo del almacen si true o false y lo pongo en pantalla")
        print ("lacabo de pinchar en provincia")
        if almacen[1]=="False":
            print("1.1 no tengo selecionado que use la comarca")
            self.dlg.cbMUN_3.clear()
            self.dlg.cbMUN_3.setCurrentIndex(0)
            self.dlg.mycheckbox3.setChecked (False)
            usarcomarca=False
            almacen[2]=""
            almacen[3]=[]
            #ahora deberia rellenar los municipios de la cache o no
            if almacen[0]==almacen0[0] and almacen0[1]=="False":
                print("1.1.1 la provincia es la misma dela cache y no tengo que mirar las comarcas, asi que pongo los municipios de la cahce")
                #la lista de municipios que tengo de la cache es la buena
                municipios=almacen[4]
                #anado un elemneto enblanco en el desplegable
                self.dlg.cbMUN_3.addItem("" ) 
                for element in municipios:
                    self.dlg.cbMUN_3.addItem( element[0])

            else:
                municipios=[]
                print("1.1.2 no tengo selecionado que use la comarca y la provincia es distinta de la de la cache asi que tengo que leer la capa de munciipios")
                #tengo que sacar los municipios de la capa
                print("tengo que leer todo el shp de municipios")
                #para evitar problemas con la codificacion de los shapes con los municipios y las tildes  ##OJO######
                #QSettings().setValue("/qgis/ignoreShapeEncoding", False)
                #selecciono la ruta capa con todos los municipios del sigpac****************************************************************************************************************************
                layerlista = QgsVectorLayer(rutaarchivomunicipiossigpac, 'Municipios Sigpac', 'ogr')
                idpro = layerlista.dataProvider().fieldNameIndex('C_PROVINCI')
                idTM =layerlista.dataProvider().fieldNameIndex('D_NOMBRE')
                idmun=  layerlista.dataProvider().fieldNameIndex('C_PROVMUN')
                feats = [ feat for feat in layerlista.getFeatures() ]
                for feature in feats:
                    lista=[]
                    #filtro para meter solo los municipios de la provincia que me interesa
                    if str(feature.attributes()[idpro])==almacen[0]:  #antes ponia pro, tengo que analizar que sea la que tengo seleccionada, no la del txt
                        lista=[feature.attributes()[idTM],feature.attributes()[idpro], feature.attributes()[idmun]]
                        municipios.append(lista)
                #ordeno por el primer elemento
                municipios.sort(key=lambda x: x[2])
                #anado un elemneto enblanco en el desplegable
                self.dlg.cbMUN_3.addItem("" ) 
                for element in municipios:
                    self.dlg.cbMUN_3.addItem( element[0])
                almacen[4]=municipios
                almacen[2]=""
                almacen[3]=[]
                
            
        else:
            print("1.2")
            usarcomarca=True
            almacen[1]="True"
            self.dlg.mycheckbox3.setChecked (True)
            #relleno las comarcas
            #si la provincia es la del cache
            if almacen[0]==almacen0[0]:
                print("1.2.1")
                #para rellenar las comarcas 
                comarca=almacen[2]
                comarcas=almacen0[3]
                print("lo limpio")
                self.dlg.cbCOM_3.clear()
                #anado un elemneto enblanco en el desplegable
                print("Estoy cambaido la comarca porque he cambiado la provincia.")
                self.dlg.cbCOM_3.addItem("") 
                for element in comarcas:
                    self.dlg.cbCOM_3.addItem(element)#[0])
                #ahora tendre que tocar en una comarca para despues poner los municipios correspondientes. eso es otro cantar
                    
            else:
                print("1.2.2")
                #relleno las comarcas busscando en la capa shp
                self.dlg.cbCOM_3.setCurrentIndex(0)
                self.dlg.cbCOM_3.clear()
                #tengo que leer todos los municipios para sacar las comarcas de esa provincia
                print("tengo que leer todo el shp de municipios.......................")
                #para evitar problemas con la codificacion de los shapes con los municipios y las tildes  ##OJO######
                QSettings().setValue("/qgis/ignoreShapeEncoding", False)
                #selecciono la ruta capa con todos los municipios del sigpac****************************************************************************************************************************
                layerlista = QgsVectorLayer(rutaarchivomunicipiossigpac, 'Municipios Sigpac', 'ogr')
                #para rellenar el combo de comarcas
                comarcas=[]
                feats = [ feat for feat in layerlista.getFeatures() ]
                idpro = layerlista.dataProvider().fieldNameIndex('C_PROVINCI')
                idCOM =layerlista.dataProvider().fieldNameIndex('COMARCA')
                idmun=  layerlista.dataProvider().fieldNameIndex('C_PROVMUN')
                for feature in feats:
                    #filtro para meter solo las comarcas de la provincia que me interesa
                    if str("{:02d}".format(int((feature.attributes()[idpro]))))==almacen[0]:#antes ponia pro
                        elemento=feature.attributes()[idCOM]
                        if elemento not in comarcas:
                            comarcas.append(elemento)
                #ordeno por el primer elemento
                comarcas.sort(key=lambda x: x[0]) 
                #anado un elemneto enblanco en el desplegable
                self.dlg.cbCOM_3.addItem("" ) 
                for element in comarcas:
                    self.dlg.cbCOM_3.addItem( element)
                almacen[3]=comarcas
                almacen[2]=""
                almacen[4]=[]

                #por aqui he acabado, tendre que tocar en municipio
                
                
        
    def pinchoencomarca3(self):
        global almacen
        global almacen0
        self.dlg.cbMUN_3.clear()
        self.dlg.cbMUN_3.setCurrentIndex(0)
        #lo unico que tengo que hacer es rellenar los municipios
        #saco que comarca he seleccionado
        comarcas=almacen[3]
        indcom=self.dlg.cbCOM_3.currentIndex()
        comarca=str(comarcas[int(indcom)-1])
        print ("2. comarca seleccionada en el combo",comarca)
        almacen[2]=comarca

        #si la comarca es la del almacen0, entonces solo tengo que leer los municipios del almacen0
        if almacen[2]==almacen0[2]:
            print("2.1")
            municipios=almacen0[4]
        #tengo que sacar los municipios de la capa
        else:
            print("2.2 tengo que leer todo el shp de municipios")
            #para evitar problemas con la codificacion de los shapes con los municipios y las tildes  ##OJO######
            QSettings().setValue("/qgis/ignoreShapeEncoding", False)
            #selecciono la ruta capa con todos los municipios del sigpac****************************************************************************************************************************
            layerlista = QgsVectorLayer(rutaarchivomunicipiossigpac, 'Municipios Sigpac', 'ogr')
            idpro = layerlista.dataProvider().fieldNameIndex('C_PROVINCI')
            idCOM = layerlista.dataProvider().fieldNameIndex('COMARCA')
            idTM =layerlista.dataProvider().fieldNameIndex('D_NOMBRE')
            idmun=  layerlista.dataProvider().fieldNameIndex('C_PROVMUN')
            feats = [ feat for feat in layerlista.getFeatures() ]
            municipios=[]
            for feature in feats:
                lista=[]
                #filtro para meter solo los municipios de la provincia que me interesa
                if str(feature.attributes()[idCOM])==almacen[2]:  #antes ponia pro, tengo que analizar que sea la que tengo seleccionada, no la del txt
                    lista=[feature.attributes()[idTM],feature.attributes()[idpro], feature.attributes()[idmun]]
                    municipios.append(lista)
            #ordeno por el primer elemento
            municipios.sort(key=lambda x: x[2])
            #anado un elemneto enblanco en el desplegable
        self.dlg.cbMUN_3.addItem("" ) 
        for element in municipios:
            self.dlg.cbMUN_3.addItem( element[0])
        almacen[4]=municipios
        
        
        
        #ssi no tengo que leer la capa
    def pinchoenusarcomarca3(self):
        
        global almacen
        global almacen0

        print("3. he vaciado los municipios y comarcas")
        self.dlg.cbCOM_3.setCurrentIndex(0)
        self.dlg.cbCOM_3.clear()
        self.dlg.cbMUN_3.setCurrentIndex(0)
        self.dlg.cbMUN_3.clear()
        if self.dlg.mycheckbox3.isChecked():
            print("3.1")
            almacen[1]="True"
            almacen[2]=""
            #debo rellenar las comarcas de esa provincia.
            #si la provincia es la del almacen0, cojo esas comarcas y las meto al combo
            provincia=almacen[0]
            #para rellenar las comarcas
            if almacen[0]==almacen0[0]:
                print("3.1.1 provincia del almacen0")
                if almacen0[3] ==['']:
                    
                    #almacen[3]
                    #tendre que rellenar las comarcas como siempre
                    print("3.1.1.1 tengo que leer todo el shp de municipios")
                    #para evitar problemas con la codificacion de los shapes con los municipios y las tildes  ##OJO######
                    QSettings().setValue("/qgis/ignoreShapeEncoding", False)
                    #selecciono la ruta capa con todos los municipios del sigpac****************************************************************************************************************************
                    layerlista = QgsVectorLayer(rutaarchivomunicipiossigpac, 'Municipios Sigpac', 'ogr')
                    #para rellenar el combo de comarcas
                    comarcas=[]
                    feats = [ feat for feat in layerlista.getFeatures() ]
                    idpro = layerlista.dataProvider().fieldNameIndex('C_PROVINCI')
                    idCOM =layerlista.dataProvider().fieldNameIndex('COMARCA')
                    idmun=  layerlista.dataProvider().fieldNameIndex('C_PROVMUN')
                    for feature in feats:
                        #filtro para meter solo las comarcas de la provincia que me interesa
                        if str("{:02d}".format(int((feature.attributes()[idpro]))))==almacen[0]:#antes ponia pro
                            elemento=feature.attributes()[idCOM]
                            if elemento not in comarcas:
                                comarcas.append(elemento)
                    #ordeno por el primer elemento
                    comarcas.sort(key=lambda x: x[0])
                    almacen[3]=comarcas
                else:
                    print("3.1.1.2")
                    comarcas=almacen0[3]
                #anado un elemneto enblanco en el desplegable
                self.dlg.cbCOM.addItem("") 
                for element in comarcas:
                    self.dlg.cbCOM_3.addItem(element)#[0])
                #ahora tendre que tocar en una comarca para despues poner los municipios correspondientes. eso es otro cantar
                    
            #si la provincia no es la del almacen busco todas las que coincidan en la capa con esa provincia        
            else:
                print("3.1.2")
                #tengo que leer todos los municipios para sacar las comarcas de esa provincia
                print("tengo que leer todo el shp de municipios")
                #para evitar problemas con la codificacion de los shapes con los municipios y las tildes  ##OJO######
                QSettings().setValue("/qgis/ignoreShapeEncoding", False)
                #selecciono la ruta capa con todos los municipios del sigpac****************************************************************************************************************************
                layerlista = QgsVectorLayer(rutaarchivomunicipiossigpac, 'Municipios Sigpac', 'ogr')
                #para rellenar el combo de comarcas
                comarcas=[]
                feats = [ feat for feat in layerlista.getFeatures() ]
                idpro = layerlista.dataProvider().fieldNameIndex('C_PROVINCI')
                idCOM =layerlista.dataProvider().fieldNameIndex('COMARCA')
                idmun=  layerlista.dataProvider().fieldNameIndex('C_PROVMUN')
                for feature in feats:
                    #filtro para meter solo las comarcas de la provincia que me interesa
                    if str("{:02d}".format(int((feature.attributes()[idpro]))))==almacen[0]:#antes ponia pro
                        elemento=feature.attributes()[idCOM]
                        if elemento not in comarcas:
                            comarcas.append(elemento)
                #ordeno por el primer elemento
                comarcas.sort(key=lambda x: x[0])  
                #anado un elemneto enblanco en el desplegable
                self.dlg.cbCOM_3.addItem("" ) 
                for element in comarcas:
                    self.dlg.cbCOM_3.addItem( element)
                almacen[3]=comarcas
        else:#si no esta checkeado el usar las comarcas
            print("3.2")
            almacen[1]="False"
            almacen[2]=""
            almacen[3]=[]
            almacen[4]=[]
            #deberia rellenar los municipios de la provincia seleccionada
            #si la provincia seleccionada es la del cache, solo tengo que cogerlo de la cache

            

            print("si solo quito el usar comarcas y no tengo la provincia orignal voy por aqui")
            #tengo que sacar los municipios de la capa
            print("tengo que leer todo el shp de municipios")
            #para evitar problemas con la codificacion de los shapes con los municipios y las tildes  ##OJO######
            QSettings().setValue("/qgis/ignoreShapeEncoding", False)
            #selecciono la ruta capa con todos los municipios del sigpac****************************************************************************************************************************
            layerlista = QgsVectorLayer(rutaarchivomunicipiossigpac, 'Municipios Sigpac', 'ogr')
            idpro = layerlista.dataProvider().fieldNameIndex('C_PROVINCI')
            idTM =layerlista.dataProvider().fieldNameIndex('D_NOMBRE')
            idmun=  layerlista.dataProvider().fieldNameIndex('C_PROVMUN')
            #idCOM=layerlista.dataProvider().fieldNameIndex('COMARCA')
            feats = [ feat for feat in layerlista.getFeatures() ]
            municipios=[]
            for feature in feats:
                lista=[]
                #filtro para meter solo los municipios de la provincia que me interesa
                if str(feature.attributes()[idpro])==almacen[0]:  #antes ponia pro, tengo que analizar que sea la que tengo seleccionada, no la del txt
                    lista=[feature.attributes()[idTM],feature.attributes()[idpro], feature.attributes()[idmun]]
                    municipios.append(lista)
            #ordeno por el primer elemento
            municipios.sort(key=lambda x: x[2])
            almacen[4]=municipios
            #anado un elemneto enblanco en el desplegable
            self.dlg.cbMUN_3.addItem("" ) 
            for element in municipios:
                self.dlg.cbMUN_3.addItem( element[0])
        

    


    def run(self):
        print ("paso por el run")
        
        global almacen
        global almacen0
        global rutaarchivomunicipiossigpac
        global rutacarpetarecintos
        global rutacache
        
       

        #lo primero leer la cache
        #para recuperar los datos de la ultima vez que se cerro el complemento
        print("0 inicio el run")
        print ("leo la cache.........................................................................................................")
        print("construyo el almecen que es una lista, se nutre de los datos de la cache, postseriormente modificados si pinchas en un combo o boton")
        
        #rutacache=os.path.join(QgsApplication.qgisSettingsDirPath(),r"python/plugins/informes/cache.txt")
        if os.path.isfile(rutacache) ==True:
            filecache = open(rutacache, "r")
            filecacheleido=filecache.readlines()
            #print (filecache)
            #print(filecacheleido)
            try:
                miprovincia= (filecacheleido[0].replace('\n',''))
                #print(miprovincia)
                usarcomarca= (filecacheleido[1].replace('\n',''))
                micomarca= (filecacheleido[2].replace('\n',''))
                miscomarcas=(filecacheleido[3].replace('\n','')).strip('][').split(',') #convierto una str en una list
                mismunicipios=ast.literal_eval((filecacheleido[4].replace('\n','')).replace(" [[","[[").replace("]] ","]]"))#.split(',')) #convierto una str en una list
                #print(mismunicipios)
                filecache.close()
            except:
                print("esta no encuentra el file cache")
                
        
        print("cache leida......................................................................................................................")
        almacen0[0]=miprovincia
        almacen0[1]=usarcomarca
        almacen0[2]=micomarca
        almacen0[3]=miscomarcas
        almacen0[4]=mismunicipios
        #hago una copia que no modificare para usar como cache, la 0 es la del txt
        almacen[0]=miprovincia
        almacen[1]=usarcomarca
        almacen[2]=micomarca
        almacen[3]=miscomarcas
        almacen[4]=mismunicipios
        #almacen[5]=indmun



        canvas = self.iface.mapCanvas()
        #para evitar problemas con la codificacion de los shapes con los municipios y las tildes  ##OJO######
        QSettings().setValue("/qgis/ignoreShapeEncoding", False)

        #selecciono la ruta capa con todos los municipios del sigpac****************************************************************************************************************************
        
        layerlista = QgsVectorLayer(rutaarchivomunicipiossigpac, 'Municipios Sigpac', 'ogr')
        time.sleep(1)
        #layer = iface.activeLayer()

        #para los cambios de cultivo::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::.
        
        #Relleno el Combo con als provincias
        print("empiezo a rellenar los desplegables, las provincias del almacen ")
        self.dlg.cbPRO.clear()
        provincias=[["","00"],["Avila","05"],["Burgos","09"],["León","24"],["Palencia","34"],["Salamanca","37"],["Segovia","40"],["Soria","42"],["Valladolid","47"],["Zamora","49"]]
        for elemento in provincias:
                self.dlg.cbPRO.addItem( elemento[0])
        #esto es para poner por defecto la provincia que tenga en el almacen
        lista2=[]
        for elemen in provincias:
            lista2.append(elemen[1])
        indice=lista2.index(almacen[0])
        print("indice de provincia dentro del run",indice)
        #pone la provincia en el combo que tienes en el txt.
        self.dlg.cbPRO.setCurrentIndex(indice)
        
        #para ver si tengo que rellenar las comarcas
        print ("leo del almacen si true o false y lo pongo en pantalla")
        if almacen[1]=="False":
            self.dlg.mycheckbox2.setChecked (False)
            usarcomarca=False
            almacen[1]="False"
            almacen[2]=""
            almacen[3]=[]
        else:
            usarcomarca=True
            almacen[1]="True"
            self.dlg.mycheckbox2.setChecked (True)
        
        
        #para rellenar las comarcas 
            
        print("paso a las comarcas, primero leo la que tengo en el almacen")
        comarca=almacen[2]
        comarcas=almacen[3]
        print("lo limpio")
        self.dlg.cbCOM.clear()
        #anado un elemneto enblanco en el desplegable
        print("Estoy en el run, dentro de lo que se abre la primera vez.")
        self.dlg.cbCOM.addItem("") 
        for element in comarcas:
            self.dlg.cbCOM.addItem(element)#[0])
        if almacen[1]=="True":
            #pongo el indice en la que diga la cache
            indice=comarcas.index(comarca)
            self.dlg.cbCOM.setCurrentIndex(indice+1)#lo que pone en la ventanita, que esta bien
        else:
            pass

        #relleno los municipios que tengo en la cache
        print ("leo los municipios del almacen")
        municipios=almacen[4]
        print("empiezo a rellenar el combo con los municipios")
        self.dlg.cbMUN.clear()

        #misdatos=ast.literal_eval(mismunicipios)
        #anado un elemneto enblanco en el desplegable de municipios
        self.dlg.cbMUN.addItem("" ) 
        for element in municipios:
            self.dlg.cbMUN.addItem(element[0])#( element[0])

        #dejo el puntero del municipio donde estaba si no he cambiado de provincia ni de comarca 
        if almacen[0]==almacen0[0] and almacen[1]==almacen0[1] and almacen[2]==almacen0[2]:
            self.dlg.cbMUN.setCurrentIndex(almacen[5])
            print("mismo municipio")
        else:
            self.dlg.cbMUN.setCurrentIndex(0)
            print("otro municipio")
            
#para la serie de ortofotos::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        #::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::.
        
        #Relleno el Combo con als provincias
        print("empiezo a rellenar los desplegables, las provincias del almacen ")
        self.dlg.cbPRO_3.clear()
        provincias=[["","00"],["Avila","05"],["Burgos","09"],["León","24"],["Palencia","34"],["Salamanca","37"],["Segovia","40"],["Soria","42"],["Valladolid","47"],["Zamora","49"]]
        for elemento in provincias:
                self.dlg.cbPRO_3.addItem( elemento[0])
        #esto es para poner por defecto la provincia que tenga en el almacen
        lista2=[]
        for elemen in provincias:
            lista2.append(elemen[1])
        indice=lista2.index(almacen[0])
        print("indice de provincia dentro del run",indice)
        #pone la provincia en el combo que tienes en el txt.
        self.dlg.cbPRO_3.setCurrentIndex(indice)
        
        #para ver si tengo que rellenar las comarcas
        print ("leo del almacen si true o false y lo pongo en pantalla")
        if almacen[1]=="False":
            self.dlg.mycheckbox3.setChecked (False)
            usarcomarca=False
            almacen[1]="False"
            almacen[2]=""
            almacen[3]=[]
        else:
            usarcomarca=True
            almacen[1]="True"
            self.dlg.mycheckbox3.setChecked (True)
        
        
        #para rellenar las comarcas 
            
        print("paso a las comarcas, primero leo la que tengo en el almacen")
        comarca=almacen[2]
        comarcas=almacen[3]
        print("lo limpio")
        self.dlg.cbCOM_3.clear()
        #anado un elemneto enblanco en el desplegable
        print("Estoy en el run, dentro de lo que se abre la primera vez.")
        self.dlg.cbCOM_3.addItem("") 
        for element in comarcas:
            self.dlg.cbCOM_3.addItem(element)#[0])
        if almacen[1]=="True":
            #pongo el indice en la que diga la cache
            indice=comarcas.index(comarca)
            self.dlg.cbCOM_3.setCurrentIndex(indice+1)#lo que pone en la ventanita, que esta bien
        else:
            pass

        #relleno los municipios que tengo en la cache
        print ("leo los municipios del almacen")
        municipios=almacen[4]
        print("empiezo a rellenar el combo con los municipios")
        self.dlg.cbMUN_3.clear()

        #misdatos=ast.literal_eval(mismunicipios)
        #anado un elemneto enblanco en el desplegable de municipios
        self.dlg.cbMUN_3.addItem("" ) 
        for element in municipios:
            self.dlg.cbMUN_3.addItem(element[0])#( element[0])

        #dejo el puntero del municipio donde estaba si no he cambiado de provincia ni de comarca 
        if almacen[0]==almacen0[0] and almacen[1]==almacen0[1] and almacen[2]==almacen0[2]:
            self.dlg.cbMUN_3.setCurrentIndex(almacen[5])
            print("mismo municipio")
        else:
            self.dlg.cbMUN_3.setCurrentIndex(0)
            print("otro municipio")
            
        
     
        
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            
       # show the dialog
        self.dlg.show()
        
        #self.dlg.pushButton_select_path.clicked.connect(self.select_laz_folder)

        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            archivo=""
            print("he presionado en ok")
            index = self.dlg.tab.currentIndex()#0 rutas 1 cambioscultivo
            #print(index)
            if index==0:
                print("estamos en rutas")
                vl = iface.activeLayer()
                #tendra que ser una capa de lineas
                #ruta=r'R:/SIGMENA/prueba/2020/03/12/numancia4x4/Ruta1.shp'
                ruta=self.dlg.lineEdit_ruta.text()
                Titulo=self.dlg.lineEdit_titulo.text()
                #plantilla=self.dlg.lineEdit_plantilla.text()
                mup=r'O:/sigmena/carto/PROPIEDA/MONTES/PERTENEN/Mup_etrs89.shp'
                #mup="O:/sigmena/carto/PROPIEDA/MONTES/PERTENEN/catalogo/42_mup_catalogo_ex_etrs89.shp"
                vvpp=r"O:/sigmena/carto/VVPP/REDVVPP/42_vvpp_etrs89.shp"
                carpetasalida= '/'.join(ruta.split("/")[:-1])+"/capas_intermedias"
                if not os.path.exists(carpetasalida):
                    os.mkdir(carpetasalida)
                rutapdf=carpetasalida+"/salida0.pdf"

                #vvpp
                consorcio=r"O:/sigmena/carto/PROPIEDA/MONTES/CONTRATO/Consorcios_etrs89.shp"
                #capasdecorte=[mup]
                #for capa in capasdecorte:
                self.cruce(ruta,mup)
                self.cruce(ruta,consorcio)
                self.cruce(ruta,vvpp)
                self.hagomapa(ruta)
                #self.plantillaapdf("A3_H",Titulo,rutapdf)
                global tablaconsorcios
                global tablamontes
                global tablavvpps
                global plantilla
                self.plantillaamapa2(plantilla,Titulo,tablamontes,tablaconsorcios,tablavvpps) 
                #self.plantillaamapa("A3_H",Titulo,tablamontes,tablaconsorcios,tablavvpps)            

                #self.creaelpdf("1",tablamontes,x1,y1,tablaconsorcios,x2,y2,tablavvpps,x3,y3,rutapdf)
            if index==1:
                global munic
                global polig
                global parce
                global extension
                print("CAMBIOS DE CULTIVO")
                #cargo la capa de la parcela
                comarcas=almacen[3]
                municipios=almacen[4]
                usarcomarca=almacen[1]
                print("0.1 pulso en ok")
                
                archivo=""
                #cojo lo que hay en cada recuadro o desplegable aqui variables que luego deberan estar en la cajita   primero los indicesOJO
                indmun=self.dlg.cbMUN.currentIndex()
                indpro=self.dlg.cbPRO.currentIndex()
                indcom=self.dlg.cbCOM.currentIndex()
                #saco los valores correspondientes
                try:
                    comarca=str(comarcas[int(indcom)-1])
                except:
                    comarca=""
                pro=str(provincias[int(indpro)][1])
                mun=self.dlg.MUN.text()##displayText()
                pol=self.dlg.POL.text()##displayText()
                polig=pol
                par=self.dlg.PAR.text()##displayText()
                parce=par
 
             
                #si no hay nada en la casilla de municipio, coge la informacion del desplegable mun es un numero del estilo 42001
                if mun == "":
                    mun=str(municipios[int(indmun)-1][2])#coge la ultima columna de mis datos
                    munic=str(municipios[int(indmun)-1][0])
                else:
                    mun=str("{:02d}".format(int(pro)))+str("{:03d}".format(int(mun)))
                print("mun",mun)
                print("indmun",indmun)
                almacen[5]=indmun

               
                rutacache=os.path.join(QgsApplication.qgisSettingsDirPath(),r"python\plugins\informes\cache.txt")
                #lo escribo en el txt, mavhacando lo que ya tenia
                f=open(rutacache,"w")
                escribir=str(pro)+"\n"+str(usarcomarca)+"\n"+comarca+"\n"+str(comarcas).replace("'","").replace(", ",",")+"\n"+str(municipios)+"\n"
                f.write(escribir)
                f.close()

                QgsProject.instance().layerTreeRegistryBridge().setLayerInsertionPoint( QgsProject.instance().layerTreeRoot(), 0 )
                

                canvas.freeze(True)


                caparecintos=os.path.join(rutacarpetarecintos,"RECFE21_"+mun+".shp")
                layer = QgsVectorLayer(caparecintos, mun, 'ogr')
                #QgsProject.instance().addMapLayers([layer])

                
                layer.selectByExpression("\"C_POLIGONO\" = '{}' ".format(pol)+" AND \"C_PARCELA\" = '{}'".format(par),QgsVectorLayer.SetSelection)
                #creo la nueva capa con la seleccion
                #output_path=archivo3
                #ojo esto es lo que acabo de cambiar
                #QgsVectorFileWriter.writeAsVectorFormat(layer, output_path, "CP120", layer.crs(), "ESRI Shapefile", onlySelected=True)
                #lyr9=QgsVectorLayer(output_path,"Sigpac_"+str(mun)+"_"+str(pol)+"_"+str(par),"ogr")
                lyr9=processing.run('native:saveselectedfeatures', { "INPUT": layer, "OUTPUT": "memory:"+"Sigpac_"+str(mun)+"_"+str(pol)+"_"+str(par) })['OUTPUT']

                


                sym1 = QgsFillSymbol.createSimple({'style': 'vertical','color': '0,0,0,0', 'outline_color': 'blue'})
                renderer=QgsSingleSymbolRenderer(sym1)
                #etiqueto
                layer_settings  = QgsPalLayerSettings()
                text_format = QgsTextFormat()
                text_format.setFont(QFont("Arial", 12))
                text_format.setSize(12)
                text_format.setColor(QColor("Blue"))
                #le meto un buffer a la etiqueta
                buffer_settings = QgsTextBufferSettings()
                buffer_settings.setEnabled(True)
                buffer_settings.setSize(1)
                buffer_settings.setColor(QColor("white"))

                text_format.setBuffer(buffer_settings)
                layer_settings.setFormat(text_format)


                #cuenta elementos
                elementos=len(list(lyr9.getFeatures()))
                if elementos==0:
                    iface.messageBar().pushMessage("SIGPAC","En el municipio "+str(mun)+" poligono " +str(pol)+" no existe la parcela "+str(par), qgisCore.Qgis.Info,5)
                    
                    #QgsProject.instance().removeMapLayer(layer)
                    #canvas.freeze(False)  
                if elementos==1 and archivo == "":
                    
                    layer_settings.fieldName = '''concat('Pol ',"C_POLIGONO",' Par ',"C_PARCELA")'''            
                    layer_settings.isExpression = True
                    layer_settings.enabled = True
                    layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                    lyr9.setLabelsEnabled(True)
                    lyr9.setLabeling(layer_settings)
                    lyr9.triggerRepaint()
                    lyr9.setRenderer(renderer)
                    QgsProject.instance().addMapLayer(lyr9)
                    #QgsProject.instance().removeMapLayer(layer)
                    #canvas.freeze(False)
                    lyr9.updateExtents()
                    lyr9.commitChanges()
                    lyr9.updateExtents()
                    canvas.setExtent(lyr9.extent())
                    extension=lyr9.extent()
                

                            
                            
                if elementos>1  and archivo == "":
                   
                    layer_settings.fieldName = '''concat('Pol ',"C_POLIGONO",' Par ',"C_PARCELA",' Rec ',"C_RECINTO")'''
                    layer_settings.isExpression = True
                    layer_settings.enabled = True
                    layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                    lyr9.setLabelsEnabled(True)
                    lyr9.setLabeling(layer_settings)
                    lyr9.triggerRepaint()
                    lyr9.setRenderer(renderer)
                    QgsProject.instance().addMapLayer(lyr9)
                    #QgsProject.instance().removeMapLayer(layer)
                    #canvas.freeze(False)
                    lyr9.updateExtents()
                    lyr9.commitChanges()
                    lyr9.updateExtents()
                    canvas.setExtent(lyr9.extent())
                    extension=lyr9.extent()

                if elementos>1  and archivo is not "":
                    
                    layer_settings.fieldName = '''concat('Pol ',"C_POLIGONO",' Par ',"C_PARCELA",' Rec ',"C_RECINTO")'''
                    layer_settings.isExpression = True
                    layer_settings.enabled = True
                    layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                    #lyr9.setLabelsEnabled(True)
                    #lyr9.setLabeling(layer_settings)
                    #lyr9.triggerRepaint()
                    #lyr9.setRenderer(renderer)
                    #QgsProject.instance().addMapLayer(lyr9)
                    #QgsProject.instance().removeMapLayer(layer)
                    #canvas.freeze(False)
                 
                    QgsVectorFileWriter.writeAsVectorFormat(lyr9, archivo, "CP120", lyr9.crs(), "ESRI Shapefile", onlySelected=False)
                    #QgsProject.instance().removeMapLayer(lyr9)
                    lyr8=QgsVectorLayer(archivo,"Sigpac_"+str(mun)+"_"+str(pol)+"_"+str(par),"ogr")
                    #etiqueto
                    """layer_settings  = QgsPalLayerSettings()
                    text_format = QgsTextFormat()
                    text_format.setFont(QFont("Arial", 12))
                    text_format.setSize(12)
                    text_format.setColor(QColor("Red"))
                    layer_settings.setFormat(text_format)
                    layer_settings.fieldName = '''concat('Pol ',"C_POLIGONO",' Par ',"C_PARCELA")'''
                    layer_settings.isExpression = True"""
                    #layer_settings.enabled = True
                    #layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                    lyr8.setLabelsEnabled(True)
                    lyr8.setLabeling(layer_settings)
                    lyr8.triggerRepaint()
                    lyr8.setRenderer(renderer)
                    QgsProject.instance().addMapLayer(lyr8)
                    #QgsProject.instance().removeMapLayer(lyr9.id())
                    #canvas.freeze(False)
                    lyr8.updateExtents()
                    lyr8.commitChanges()
                    lyr8.updateExtents()
                    canvas.setExtent(lyr8.extent())

                
                if elementos==1 and archivo is not "":
                    
                    layer_settings.fieldName = '''concat('Pol ',"C_POLIGONO",' Par ',"C_PARCELA")'''            
                    layer_settings.isExpression = True
                    layer_settings.enabled = True
                    layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                    #lyr9.setLabelsEnabled(True)
                    #lyr9.setLabeling(layer_settings)
                    #lyr9.triggerRepaint()
                    #lyr9.setRenderer(renderer)
            
                    QgsVectorFileWriter.writeAsVectorFormat(lyr9, archivo, "CP120", lyr9.crs(), "ESRI Shapefile", onlySelected=False)
                    #QgsProject.instance().removeMapLayer(lyr9)
                    lyr8=QgsVectorLayer(archivo,"Sigpac_"+str(mun)+"_"+str(pol)+"_"+str(par),"ogr")
                    #etiqueto
                    """layer_settings  = QgsPalLayerSettings()
                    text_format = QgsTextFormat()
                    text_format.setFont(QFont("Arial", 12))
                    text_format.setSize(12)
                    text_format.setColor(QColor("Red"))
                    layer_settings.setFormat(text_format)
                    layer_settings.fieldName = '''concat('Pol ',"C_POLIGONO",' Par ',"C_PARCELA")'''
                    layer_settings.isExpression = True"""
                    #layer_settings.enabled = True
                    #layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                    lyr8.setLabelsEnabled(True)
                    lyr8.setLabeling(layer_settings)
                    lyr8.triggerRepaint()
                    lyr8.setRenderer(renderer)
                    QgsProject.instance().addMapLayer(lyr8)
                    #QgsProject.instance().removeMapLayer(lyr9.id())
                    #canvas.freeze(False)
                    lyr8.updateExtents()
                    lyr8.commitChanges()
                    lyr8.updateExtents()
                    canvas.setExtent(lyr8.extent())
                               
               
                #defino capas generales
                
                mup=r'O:/sigmena/carto/PROPIEDA/MONTES/PERTENEN/Mup_etrs89.shp'#QgsVectorLayer(r'O:/sigmena/carto/PROPIEDA/MONTES/PERTENEN/Mup_etrs89.shp' ,"M.U.P.","ogr")
                consorcio="O:/sigmena/carto/PROPIEDA/MONTES/CONTRATO/Consorcios_etrs89.shp"#QgsVectorLayer(r"O:/sigmena/carto/PROPIEDA/MONTES/CONTRATO/Consorcios_etrs89.shp","Consorcios","ogr")
                vvpp=r"O:/sigmena/carto/VVPP/REDVVPP/42_vvpp_etrs89.shp"#QgsVectorLayer(r"O:/sigmena/carto/VVPP/REDVVPP/42_vvpp_etrs89.shp","VVPP","ogr")
                ren="O:/sigmena/carto/ESPACIOS/REN/42_ren_ex_etrs89.shp"#QgsVectorLayer(r"O:\sigmena\carto\ESPACIOS\REN\42_ren_ex_etrs89.shp","R.E.N","ogr")
                zec=r"O:/sigmena/carto/ESPACIOS/NATU2000/ZEC/42_ZEC.shp"#QgsVectorLayer(r"O:\sigmena\carto\ESPACIOS\NATU2000\ZEC\42_ZEC.shp","Z.E.C","ogr")
                zepa=r"O:/sigmena/carto/ESPACIOS/NATU2000/ZEPA/42_ZEPA.shp"#QgsVectorLayer(r"O:\sigmena\carto\ESPACIOS\NATU2000\ZEPA\42_ZEPA.shp","Z.E.P.A","ogr")
                alondra=r"O:/sigmena/carto/ESPECIES/ESTUDIOS/CENSOS/ALONDRA RICOTI/42_AREAS_RELEVANCIA_ALONDRA_RICOTI_etrs89.shp"#QgsVectorLayer(r"O:\sigmena\carto\ESPECIES\ESTUDIOS\CENSOS\ALONDRA RICOTI\42_AREAS_RELEVANCIA_ALONDRA_RICOTI_etrs89.shp","Z. Alondra","ogr")
                yacimientos=r"O:/sigmena/carto/OTROS/BIENPATCULT/42_VW_BIENES.shp"#QgsVectorLayer(r"O:\sigmena\carto\OTROS\BIENPATCULT\42_VW_BIENES.shp","Yacimientos","ogr")
                pendientes=r"O:/sigmena/carto/M_FISICO/RELIEVE/PENDIENT/MDT5CYL_PEND_10_15.TIF"
                repoblaciones=r"O:/sigmena/carto/REPOBLAC/FTA/FTA_SORIA_1993_2018.shp"
                #carpeta de trabajo
                carpetasalida = tempfile.mkdtemp()
            
                print (carpetasalida)
                #hago los cruces
                self.crucecambiocultivo(lyr9,mup,carpetasalida)#tengo que ver como llamar al mup, tb layer 8 o 9
                self.crucecambiocultivo(lyr9,consorcio,carpetasalida)
                self.crucecambiocultivo(lyr9,vvpp,carpetasalida)
                self.crucecambiocultivo(lyr9,ren,carpetasalida)
                self.crucecambiocultivo(lyr9,zec,carpetasalida)
                self.crucecambiocultivo(lyr9,zepa,carpetasalida)
                self.crucecambiocultivo(lyr9,alondra,carpetasalida)
                self.crucecambiocultivo(lyr9,yacimientos,carpetasalida)
                self.crucecambiocultivo(lyr9,repoblaciones,carpetasalida)
                self.crucecambiocultivoraster(lyr9,pendientes,carpetasalida)
                
                print(resultadocambiocultivo)
                
                self.hagomapa2(resultadocambiocultivo,carpetasalida, munic,polig,parce)
                canvas.freeze(False)

                
                """try:
                    QgsVectorFileWriter.deleteShapeFile(archivo3)
                except:
                    pass
                try:
                    QgsVectorFileWriter.deleteShapeFile(archivo3)
                except:
                    pass"""

                
                pass
            #serie ortos
            if index==2:
                global muni
                global poli
                global parc
                print("serie ortos")
                #cargo la capa de la parcela
                comarcas=almacen[3]
                municipios=almacen[4]
                usarcomarca=almacen[1]
                print("0.1 pulso en ok")
                
                archivo=""
                #cojo lo que hay en cada recuadro o desplegable aqui variables que luego deberan estar en la cajita   primero los indicesOJO
                indmun=self.dlg.cbMUN_3.currentIndex()
                indpro=self.dlg.cbPRO_3.currentIndex()
                indcom=self.dlg.cbCOM_3.currentIndex()
                #saco los valores correspondientes
                try:
                    comarca=str(comarcas[int(indcom)-1])
                except:
                    comarca=""
                pro=str(provincias[int(indpro)][1])
                mun=self.dlg.MUN_3.text()##displayText()
                pol=self.dlg.POL_3.text()##displayText()
                par=self.dlg.PAR_3.text()##displayText()
                ano1=int(self.dlg.text_ano1.text())##displayText()
                ano2=int(self.dlg.text_ano2.text())##displayText()
                text_ventana1=self.dlg.text_ventana.text()##displayText()
             
                if text_ventana1 == '':
                    pass
                else:
                    ventana_list=text_ventana1.split(",")
                    ventana=[]
                    for element in ventana_list:
                        ventana.append(int(element))
                    print(ventana)
                
                poli=pol
                parc=par
                             
                #si no hay nada en la casilla de municipio, coge la informacion del desplegable mun es un numero del estilo 42001
                if mun == "":
                    mun=str(municipios[int(indmun)-1][2])
                    muni=str(municipios[int(indmun)-1][0])
                    #coge la ultima columna de mis datos
                else:
                    mun=str("{:02d}".format(int(pro)))+str("{:03d}".format(int(mun)))
                print("mun",mun)
                print("indmun",indmun)
                almacen[5]=indmun
                

               
                rutacache=os.path.join(QgsApplication.qgisSettingsDirPath(),r"python\plugins\informes\cache.txt")
                #lo escribo en el txt, mavhacando lo que ya tenia
                f=open(rutacache,"w")
                escribir=str(pro)+"\n"+str(usarcomarca)+"\n"+comarca+"\n"+str(comarcas).replace("'","").replace(", ",",")+"\n"+str(municipios)+"\n"
                f.write(escribir)
                f.close()

                QgsProject.instance().layerTreeRegistryBridge().setLayerInsertionPoint( QgsProject.instance().layerTreeRoot(), 0 )
                

                #canvas.freeze(True)


                caparecintos=os.path.join(rutacarpetarecintos,"RECFE21_"+mun+".shp")
                layer = QgsVectorLayer(caparecintos, mun, 'ogr')
                #QgsProject.instance().addMapLayers([layer])

                
                layer.selectByExpression("\"C_POLIGONO\" = '{}' ".format(pol)+" AND \"C_PARCELA\" = '{}'".format(par),QgsVectorLayer.SetSelection)
                #creo la nueva capa con la seleccion
                #output_path=archivo3
                #ojo esto es lo que acabo de cambiar
                #QgsVectorFileWriter.writeAsVectorFormat(layer, output_path, "CP120", layer.crs(), "ESRI Shapefile", onlySelected=True)
                #lyr9=QgsVectorLayer(output_path,"Sigpac_"+str(mun)+"_"+str(pol)+"_"+str(par),"ogr")
                lyr9=processing.run('native:saveselectedfeatures', { "INPUT": layer, "OUTPUT": "memory:"+"Sigpac_"+str(mun)+"_"+str(pol)+"_"+str(par) })['OUTPUT']

                


                sym1 = QgsFillSymbol.createSimple({'style': 'vertical','color': '0,0,0,0', 'outline_color': 'blue'})
                renderer=QgsSingleSymbolRenderer(sym1)
                #etiqueto
                layer_settings  = QgsPalLayerSettings()
                text_format = QgsTextFormat()
                text_format.setFont(QFont("Arial", 12))
                text_format.setSize(12)
                text_format.setColor(QColor("Blue"))
                #le meto un buffer a la etiqueta
                buffer_settings = QgsTextBufferSettings()
                buffer_settings.setEnabled(True)
                buffer_settings.setSize(1)
                buffer_settings.setColor(QColor("white"))

                text_format.setBuffer(buffer_settings)
                layer_settings.setFormat(text_format)


                #cuenta elementos
                elementos=len(list(lyr9.getFeatures()))
                if elementos==0:
                    iface.messageBar().pushMessage("SIGPAC","En el municipio "+str(mun)+" poligono " +str(pol)+" no existe la parcela "+str(par), qgisCore.Qgis.Info,5)
                    
                    #QgsProject.instance().removeMapLayer(layer)
                    #canvas.freeze(False)  
                if elementos==1 and archivo == "":
                    
                    layer_settings.fieldName = '''concat('Pol ',"C_POLIGONO",' Par ',"C_PARCELA")'''            
                    layer_settings.isExpression = True
                    layer_settings.enabled = True
                    layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                    lyr9.setLabelsEnabled(True)
                    lyr9.setLabeling(layer_settings)
                    lyr9.triggerRepaint()
                    lyr9.setRenderer(renderer)
                    QgsProject.instance().addMapLayer(lyr9)
                    #QgsProject.instance().removeMapLayer(layer)
                    #canvas.freeze(False)
                    lyr9.updateExtents()
                    lyr9.commitChanges()
                    lyr9.updateExtents()
                    canvas.setExtent(lyr9.extent())

                    #aqui podria configurar si meto cuatro esquinas que me haga ese zoom................................................................................................................OJOOJOJOJOJOJOJOJOJOJOJOJO
                    #no funciona
                    if text_ventana1 == '':
                        pass
                    else:
                        QgsProject.instance().layerTreeRegistryBridge().setLayerInsertionPoint( QgsProject.instance().layerTreeRoot(), 100 )  #ojo nuevo
                        zoomRectangle = QgsRectangle(ventana[0], ventana[1],ventana[2],ventana[3])
                        canvas.setExtent(zoomRectangle)
                        canvas.refresh()
                               
                

                            
                            
                if elementos>1  and archivo == "":
                   
                    layer_settings.fieldName = '''concat('Pol ',"C_POLIGONO",' Par ',"C_PARCELA",' Rec ',"C_RECINTO")'''
                    layer_settings.isExpression = True
                    layer_settings.enabled = True
                    layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                    lyr9.setLabelsEnabled(True)
                    lyr9.setLabeling(layer_settings)
                    lyr9.triggerRepaint()
                    lyr9.setRenderer(renderer)
                    QgsProject.instance().addMapLayer(lyr9)
                    #QgsProject.instance().removeMapLayer(layer)
                    #canvas.freeze(False)
                    lyr9.updateExtents()
                    lyr9.commitChanges()
                    lyr9.updateExtents()
                    canvas.setExtent(lyr9.extent())


                    #aqui podria configurar si meto cuatro esquinas que me haga ese zoom................................................................................................................OJOOJOJOJOJOJOJOJOJOJOJOJO
                    #no funciona
                    if text_ventana1 == '':
                        pass
                    else:
                        QgsProject.instance().layerTreeRegistryBridge().setLayerInsertionPoint( QgsProject.instance().layerTreeRoot(), 100 )  #ojo nuevo
                        zoomRectangle = QgsRectangle(ventana[0], ventana[1],ventana[2],ventana[3])
                        canvas.setExtent(zoomRectangle)
                        canvas.refresh()
                               

                if elementos>1  and archivo is not "":
                    
                    layer_settings.fieldName = '''concat('Pol ',"C_POLIGONO",' Par ',"C_PARCELA",' Rec ',"C_RECINTO")'''
                    layer_settings.isExpression = True
                    layer_settings.enabled = True
                    layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                    #lyr9.setLabelsEnabled(True)
                    #lyr9.setLabeling(layer_settings)
                    #lyr9.triggerRepaint()
                    #lyr9.setRenderer(renderer)
                    #QgsProject.instance().addMapLayer(lyr9)
                    #QgsProject.instance().removeMapLayer(layer)
                    #canvas.freeze(False)
                 
                    QgsVectorFileWriter.writeAsVectorFormat(lyr9, archivo, "CP120", lyr9.crs(), "ESRI Shapefile", onlySelected=False)
                    #QgsProject.instance().removeMapLayer(lyr9)
                    lyr8=QgsVectorLayer(archivo,"Sigpac_"+str(mun)+"_"+str(pol)+"_"+str(par),"ogr")
                    #etiqueto
                    """layer_settings  = QgsPalLayerSettings()
                    text_format = QgsTextFormat()
                    text_format.setFont(QFont("Arial", 12))
                    text_format.setSize(12)
                    text_format.setColor(QColor("Red"))
                    layer_settings.setFormat(text_format)
                    layer_settings.fieldName = '''concat('Pol ',"C_POLIGONO",' Par ',"C_PARCELA")'''
                    layer_settings.isExpression = True"""
                    #layer_settings.enabled = True
                    #layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                    lyr8.setLabelsEnabled(True)
                    lyr8.setLabeling(layer_settings)
                    lyr8.triggerRepaint()
                    lyr8.setRenderer(renderer)
                    QgsProject.instance().addMapLayer(lyr8)
                    #QgsProject.instance().removeMapLayer(lyr9.id())
                    #canvas.freeze(False)
                    lyr8.updateExtents()
                    lyr8.commitChanges()
                    lyr8.updateExtents()
                    canvas.setExtent(lyr8.extent())

                    #aqui podria configurar si meto cuatro esquinas que me haga ese zoom................................................................................................................OJOOJOJOJOJOJOJOJOJOJOJOJO
                    #no funciona
                    if text_ventana1 == '':
                        pass
                    else:
                        zoomRectangle = QgsRectangle(ventana[0], ventana[1],ventana[2],ventana[3])
                        canvas.setExtent(zoomRectangle)
                        canvas.refresh()
                               

                
                if elementos==1 and archivo is not "":
                    
                    layer_settings.fieldName = '''concat('Pol ',"C_POLIGONO",' Par ',"C_PARCELA")'''            
                    layer_settings.isExpression = True
                    layer_settings.enabled = True
                    layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                    #lyr9.setLabelsEnabled(True)
                    #lyr9.setLabeling(layer_settings)
                    #lyr9.triggerRepaint()
                    #lyr9.setRenderer(renderer)
            
                    QgsVectorFileWriter.writeAsVectorFormat(lyr9, archivo, "CP120", lyr9.crs(), "ESRI Shapefile", onlySelected=False)
                    #QgsProject.instance().removeMapLayer(lyr9)
                    lyr8=QgsVectorLayer(archivo,"Sigpac_"+str(mun)+"_"+str(pol)+"_"+str(par),"ogr")
                    #etiqueto
                    """layer_settings  = QgsPalLayerSettings()
                    text_format = QgsTextFormat()
                    text_format.setFont(QFont("Arial", 12))
                    text_format.setSize(12)
                    text_format.setColor(QColor("Red"))
                    layer_settings.setFormat(text_format)
                    layer_settings.fieldName = '''concat('Pol ',"C_POLIGONO",' Par ',"C_PARCELA")'''
                    layer_settings.isExpression = True"""
                    #layer_settings.enabled = True
                    #layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                    lyr8.setLabelsEnabled(True)
                    lyr8.setLabeling(layer_settings)
                    lyr8.triggerRepaint()
                    lyr8.setRenderer(renderer)
                    QgsProject.instance().addMapLayer(lyr8)
                    #QgsProject.instance().removeMapLayer(lyr9.id())
                    #canvas.freeze(False)
                    lyr8.updateExtents()
                    lyr8.commitChanges()
                    lyr8.updateExtents()
                    canvas.setExtent(lyr8.extent())



                    #aqui podria configurar si meto cuatro esquinas que me haga ese zoom................................................................................................................OJOOJOJOJOJOJOJOJOJOJOJOJO
                    #no funciona
                    if text_ventana1 == '':
                        pass
                    else:
                        zoomRectangle = QgsRectangle(ventana[0], ventana[1],ventana[2],ventana[3])
                        canvas.setExtent(zoomRectangle)
                        canvas.refresh()
                               

                
                
                self.hagomapa3(ano1,ano2, muni,poli,parc)
                canvas.freeze(False)


                
#genero tabla de coordenadas de una capa seleccionada                
            if index==3:
                layer=iface.activeLayer()
                if layer is None:
                    iface.messageBar().pushMessage("INFORMES","Selecciona una capa para calcular sus coordenadas", qgisCore.Qgis.Info,5)
                else:
                    decimales=int(self.dlg.lineEdit_decimales.text())
                    #layer = iface.activeLayer()
                    extent = layer.extent()
                    extent.scale( 1.15 )
                    iface.mapCanvas().setExtent(extent)
                    iface.mapCanvas().refresh()
                    
                    puntos=processing.run("native:extractvertices", {'INPUT':layer,'OUTPUT':'TEMPORARY_OUTPUT'})
                    layer2=puntos['OUTPUT']
                    #print(layer2)



                    idx = layer2.fields().indexFromName("x")
                    #print (idx)
                    if idx ==-1:
                        print("ya existe")
                        res = layer2.dataProvider().addAttributes([QgsField("x", QVariant.Double)])
                    idx2 = layer2.fields().indexFromName("y")
                    if idx2 ==-1:
                        print("ya existe")
                        res = layer2.dataProvider().addAttributes([QgsField("y", QVariant.Double)])
                    #layer.addAttribute(QgsField("valido", QVariant.String))
                    layer2.updateFields()
                    features = layer2.getFeatures()
                    n=1
                    for feature in features:
                        geom = feature.geometry()
                        geomSingleType = QgsWkbTypes.isSingleType(geom.wkbType())
                        if geom.type() == QgsWkbTypes.PointGeometry:
                            punto = geom.asPoint()
                            xx=round(punto.x(),decimales)
                            yy=round(punto.y(),decimales)
                            layer2.startEditing()
                            feature.setAttribute(idx, xx)
                            feature.setAttribute(idx2, yy)
                            feature.setAttribute('id', n)
                            
                            layer2.updateFeature(feature)
                            #Call commit to save the changes
                            layer2.commitChanges()
                            n=n+1
                    QgsProject.instance().addMapLayer(layer2)
                    layer_settings  = QgsPalLayerSettings()
                    text_format = QgsTextFormat()
                    text_format.setFont(QFont("Arial", 10))
                    text_format.setSize(12)
                    text_format.setColor(QColor("Red"))
                                #le meto un buffer a la etiqueta
                    buffer_settings = QgsTextBufferSettings()
                    buffer_settings.setEnabled(True)
                    buffer_settings.setSize(1)
                    buffer_settings.setColor(QColor("white"))

                    text_format.setBuffer(buffer_settings)
                    layer_settings.setFormat(text_format)
                    layer_settings.fieldName = '''concat(' ',"ID")'''            
                    layer_settings.isExpression = True
                    layer_settings.enabled = True
                    layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                    layer2.setLabelsEnabled(True)
                    layer2.setLabeling(layer_settings)
                    layer2.triggerRepaint()
                    print("hasta aqui bien1")
                    #hago la tabla para el html
                    interesantes=["Id","x","y"]
                    cabecera=["PUNTO","X","Y"]
                    tablatotal=[]
                    #listado de columnas que me interesan
                    for feature in layer2.getFeatures():
                        tablaparcial=[]
                        #print(feature)
                        for field in layer2.fields():
                        #print(field)
                            for campo in interesantes:
                                if campo== field.name():
                                    tablaparcial.append(feature[campo])
                                    #print(tablamonte)
                                    tablatotal.append(tablaparcial)

                            #tablatotal.sort(key=lambda x: x[0])            
                            tablatotal.insert(0,cabecera)
                            #elimino los duplicados
                            lista_nueva = []
                            for i in tablatotal:
                                if i not in lista_nueva:
                                        lista_nueva.append(i)
                            tablatotal=lista_nueva

                    projectInstance = QgsProject.instance()
                    layoutmanager = projectInstance.layoutManager()
                    layout = layoutmanager.layoutByName("A3_H")
                    mapItem = layout.referenceMap()


                    layout_html = QgsLayoutItemHtml(layout)
                    html_frame = QgsLayoutFrame(layout, layout_html)
                    html_frame.attemptSetSceneRect(QRectF(10, 10, 200, 200))
                    html_frame.setFrameEnabled(True)
                    layout_html.addFrame(html_frame)
                    layout_html.setContentMode(QgsLayoutItemHtml.ManualHtml)#background-color: white ;
                    estilo="<style> table { font-size: 15px; background-color:white; border-collapse: collapse;}tr {border: 3px solid black;bgcolor :white;}td {white-space: nowrap; padding: 2px;bgcolor :white;}td.bold {font-weight: bold;}td.gap {background-color:black;padding:2px;}</style>"      
                    htmlcode = Table(tablatotal[1:],header_row=tablatotal[0])
                    layout_html.setHtml(estilo+" "+str(htmlcode))
                    layout_html.loadHtml()
                    html_frame.setFrameStrokeWidth(QgsLayoutMeasurement(0.5, QgsUnitTypes.LayoutMillimeters))
                    html_frame.setFrameStrokeColor(QColor("transparent"))
                    extent = layer.extent()
                    extent.scale( 1.15 )
                    iface.mapCanvas().setExtent(extent)
                    iface.mapCanvas().refresh()
                    mapItem.zoomToExtent(extent)#(iface.mapCanvas().extent())
                    #mapItem.setExtent(iface.mapCanvas().extent())   cambia la forma del mapa
                    iface.openLayoutDesigner(layout)
                                
